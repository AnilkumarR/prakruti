'''
Company : EBSL
Author : Karan
Module : Purchase GRN

Class 1 : PrakrutiGRNInspectionDetails
Class 2 : PrakrutiGRNInspectionDetailsLine

Table 1 & Reference Id : prakruti_grn_inspection_details,order_line
Table 2 & Reference Id : prakruti_grn_inspection_details_line,inspection_line_id

Updated By : Karan 
Updated Date & Version : 2017/08/23 & 0.1
'''
from openerp import models, fields, api,_
from openerp.tools import amount_to_text
from openerp.tools.amount_to_text import amount_to_text_in 
from openerp.tools.amount_to_text import amount_to_text_in_without_word_rupees 
import openerp
from datetime import date, datetime
from openerp.tools import DEFAULT_SERVER_DATE_FORMAT, image_colorize, image_resize_image_big
from openerp.exceptions import except_orm, Warning as UserError
from openerp import tools
from datetime import timedelta
from openerp.osv import osv,fields
from openerp import models, fields, api, _
from openerp.tools.translate import _
import sys, os, urllib2, urlparse
from email.MIMEText import MIMEText
from email.MIMEImage import MIMEImage
from email.MIMEMultipart import MIMEMultipart
import email, re
from datetime import datetime
from datetime import date, timedelta
from lxml import etree
import cgi
import logging
import lxml.html
import lxml.html.clean as clean
import openerp.pooler as pooler
import random
import re
import socket
import threading
import time
from openerp.tools import image_resize_image_big

class PrakrutiGRNInspectionDetails(models.Model):
    _name =  'prakruti.grn_inspection_details'
    _table = 'prakruti_grn_inspection_details'
    _description = 'Purchase GRN'
    _rec_name = 'grn_no'    
    _order="id desc" 
    
    '''
    Its an unique autogenerated Number which will be in the format of
    Format : GRN-NUMBER\FINANCIAL YEAR
    Example : GRN-0001\17-18
    Updated By : Karan
    Updated On : 2017/08/23
    Version :0.1
    
    '''    
    @api.one
    @api.multi
    def _get_auto(self):
        style_format = {}
        month_value=0
        year_value=0
        next_year=0
        dispay_year=''
        display_present_year=''
        cr = self.env.cr
        uid = self.env.uid
        ids = self.ids
        for temp in self :
            cr.execute('''SELECT 
                                CAST(EXTRACT(month FROM grn_date) AS INTEGER) AS month,
                                CAST(EXTRACT(year FROM grn_date) AS INTEGER) AS year,
                                id 
                          FROM 
                                prakruti_grn_inspection_details 
                          WHERE 
                                id=%s''',((temp.id),))
            for item in cr.dictfetchall():
                month_value=int(item['month'])
                year_value=int(item['year'])
            if month_value<=3:
                year_value=year_value-1
            else:
                year_value=year_value
            next_year=year_value+1
            dispay_year=str(next_year)[-2:]
            display_present_year=str(year_value)[-2:]
            cr.execute('''SELECT autogenerate_purchase_grn(%s)''', ((temp.id),)  ) 
            result = cr.dictfetchall()
            parent_invoice_id = 0
            for value in result: parent_invoice_id = value['autogenerate_purchase_grn'];
            auto_gen = int(parent_invoice_id)
            if len(str(auto_gen)) < 2:
                auto_gen = '000'+ str(auto_gen)
            elif len(str(auto_gen)) < 3:
                auto_gen = '00' + str(auto_gen)
            elif len(str(auto_gen)) == 3:
                auto_gen = '0'+str(auto_gen)
            else:
                auto_gen = str(auto_gen)
            for record in self :
                style_format[record.id] = 'GRN-'+str(auto_gen) +'/'+str(display_present_year)+'-'+str(dispay_year)
                cr.execute('''UPDATE 
                                    prakruti_grn_inspection_details 
                              SET 
                                    grn_no = %s 
                              WHERE 
                                    id=%s ''', ((style_format[record.id]),(temp.id),)  )
        return style_format    
    
    order_line = fields.One2many('prakruti.grn_inspection_details_line','inspection_line_id')
    grn_no= fields.Char(string='GRN No')
    po_no = fields.Char(string='Order No', readonly=True)
    pr_no = fields.Char(string='Requisition No', readonly=True)
    qa_no = fields.Char(string='Analysis No', readonly=True)
    qo_no = fields.Char(string='Quotation No', readonly=True)
    req_no =fields.Char(string='Request No', readonly=True)
    vendor_id = fields.Many2one('res.partner',string='Vendor/Supplier', readonly= "True")
    vendor_reference = fields.Char(string='Vendor/Supplier Reference', readonly= "True" )
    other_reference = fields.Char(string='Other Reference')
    request_date = fields.Date(string = "Requisition Date")
    order_date = fields.Date(string='Order Date')
    destination = fields.Char(string='Destination')
    company_address = fields.Many2one('res.company',string='Company Address', readonly= "True" )
    delivery_address = fields.Many2one('res.company',string='Dispatch To', readonly= "True" )
    payment = fields.Char(string='Mode/Terms of Payments')
    terms_of_delivery = fields.Text(string='Terms of Delivery')
    remarks=fields.Text('Received Remarks', readonly= "True" )
    dispatch_through = fields.Char(string='Dispatch Through', readonly= "True")
    prepared_by = fields.Many2one('res.users','Prepared By',readonly=True)
    maintanence_manager = fields.Many2one('res.users',string="Maintanence Manager")    
    purchase_manager = fields.Many2one('res.users',string="Purchase Manager", readonly= "True" )
    purchase_type = fields.Many2one('product.group',string= 'Purchase Type')
    pr_common_id = fields.Integer('PR SCREEN COMMON ID')
    prakruti_stock_id = fields.Integer('SCREEN COMMON ID')
    stores_incharge = fields.Many2one('res.users','Stores Incharge')
    grn_remarks=fields.Text('Remarks')
    gc_no=fields.Char('GC No')
    gc_date=fields.Date('GC Date')
    dc_no=fields.Char('DC No')
    dc_date=fields.Date('DC Date')
    transporter_name=fields.Text('Name of Transporter')
    transporter_payment_details=fields.Text('Transporter Payment Details')
    doc_no=fields.Char('Doc. No')
    rev_no=fields.Char('Rev. No',default='02',readonly=1)
    doc_date=fields.Date('Document Date',default= fields.Date.today,readonly=1)
    auto_no = fields.Integer('Auto')
    req_no_control_id = fields.Integer('Auto Generating id',default= 0)    
    good_received_note_no= fields.Char(string='GRN No',compute= '_get_auto', readonly=True)
    grn_date=fields.Date('GRN Date',default= fields.Date.today)
    flag_rejected_count = fields.Integer('Flag', default=1)
    location_id = fields.Many2one('prakruti.stock_location', string='Stock Location')
    st_loc_remarks = fields.Text(string='Stock Location Remarks')
    flag_count_accept = fields.Integer('Accepted Line is There',default= 0)
    flag_count_reject = fields.Integer('Rejected Line is There',default= 0)
    flag_count_par_reject = fields.Integer('Partial Rejected Line is There',default= 0)
    product_id = fields.Many2one('product.product', related='order_line.product_id', string='Product Name')
    coming_from = fields.Char(string= 'Coming From',readonly=1)
    state = fields.Selection([
        ('grn','Goods Received Note'),
        ('qc_check','Quality Control Check'),                              
        ('accepted','Accepted'),
        ('rejected','Rejected'),
        ('accepted_under_deviation','Accepted Under Deviation'),
        #('qc_check_done','QC Check Done'),
        ('invoice','Invoice'),
        ('done','Goods Received Note Done')],default= 'grn', string= 'Status')
    
    #added by induja on 20170928 for categorising the products
    categorization = fields.Selection([
		('goods','Goods'),
		('services','Services'),
		('goods_services','Goods and Services')],default= 'goods',string= 'Category')  
    #added by induja on 20171011 for Other details
    
    document_no = fields.Char(string ="Document No" )
    revision_no = fields.Char(string = "Rev. No")
    default_pr_date = fields.Char(string="Document Date")
    plant_manager = fields.Many2one('res.users',string="Plant Manager",readonly=True) 
    to_name = fields.Many2one('res.users',string="Name") 
    
    #Updated for Creating Invoice
    #Updated on 20171018 by Karan
    order_close_flag= fields.Integer('Close The Order', default= 0)# Updated from The Purchase Invoice to set the value to 1 when for that particular grn is done
    list_in_pi_line=fields.Integer(string= 'Revised Flag',default=0)
    any_adv_payment =fields.Selection([
                    ('no', 'No'),
                    ('yes','Yes')
                    ], string= 'Any Advance Payment')
    advance_payment_type =fields.Selection([
                    ('cash', 'CASH'),
                    ('cheque','CHEQUE'),
                    ('demand_draft','DEMAND DRAFT')
                    ], string= 'Done By')
    cash_amount = fields.Float(string="Amount",digits=(6,3))
    cash_remarks = fields.Text(string="Remarks")    
    cheque_amount = fields.Float(string="Amount",digits=(6,3))
    cheque_no = fields.Integer(string="Cheque No.")
    cheque_remarks = fields.Text(string="Remarks")
    draft_amount = fields.Float(string="Amount",digits=(6,3))
    draft_no = fields.Integer(string="Draft No.")
    draft_remarks = fields.Text(string="Remarks")
    insurance_charges = fields.Float(string="Insurance Charges" ,digits=(6,3))
    frieght_charges_applied = fields.Selection([('yes','Yes'),('no','No')], string="Freight Charge Applied", default='no')
    frieght_charges = fields.Float(string="Frieght Charges" ,digits=(6,3))
    additional_charges = fields.Float(string='Additional Charges' ,digits=(6,3))
    packing_charges = fields.Float(string='Packing & Forwarding' ,digits=(6,3))
    
    
    @api.model
    def _default_company(self):
        return self.env['res.company']._company_default_get('res.partner') 
    
    _defaults = {
        'grn_no':'New',
        'prepared_by': lambda s, cr, uid, c:uid, #Currently logged in user will display automatically,
        'company_address': _default_company,
        'delivery_address': _default_company,
        'stores_incharge': lambda s, cr, uid, c:uid, #Current login user will display automatically
        }
    
    @api.multi
    def unlink(self):
        raise UserError(_('Can\'t Delete record'))
        return super(PrakrutiGRNInspectionDetails, self).unlink()
    
    
        
    
    @api.one
    @api.multi 
    def grn_to_quality(self):
        cr = self.env.cr
        uid = self.env.uid
        ids = self.ids
        context = 'context'
        for temp in self:
            cr = self.env.cr
            uid = self.env.uid
            ids = self.ids
            context = {}
            cr.execute(''' SELECT count(id) as entered_line FROM prakruti_grn_inspection_details_line WHERE COALESCE(packing_style,0) > 0 AND COALESCE(received_per_qty,0) > 0 AND inspection_line_id = %s''',((temp.id),))
            for no_of_line in cr.dictfetchall():
                entered_line = int(no_of_line['entered_line'])
            if entered_line == len(temp.order_line):
                ebsl_id = self.pool.get('prakruti.quality_control').create(cr,uid, {
                    'po_no':temp.po_no,
                    'qa_no':temp.qa_no,
                    'pr_no':temp.pr_no,
                    'qo_no':temp.qo_no,
                    'req_no':temp.req_no,
                    'grn_no':temp.grn_no,
                    'grn_date':temp.grn_date,
                    'vendor_reference':temp.vendor_reference,
                    'payment':temp.payment,
                    'destination':temp.destination,
                    'other_reference':temp.other_reference,
                    'maintanence_manager':temp.maintanence_manager.id,
                    'purchase_manager':temp.purchase_manager.id,
                    'stores_incharge':temp.stores_incharge.id,
                    'terms_of_delivery':temp.terms_of_delivery,
                    'vendor_id': temp.vendor_id.id,
                    'state':'qc',
                    'remarks':temp.remarks,
                    'request_date':temp.request_date,
                    'order_date':temp.order_date,
                    'categorization':temp.categorization,
                    'to_name':temp.to_name.id,
                    'plant_manager':temp.plant_manager.id,
                    'company_address':temp.company_address.id,
                    'document_no':temp.document_no,
                    'revision_no':temp.revision_no,
                    'default_pr_date':temp.default_pr_date,
                    'dispatch_through':temp.dispatch_through
                    })
                for item in temp.order_line:
                    erp_id = self.pool.get('prakruti.quality_control_line').create(cr,uid, {
                        'product_id': item.product_id.id,
                        'description': item.description,
                        'actual_quantity': item.quantity,
                        'quantity': item.quantity,
                        'uom_id': item.uom_id.id,
                        'scheduled_date': item.scheduled_date,
                        'remarks':item.remarks,
                        'batch_no':item.batch_no,
                        'grn_grid_common_id':item.id,
                        'control_line_id': ebsl_id
                        })
                    cr.execute('''UPDATE prakruti_grn_inspection_details SET state = 'qc_check' WHERE prakruti_grn_inspection_details.id = cast(%s as integer)''', ((temp.id),))
                    cr.execute("UPDATE  prakruti_purchase_requisition SET state = 'qc_check' WHERE prakruti_purchase_requisition.requisition_no = %s ", ((temp.pr_no),))  
                    #template_id = self.pool.get('email.template').search(cr,uid,[('name','=','Purchase GRN QC')],context=context)[0]
                    #email_obj = self.pool.get('email.template').send_mail(cr, uid, template_id,ids[0],force_send=True)
            else:
                raise UserError(_('Please Enter Packing Style & Received Per Qty'))
        return {}
    
    
    @api.one
    @api.multi
    def grn_to_stock(self):
        cr = self.env.cr
        uid = self.env.uid
        ids = self.ids
        context = 'context'
        for temp in self:
            cr = self.env.cr
            uid = self.env.uid
            ids = self.ids
            context = {}  
            if temp.st_loc_remarks and temp.location_id:
                for item in temp.order_line:
                    if item.status in ['reject']:
                        temp.flag_count_reject = 1
                    elif item.status in ['accept']:
                        temp.flag_count_accept = 1
                    elif item.status in ['par_accept']:
                        temp.flag_count_par_reject = 1
                ####################################################################################################################################################
                #Update Price in Product Template
                cr.execute('''  UPDATE 
                                    product_template AS b 
                                SET 
                                    list_purchase_price = a.unit_price 
                                FROM(
                                    SELECT     
                                        prakruti_grn_inspection_details_line.unit_price,
                                        prakruti_grn_inspection_details_line.product_id,
                                        prakruti_grn_inspection_details_line.inspection_line_id,
                                        product_product.product_tmpl_id,
                                        product_template.id 
                                    FROM 
                                        prakruti_grn_inspection_details_line JOIN 
                                        product_product ON 
                                        prakruti_grn_inspection_details_line.product_id = product_product.id JOIN 
                                        product_template ON product_template.id = product_product.product_tmpl_id 
                                    WHERE 
                                        inspection_line_id = %s
                                    ) AS a 
                                WHERE 
                                    a.product_tmpl_id = b.id''',((temp.id),))
                #Count No of Accepted Line
                cr.execute("SELECT count(id) as accept_line FROM prakruti_grn_inspection_details_line WHERE (status = 'accept' or status = 'par_accept') AND inspection_line_id = %s",((temp.id),))
                for act_line in cr.dictfetchall():
                    accept_line=int(act_line['accept_line'])
                if accept_line > 0 or temp.flag_count_accept or temp.flag_count_par_reject:
                    cr.execute("SELECT stock_purchase(%s)", ((temp.id),))    
                    cr.execute('''  UPDATE 
                                        prakruti_purchase_line AS b 
                                    SET 
                                        status= 'close', 
                                        balance_qty = a.balance_qty, 
                                        no_of_packings = a.packing_style, 
                                        pack_per_qty = a.received_per_qty, 
                                        extra_packing = a.extra_packing 
                                    FROM(
                                        SELECT 
                                            inspection_line_id,
                                            purchase_line_common_id,
                                            product_id,
                                            balance_qty,
                                            status,
                                            packing_style,
                                            received_per_qty,
                                            extra_packing 
                                        FROM 
                                            prakruti_grn_inspection_details_line 
                                        WHERE inspection_line_id= %s 
                                        ) AS a 
                                    WHERE 
                                        a.purchase_line_common_id = b.id AND 
                                        a.product_id = b.product_id AND 
                                        a.balance_qty <= 0''',((temp.id),))    
                    cr.execute('''  UPDATE 
                                        prakruti_purchase_line AS b 
                                    SET 
                                        status= 'open', 
                                        balance_qty = a.balance_qty, 
                                        no_of_packings = a.packing_style, 
                                        pack_per_qty = a.received_per_qty, 
                                        extra_packing = a.extra_packing 
                                    FROM(
                                        SELECT 
                                            inspection_line_id,
                                            purchase_line_common_id,
                                            product_id,
                                            balance_qty,
                                            status,
                                            packing_style,
                                            received_per_qty,
                                            extra_packing 
                                        FROM 
                                            prakruti_grn_inspection_details_line 
                                        WHERE inspection_line_id= %s 
                                        ) AS a 
                                    WHERE 
                                        a.purchase_line_common_id = b.id AND 
                                        a.product_id = b.product_id AND 
                                        a.balance_qty > 0''',((temp.id),))
                    cr.execute('''  UPDATE 
                                        prakruti_purchase_line AS b 
                                    SET 
                                        balance_qty = a.balance_qty, 
                                        no_of_packings = a.packing_style, 
                                        pack_per_qty = a.received_per_qty, 
                                        extra_packing = a.extra_packing 
                                    FROM(
                                        SELECT 
                                            inspection_line_id,
                                            purchase_line_common_id,
                                            product_id,
                                            balance_qty,
                                            status,
                                            packing_style,
                                            received_per_qty,
                                            extra_packing 
                                        FROM 
                                            prakruti_grn_inspection_details_line 
                                        WHERE 
                                            inspection_line_id= %s 
                                        ) AS a 
                                    WHERE 
                                        a.purchase_line_common_id = b.id AND 
                                        a.product_id = b.product_id AND 
                                        a.balance_qty > 0''',((temp.id),))
                    
                    #Updating status in PO
                    cr.execute('''  SELECT 
                                        count(prakruti_purchase_line.id) AS total_no_close_line 
                                    FROM
                                        prakruti_purchase_line JOIN
                                        prakruti_purchase_order ON
                                        prakruti_purchase_line.purchase_line_id = prakruti_purchase_order.id
                                    WHERE
                                        prakruti_purchase_line.status = 'close' AND
                                        prakruti_purchase_order.po_no = %s
                                            ''',((temp.po_no),))
                    for line in cr.dictfetchall():
                        total_no_close_line = line['total_no_close_line']
                    cr.execute('''  SELECT 
                                        count(prakruti_purchase_line.id) AS total_no_line 
                                    FROM
                                        prakruti_purchase_line JOIN
                                        prakruti_purchase_order ON
                                        prakruti_purchase_line.purchase_line_id = prakruti_purchase_order.id
                                    WHERE
                                        prakruti_purchase_order.po_no = %s
                                            ''',((temp.po_no),))
                    for line in cr.dictfetchall():
                        total_no_line = line['total_no_line']
                    if total_no_line == total_no_close_line:
                        cr.execute('''UPDATE prakruti_purchase_order SET state = 'confirm' WHERE prakruti_purchase_order.po_no = %s''',((temp.po_no),))
                        cr.execute('''UPDATE prakruti_purchase_requisition SET state = 'done' WHERE prakruti_purchase_requisition.requisition_no = %s''', ((temp.pr_no),))            
                        cr.execute("UPDATE prakruti_grn_inspection_details SET state = 'done' WHERE prakruti_grn_inspection_details.id = cast(%s as integer)", ((temp.id),))
                    else:            
                        cr.execute("UPDATE prakruti_grn_inspection_details SET state = 'done' WHERE prakruti_grn_inspection_details.id = cast(%s as integer)", ((temp.id),))
                        cr.execute('''UPDATE prakruti_purchase_order SET state = 'partial_grn' WHERE prakruti_purchase_order.po_no = %s''',((temp.po_no),))
                        cr.execute('''UPDATE prakruti_purchase_requisition SET state = 'partial_grn' WHERE prakruti_purchase_requisition.requisition_no = %s''',((temp.pr_no),))
                        cr.execute('''  INSERT INTO prakruti_gate_pass(
                                            req_no_control_id,
                                            pass_no,
                                            pass_date,
                                            create_date,
                                            create_uid,
                                            write_date,
                                            write_uid,                                            
                                            cash_amount,
                                            cash_remarks,
                                            cheque_amount,
                                            cheque_no,
                                            cheque_remarks,
                                            draft_amount,
                                            draft_no,
                                            draft_remarks,
                                            advance_payment_type,
                                            any_adv_payment,
                                            po_no,
                                            qa_no,
                                            pr_no,
                                            qo_no,
                                            req_no,
                                            vendor_reference,
                                            payment,
                                            destination,
                                            other_reference,
                                            maintanence_manager,
                                            purchase_manager,
                                            stores_incharge,
                                            terms_of_delivery,
                                            vendor_id,
                                            state,
                                            remarks,
                                            request_date,
                                            order_date,                        
                                            amount_untaxed,
                                            total_discount,
                                            total_tax,
                                            dispatch_through,
                                            purchase_type,
                                            customer_id,
                                            vehicle_no,
                                            transport_name,
                                            coming_from,
                                            document_type,    
                                            invoice_no_check,
                                            dc_no_inward_check,
                                            mod_vat_copy_collected_check,
                                            po_no_check,
                                            does_lr_copy_received_check,
                                            no_of_product,
                                            amount_taxed,
                                            total_cgst,
                                            total_sgst,
                                            total_igst,
                                            total_gst,
                                            insurance_charges,
                                            frieght_charges_applied,
                                            frieght_charges,
                                            packing_charges,
                                            additional_charges,
                                            grand_total,
                                            categorization,
                                            to_name,
                                            plant_manager,
                                            document_no,
                                            rev_no,
                                            default_pr_date,
                                            vendor_accepted_delivery_date
                                            )
                                        SELECT
                                            0 AS req_no_control_id,
                                            CAST('New' AS CHARACTER VARYING) AS pass_no,
                                            CURRENT_DATE AS pass_date,
                                            CURRENT_DATE AS create_date,
                                            create_uid,
                                            CURRENT_DATE AS write_date,
                                            write_uid,
                                            cash_amount,
                                            cash_remarks,
                                            cheque_amount,
                                            cheque_no,
                                            cheque_remarks,
                                            draft_amount,
                                            draft_no,
                                            draft_remarks,
                                            advance_payment_type,
                                            any_adv_payment,
                                            po_no,
                                            qa_no,
                                            pr_no,
                                            qo_no,
                                            req_no,
                                            vendor_reference,
                                            payment,
                                            destination,
                                            other_reference,
                                            maintanence_manager,
                                            purchase_manager,
                                            stores_incharge,
                                            terms_of_delivery,
                                            vendor_id,
                                            'draft' AS state,
                                            remarks,
                                            request_date,
                                            order_date,                        
                                            amount_untaxed,
                                            total_discount,
                                            total_tax,
                                            dispatch_through,
                                            purchase_type,
                                            company_address AS customer_id,
                                            vehicle_no,
                                            transport_name,
                                            'purchase' AS coming_from,
                                            'inward' AS document_type,    
                                            invoice_no_check,
                                            dc_no_inward_check,
                                            mod_vat_copy_collected_check,
                                            po_no_check,
                                            does_lr_copy_received_check,
                                            no_of_product,
                                            amount_taxed,
                                            total_cgst,
                                            total_sgst,
                                            total_igst,
                                            total_gst,
                                            insurance_charges,
                                            frieght_charges_applied,
                                            frieght_charges,
                                            packing_charges,
                                            additional_charges,
                                            grand_total,
                                            categorization,
                                            to_name,
                                            plant_manager,
                                            document_no,
                                            revision_no,
                                            default_pr_date,
                                            vendor_accepted_delivery_date
                                        FROM
                                            prakruti_logistics_po_tracking 
                                        WHERE 
                                            prakruti_logistics_po_tracking.po_no = %s ORDER BY ID DESC LIMIT 1''',((temp.po_no),))
                        cr.execute('''  INSERT INTO prakruti_gate_pass_line(
                                            checked_status,
                                            checked_flag,
                                            status,
                                            extra_packing,
                                            create_date,
                                            create_uid,
                                            write_date,
                                            write_uid,                                            
                                            product_id,
                                            description,
                                            quantity,
                                            uom_id,
                                            scheduled_date,                   
                                            unit_price,
                                            remarks,
                                            purchase_line_common_id,
                                            hsn_code,
                                            discount_rate,
                                            discount_value,
                                            taxable_value,
                                            total,
                                            cgst_id,
                                            cgst_rate,
                                            cgst_value,
                                            sgst_id,
                                            sgst_rate,
                                            sgst_value,
                                            igst_id,
                                            igst_rate,
                                            igst_value,
                                            taxable_value_after_adding_other,
                                            subtotal,
                                            no_of_product,
                                            packing_charges,
                                            frieght_charges,
                                            additional_charges,
                                            insurance_charges,
                                            expected_date,
                                            requisition_line_id,
                                            vendor_accepted_delivery_date,
                                            slip_id,
                                            main_id                                            
                                            )
                                        SELECT
                                            checked_status,
                                            checked_flag,
                                            status,
                                            extra_packing,
                                            create_date,
                                            create_uid,
                                            write_date,
                                            write_uid,                                            
                                            product_id,
                                            description,
                                            quantity,
                                            uom_id,
                                            scheduled_date,                   
                                            unit_price,
                                            remarks,
                                            purchase_line_common_id,
                                            hsn_code,
                                            discount_rate,
                                            discount_value,
                                            taxable_value,
                                            total,
                                            cgst_id,
                                            cgst_rate,
                                            cgst_value,
                                            sgst_id,
                                            sgst_rate,
                                            sgst_value,
                                            igst_id,
                                            igst_rate,
                                            igst_value,
                                            taxable_value_after_adding_other,
                                            subtotal,
                                            no_of_product,
                                            packing_charges,
                                            frieght_charges,
                                            additional_charges,
                                            insurance_charges,
                                            expected_date,
                                            requisition_line_id,
                                            vendor_accepted_delivery_date,
                                            slip_id,
                                            main_id
                                        FROM(
                                            SELECT
                                                CAST('Not Yet Delivered' AS CHARACTER VARYING) AS checked_status,
                                                0 AS checked_flag,
                                                'open' AS status,
                                                0 AS extra_packing,
                                                CURRENT_DATE AS create_date,
                                                prakruti_purchase_line.create_uid,
                                                CURRENT_DATE AS write_date,
                                                prakruti_purchase_line.write_uid,                                            
                                                prakruti_purchase_line.product_id,
                                                prakruti_purchase_line.description,
                                                prakruti_purchase_line.balance_qty AS quantity,
                                                prakruti_purchase_line.uom_id,
                                                prakruti_purchase_line.scheduled_date,                   
                                                prakruti_purchase_line.unit_price,
                                                prakruti_purchase_line.remarks,
                                                prakruti_purchase_line.id AS purchase_line_common_id,
                                                prakruti_purchase_line.hsn_code,
                                                0 AS discount_rate,
                                                prakruti_purchase_line.discount_value,
                                                prakruti_purchase_line.taxable_value,
                                                prakruti_purchase_line.total,
                                                prakruti_purchase_line.cgst_id,
                                                prakruti_purchase_line.cgst_rate,
                                                prakruti_purchase_line.cgst_value,
                                                prakruti_purchase_line.sgst_id,
                                                prakruti_purchase_line.sgst_rate,
                                                prakruti_purchase_line.sgst_value,
                                                prakruti_purchase_line.igst_id,
                                                prakruti_purchase_line.igst_rate,
                                                prakruti_purchase_line.igst_value,
                                                prakruti_purchase_line.taxable_value_after_adding_other,
                                                prakruti_purchase_line.subtotal,
                                                prakruti_purchase_line.no_of_product,
                                                prakruti_purchase_line.packing_charges,
                                                prakruti_purchase_line.frieght_charges,
                                                prakruti_purchase_line.additional_charges,
                                                prakruti_purchase_line.insurance_charges,
                                                CURRENT_DATE AS expected_date,
                                                prakruti_purchase_line.requisition_line_id,
                                                CURRENT_DATE AS vendor_accepted_delivery_date,
                                                prakruti_purchase_line.slip_id,
                                                prakruti_purchase_order.po_no
                                            FROM
                                                prakruti_purchase_line JOIN
                                                prakruti_purchase_order ON
                                                prakruti_purchase_line.purchase_line_id = prakruti_purchase_order.id
                                            WHERE 
                                                prakruti_purchase_order.po_no = %s AND prakruti_purchase_line.status = 'open'
                                            ) AS a JOIN (
                                            SELECT 
                                                prakruti_gate_pass.id AS main_id,
                                                prakruti_gate_pass.po_no
                                            FROM  
                                                prakruti_gate_pass
                                            WHERE
                                                prakruti_gate_pass.po_no = %s 
                                            ORDER BY id desc limit 1
                                                        ) AS b ON a.po_no = b.po_no''',((temp.po_no),(temp.po_no),))                        
                    cr.execute("UPDATE prakruti_grn_inspection_details_line SET available_qty = accepted_qty WHERE prakruti_grn_inspection_details_line.inspection_line_id = cast(%s as integer)", ((temp.id),))    
                ####################################################################################################################################################
                #template_id = self.pool.get('email.template').search(cr,uid,[('name','=','Purchase GRN')],context=context)[0]
                #email_obj = self.pool.get('email.template').send_mail(cr, uid, template_id,ids[0],force_send=True) 
            else:
                raise UserError(_('Oops...! Please Enter Stock Location and Location Remarks...'))
        return {}
    
    

class PrakrutiGRNInspectionDetailsLine(models.Model):
    _name = 'prakruti.grn_inspection_details_line'
    _table = 'prakruti_grn_inspection_details_line'
    _description = 'Purchase GRN Line'
    
    inspection_line_id = fields.Many2one('prakruti.grn_inspection_details', ondelete='cascade')
    product_id = fields.Many2one('product.product',string='Product Name',required=True, readonly=1)   
    description = fields.Text(string='Description', readonly=1)
    scheduled_date =fields.Datetime(string='Due On')
    quantity = fields.Float(string='Received Quantity',store=True ,digits=(6,3))
    actual_quantity = fields.Float(string='Quantity', readonly=1 ,digits=(6,3))
    unit_price = fields.Float(string='Unit price' ,digits=(6,3))
    mfg_date = fields.Date(string='Mfg. Date')
    exp_date = fields.Date(string="Expiry Date")
    uom_id = fields.Many2one('product.uom',string='UOM',readonly=1)
    prakruti_stock_id = fields.Integer('SCREEN COMMON ID')
    remarks = fields.Text('Remarks')
    packing_style = fields.Float(string= 'Packing Style')
    received_per_qty = fields.Float(string= 'Received Per Qty.')
    accepted_qty = fields.Float('Accepted Qty.' ,digits=(6,3))
    rejected_qty = fields.Float('Rejected Qty.', readonly=True ,digits=(6,3))
    batch_no = fields.Char('Batch No.')
    extra_packing= fields.Float(string= "(+)Extra Packing",default=0)
    status = fields.Selection([
        ('accept','Accept'),
        ('reject','Reject'),
        ('accept_under_deviation','Accepted Under Deviation'),
        ('par_accept','Partially Accepted')],default='accept',string= 'Status',readonly= True)
    available_qty = fields.Float(string='Available Quantity',digits=(6,3),readonly=1)
    #Added as per requirement for reserving the product based on the Planning Request
    slip_id = fields.Many2one('prakruti.production_slip',string = 'Slip ID',readonly=1)    
    
    #Added as per new update so that to close or update the order based on the received qty in Purchase Order by passing this line ID
    #By Karan on 20171018
    purchase_line_common_id = fields.Integer(string="Purchase Line ID")
    balance_qty = fields.Float(string="Balance Qty",compute='_compute_balance_qty',store=True,digits=(6,3))
    hsn_code = fields.Char(string='HSN/SAC',readonly=1)
    discount_id = fields.Many2one('account.other.tax',string= 'Discount(%)',domain=[('select_type', '=', 'discount')])
    discount_rate = fields.Float(string= 'Discount(%)',default=0)
    cgst_id = fields.Many2one('account.other.tax',string= 'CGST Rate',domain=[('select_type', '=', 'cgst')])
    cgst_rate = fields.Float(related='cgst_id.per_amount',string= 'CGST Rate',default=0,store=1)
    sgst_id = fields.Many2one('account.other.tax',string= 'SGST Rate',domain=[('select_type', '=', 'sgst')])
    sgst_rate = fields.Float(related='sgst_id.per_amount',string= 'SGST Rate',default=0,store=1)
    igst_id = fields.Many2one('account.other.tax',string= 'IGST Rate',domain=[('select_type', '=', 'igst')])
    igst_rate = fields.Float(related='igst_id.per_amount',string= 'IGST Rate',default=0,store=1)
    taxable_value = fields.Float(string= 'Taxable Value',digits=(6,3)) 
    taxable_value_after_adding_other = fields.Float(string='Taxable Value After Adding Other Charges',digits=(6,3))
    
    '''
    Balance Qty Calculation
    '''
    @api.depends('actual_quantity','quantity','packing_style','received_per_qty','extra_packing')
    def _compute_balance_qty(self):
        for order in self:
            balance_qty = 0.0            
            order.update({                
                'balance_qty': order.actual_quantity - order.quantity 
            })
    
    
    _sql_constraints = [
        ('unique_batch_no','unique(batch_no)','Batch No. must be Unique !')
        ]
    
    @api.onchange('packing_style','received_per_qty','extra_packing')
    def _compute_total_quantity(self):
        for order in self:
            quantity = 0.0
            order.update({
                    'quantity': ((order.packing_style * order.received_per_qty) + order.extra_packing),
                    'accepted_qty': ((order.packing_style * order.received_per_qty) + order.extra_packing),
                    'available_qty': ((order.packing_style * order.received_per_qty) + order.extra_packing)
                    })