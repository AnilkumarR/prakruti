'''
Company : EBSL
Author : Karan
Module : Purchase Quotation
Class 1 : PrakrutiPurchaseOrderQuotation
Class 2 : PrakrutiPurchaseQuatationLine
Table 1 & Reference Id : prakruti_purchase_order_quotation,order_line
Table 2 & Reference Id : prakruti_purchase_quotation_line,purchase_line_id
Updated By : Karan 
Updated Date & Version : 2017/08/22 & 0.1
'''
from openerp import models, fields, api,_
import time
import openerp
from datetime import date
from datetime import datetime
from openerp.tools.translate import _
from openerp.tools import image_resize_image_big
from openerp.exceptions import except_orm, Warning as UserError
import re
import logging
from openerp.exceptions import ValidationError
from openerp.tools import amount_to_text
from openerp.tools.amount_to_text import amount_to_text_in 
from openerp.tools.amount_to_text import amount_to_text_in_without_word_rupees
from email.MIMEText import MIMEText
from email.MIMEImage import MIMEImage
from email.MIMEMultipart import MIMEMultipart
import email, re
from openerp.tools import DEFAULT_SERVER_DATE_FORMAT, image_colorize, image_resize_image_big
from openerp import tools
from datetime import timedelta
from openerp.osv import osv,fields
from openerp import models, fields, api, _
import sys, os, urllib2, urlparse
from datetime import date, timedelta
from lxml import etree
import cgi
import lxml.html
import lxml.html.clean as clean
import openerp.pooler as pooler
import random
import socket
import threading


class PrakrutiPurchaseOrderQuotation(models.Model):
    _name =  'prakruti.purchase_order_quotation'
    _table = 'prakruti_purchase_order_quotation'
    _description = 'Purchase Quotation'
    _rec_name = 'qo_no'
    _order="id desc" 
    
    '''
    Its an unique autogenerated Quotation Number which will be in the format of
    Format : PQO\PRODUCT_TYPE\NUMBER\FINANCIAL YEAR
    Example : PQO\EXFG\0001\17-18
    Updated By : Karan
    Updated On : 2017/08/22
    Version :0.1
    
    '''    
    @api.one
    @api.multi
    def _get_auto(self):
        style_format = {}
        month_value=0
        year_value=0
        next_year=0
        dispay_year=''
        display_present_year=''
        cr = self.env.cr
        uid = self.env.uid
        ids = self.ids
        for temp in self :
            cr.execute('''SELECT 
                                CAST(EXTRACT(month FROM order_date) AS INTEGER) AS month,
                                CAST(EXTRACT(year FROM order_date) AS INTEGER) AS year,
                                id 
                          FROM 
                                prakruti_purchase_order_quotation 
                          WHERE 
                                id=%s''',((temp.id),))
            for item in cr.dictfetchall():
                month_value=int(item['month'])
                year_value=int(item['year'])
            if month_value<=3:
                year_value=year_value-1
            else:
                year_value=year_value
            next_year=year_value+1
            dispay_year=str(next_year)[-2:]
            display_present_year=str(year_value)[-2:]
            cr.execute('''SELECT autogenerate_purchase_quotation(%s)''', ((temp.id),)  ) 
            result = cr.dictfetchall()
            parent_invoice_id = 0
            for value in result: parent_invoice_id = value['autogenerate_purchase_quotation'];
            auto_gen = int(parent_invoice_id)
            if len(str(auto_gen)) < 2:
                auto_gen = '000'+ str(auto_gen)
            elif len(str(auto_gen)) < 3:
                auto_gen = '00' + str(auto_gen)
            elif len(str(auto_gen)) == 3:
                auto_gen = '0'+str(auto_gen)
            else:
                auto_gen = str(auto_gen)
            for record in self :
                if temp.purchase_type.group_code:
                    style_format[record.id] ='PQO\\'+ temp.purchase_type.group_code+'\\'+str(auto_gen)+'\\'+str(display_present_year)+'-'+str(dispay_year)
                else:                        
                    style_format[record.id] ='PQO\\'+str(auto_gen)+'\\'+str(display_present_year)+'-'+str(dispay_year)
                cr.execute('''UPDATE 
                                    prakruti_purchase_order_quotation 
                              SET 
                                    qo_no = %s 
                              WHERE 
                                    id=%s ''', ((style_format[record.id]),(temp.id),)  )
        return style_format
                
    order_line = fields.One2many('prakruti.purchase_quotation_line','purchase_line_id',string='Purchase Order Line')
    auto_no = fields.Integer('Auto')
    req_no_control_id = fields.Integer('Auto Generating id',default= 0)
    quotation_no= fields.Char(string='Quotation No',compute= '_get_auto', readonly=True)
    qo_no = fields.Char(string='Quotation No', readonly=True)
    pr_no = fields.Char(string='Requisition No', readonly=True)
    inq_no = fields.Char(string='Inquiry No', readonly=True)
    vendor_id = fields.Many2one('res.partner',string='Vendor/Supplier')
    vendor_reference = fields.Char(string='Vendor/Supplier Reference')
    other_reference = fields.Char(string='Other Reference')
    order_date = fields.Date(string='Quotation Date', required=True,default= fields.Date.today)
    destination = fields.Char(string='Destination')
    company_address = fields.Many2one('res.company',string='Company Address')
    delivery_address = fields.Many2one('res.company',string='Dispatch To',readonly=True)
    payment = fields.Char(string='Mode/Terms of Payments')
    terms_of_delivery = fields.Text(string='Terms of Delivery')
    request_date = fields.Date(string = "Requisition Date", default= fields.Date.today)
    dispatch_through = fields.Char(string='Dispatch Through')
    prepared_by = fields.Many2one('res.users','Prepared By',readonly=True)    
    purchase_manager = fields.Many2one('res.users',string="Purchase Manager",required=True)
    maintanence_manager = fields.Many2one('res.users',string="Maintanence Manager",required=True)
    stores_incharge = fields.Many2one('res.users',string="Stores Incharge")
    remarks=fields.Text('Remarks')
    purchase_type = fields.Many2one('product.group',string= 'Purchase Type')
    pr_common_id = fields.Integer('PR SCREEN COMMON ID')
    pr_request_common_id = fields.Integer('Price Request SCREEN COMMON ID')
    product_id = fields.Many2one('product.product', related='order_line.product_id', string='Product Name')
    no_of_product = fields.Integer(string= "No of Products",compute='_total_no_of_product',default=0)
    amount_taxed= fields.Float(string='Taxed Amount',compute= '_compute_taxed_amount' ,digits=(6,3),default=0)    
    total_cgst= fields.Float(string='Total CGST',compute= '_compute_total_cgst' ,digits=(6,3),default=0)
    total_sgst= fields.Float(string='Total SGST',compute= '_compute_total_sgst' ,digits=(6,3),default=0)
    total_igst= fields.Float(string='Total IGST',compute= '_compute_total_igst' ,digits=(6,3),default=0)
    total_gst= fields.Float(string='Total GST',compute= '_compute_total_gst' ,digits=(6,3),default=0)
    insurance_charges = fields.Float(string="Insurance Charges" ,digits=(6,3),default=0)
    frieght_charges_applied = fields.Selection([('yes','Yes'),('no','No')], string="Freight Charge Applied", default='no')
    frieght_charges = fields.Float(string="Frieght Charges" ,digits=(6,3),default=0)
    additional_charges = fields.Float(string='Additional Charges' ,digits=(6,3),default=0)
    packing_charges = fields.Float(string='Packing & Forwarding' ,digits=(6,3),default=0)
    grand_total= fields.Float(string='Grand Total',compute= '_compute_grand_total' ,digits=(6,3),default=0)
    grand_total_in_words= fields.Text(compute= '_get_total_in_words',string='Grand Total in Words')
    total_amount = fields.Float(string='Total Amount',compute= '_compute_total_amount',digits=(6,3),default=0)
    gst_total_in_words= fields.Text(compute= '_gst_total_in_words',string='GST Total in Words')
    all_additional_charges = fields.Float(string="All Additional Charges",compute= '_compute_all_additional_charges',default=0)#SUM OF all charges like freight_charges
    proportionate_amount_to_products = fields.Float(string="Proportionate Amount to Products",compute= '_compute_proportionate_amount_to_products',default=0)
    total_taxable_value = fields.Float(string="Total Taxable",compute= '_compute_total_taxable',default=0)
    revise_status = fields.Selection([('revise_quotation','Revise Quotation'),('revise_done','Revise Done')],string= 'Revise Status')
    revise_no = fields.Integer(string= '# Of Revision',default=0,readonly=1)
    is_revise = fields.Boolean(string= 'Is Revised',default=0,readonly=1)
    revise_remarks = fields.Text(string= 'Revise Remarks')
    revise_remarks_update = fields.Text(string= 'All Revise Updates',readonly=1,default='-')
    revise_id = fields.Many2one('res.users',string = 'Revised Done By')
    send_to = fields.Char(string = 'Send To',readonly=1)
    coming_from = fields.Char(string = 'Coming From',readonly=1)
    vendor_grid_id = fields.Integer(string= 'Price Request Vendor Grid ID',readonly=1)
    revise_flag = fields.Integer(string= 'Revise Flag',default=0,readonly=1)
    state = fields.Selection([
                ('quotation','Purchase Quotation Draft'),
                ('analysis','Purchase Quotation Analysis'),
                ('order','Purchase Order'),
                ('confirm','Purchase Order Confirmed'),
                ('reject','Purchase Order Rejected'),
                ('short_close','Purchase Order Short Closed')],default= 'quotation', string= 'Status')
    quotation_status = fields.Selection([
                ('hold', 'Purchase Order Hold'),
                ('accepted','Accepted')], default= 'hold', string= 'Quotation Status')  
    
    #added by induja on 20170928 for categorising the products
    categorization = fields.Selection([
		('goods','Goods'),
		('services','Services'),
		('goods_services','Goods and Services')],default= 'goods')      
    #added by induja on 20171011 for Other details
    
    document_no = fields.Char(string ="Document No" , default='PPPL-PUR-F-004' , readonly=1)
    revision_no = fields.Char(string = "Rev. No", default='01' , readonly=1)
    default_pr_date = fields.Char(string="Document Date" , default= fields.Date.today , readonly=1)
    plant_manager = fields.Many2one('res.users',string="Plant Manager",readonly=True) 
    to_name = fields.Many2one('res.users',string="Name") 
    
    '''
    Cannot able to delete this record 
    '''
    @api.multi
    def unlink(self):
        raise UserError(_('Can\'t Delete'))
        return super(PrakrutiPurchaseOrderQuotation, self).unlink()
    '''
    means that automatically shows this fields while creating this record.
    '''
    @api.model
    def _default_company(self):
        return self.env['res.company']._company_default_get('res.partner')
    
    _defaults = {
        'qo_no':'New',
        'pr_no':'Direct Quotation',
        'inq_no':'Direct Quotation',
        'prepared_by': lambda s, cr, uid, c:uid,
        'company_address': _default_company,
        'delivery_address': _default_company,
        'revise_id': lambda s, cr, uid, c:uid   
        }
    
    @api.onchange('frieght_charges_applied','frieght_charges')
    def onchange_freight_charges(self):
        if self.frieght_charges_applied == 'no':
            self.frieght_charges = 0.0
    '''
    Packing Charges -Ve value validation
    '''
    @api.constrains('packing_charges')
    def _check_packing_charges(self):
        for record in self:
            if record.packing_charges <0:
                raise ValidationError("Packing & Forwarding can not be negative: %s" % record.packing_charges)
    
    '''
    Additional Charges -Ve value validation
    '''
    @api.constrains('additional_charges')
    def _check_additional_charges(self):
        for record in self:
            if record.additional_charges <0:
                raise ValidationError("Additional Charges can not be negative: %s " % record.additional_charges)
    
    
    '''
    Freight Charges -Ve value validation
    '''
    @api.constrains('frieght_charges')
    def _check_frieght_charges(self):
        for record in self:
            if record.frieght_charges <0:
                raise ValidationError("Freight Charges can not be negative: %s " % record.frieght_charges)
    '''
    Total Taxable Value Calculation
    '''        
    @api.depends('order_line.quantity','order_line.unit_price','order_line.taxable_value','order_line.discount_rate')
    def _compute_total_taxable(self):
        for order in self:
            t_taxable_value = 0
            for line in order.order_line:
                t_taxable_value += line.taxable_value
                order.update({
                    'total_taxable_value': t_taxable_value
                    })
    '''
    No of products calculation
    '''
    @api.depends('order_line.quantity','order_line.unit_price')
    def _total_no_of_product(self):
        for order in self:
            total_no_of_product = 0
            for line in order.order_line:
                total_no_of_product += line.quantity
                order.update({
                    'no_of_product': total_no_of_product
                    })
    '''
   All Additional Charges Calculation
    '''
    @api.depends('frieght_charges', 'packing_charges','insurance_charges', 'additional_charges')
    def _compute_all_additional_charges(self):
        for order in self:
            all_additional_charges = 0.0            
            order.update({                
                'all_additional_charges': order.frieght_charges + order.packing_charges + order.insurance_charges + order.additional_charges
            })
    
    
    '''
   Proportionate Amount to Products Calculation
    '''
    @api.depends('frieght_charges', 'packing_charges','insurance_charges', 'additional_charges','total_taxable_value')
    def _compute_proportionate_amount_to_products(self):
        for order in self:
            proportionate_amount_to_products = 0.0
            if order.total_taxable_value == 0:
                order.update({  
                    'proportionate_amount_to_products': 0
                    })
            else:
                order.update({
                    'proportionate_amount_to_products': order.all_additional_charges/order.total_taxable_value
                    })
    '''
    Total GST In words
    '''            
    @api.depends('order_line.subtotal','order_line.quantity', 'order_line.unit_price','packing_charges','frieght_charges','additional_charges','insurance_charges','order_line.discount_rate','order_line.cgst_rate','order_line.cgst_id','order_line.sgst_rate','order_line.sgst_id','order_line.igst_rate','order_line.igst_id','order_line.discount_id','total_gst')
    def _gst_total_in_words(self):
        for order in self:
            grand_total = val1=0.0
            val1_in_words = ""
            val1 = order.total_gst
            val1_in_words = str(amount_to_text_in_without_word_rupees(round(val1),"Rupee"))
            order.update({                    
                'gst_total_in_words': val1_in_words.upper()
                })
    '''
    Grand Total in words
    '''
    @api.depends('grand_total')
    def _get_total_in_words(self):
        for order in self:
            grand_total = val1 = 0.0
            val1_in_words = ""
            val1 = order.grand_total
            val1_in_words = str(amount_to_text_in_without_word_rupees(round(val1),"Rupee"))
            order.update({                    
                'grand_total_in_words': val1_in_words.upper()
                })
    '''
   Grand Total Calculation
    '''            
    @api.depends('order_line.subtotal','order_line.quantity', 'order_line.unit_price','packing_charges','frieght_charges','additional_charges','insurance_charges','order_line.discount_rate','order_line.cgst_rate','order_line.cgst_id','order_line.sgst_rate','order_line.sgst_id','order_line.igst_rate','order_line.igst_id','order_line.discount_id')
    def _compute_grand_total(self):
        for order in self:
            grand_total = 0.0
            for line in order.order_line:
                grand_total += line.subtotal
                order.update({
                    'grand_total': grand_total
                    })
    '''
    Total Amount Calculation
    '''             
    @api.depends('order_line.total')
    def _compute_total_amount(self):
        for order in self:
            amount_total = 0.0
            for line in order.order_line:
                amount_total += line.total
                order.update({
                    'total_amount': amount_total
                    })
    '''
   Amount Taxed Calculation
    '''             
    @api.depends('order_line.taxable_value_after_adding_other')
    def _compute_taxed_amount(self):
        for order in self:
            amount_taxed = 0.0
            for line in order.order_line:
                amount_taxed += line.taxable_value_after_adding_other
                order.update({
                    'amount_taxed': amount_taxed
                    })
    '''
   Total CGST Calculation
    ''' 
    @api.depends('order_line.cgst_value')
    def _compute_total_cgst(self):
        for order in self:
            cgst_value = 0.0
            for line in order.order_line:
                cgst_value += line.cgst_value
                order.update({
                    'total_cgst': cgst_value
                    })
    '''
   Total SGST Calculation
    '''             
    @api.depends('order_line.sgst_value')
    def _compute_total_sgst(self):
        for order in self:
            sgst_value = 0.0
            for line in order.order_line:
                sgst_value += line.sgst_value
                order.update({
                    'total_sgst': sgst_value
                    })
                
    '''
   Total IGST Calculation
    '''             
    @api.depends('order_line.igst_value')
    def _compute_total_igst(self):
        for order in self:
            igst_value = 0.0
            for line in order.order_line:
                igst_value += line.igst_value
                order.update({
                    'total_igst': igst_value
                    })
    '''
   Total GST Calculation
    ''' 
    @api.depends('order_line.cgst_value','order_line.sgst_value','order_line.igst_value')
    def _compute_total_gst(self):
        for order in self:
            total_gst = 0.0
            cgst_value = 0.0
            sgst_value = 0.0
            igst_value = 0.0
            for line in order.order_line:
                cgst_value += line.cgst_value
                sgst_value += line.sgst_value
                igst_value += line.igst_value
                total_gst = cgst_value + sgst_value + igst_value
                order.update({
                    'total_gst': total_gst
                    })
                
    '''
    Pulls the data to Quotation Analysis
    ''' 
    @api.one
    @api.multi 
    def confirm_to_analysis(self):
        cr = self.env.cr
        uid = self.env.uid
        ids = self.ids
        context = 'context'
        template_ids=[]
        for temp in self:
            cr = self.env.cr
            uid = self.env.uid
            ids = self.ids
            context = {}  
            template_ids.append(temp.id)
            if (temp.quotation_status == 'hold'):
                ebsl_id = self.pool.get('prakruti.purchase_order_quotation_analysis').create(cr,uid, {
                    'qa_no':'From Quotation',
                    'pr_no':temp.pr_no,
                    'purchase_type':temp.purchase_type.id,
                    'qo_no':temp.qo_no,
                    'inq_no':temp.inq_no,
                    'vendor_reference':temp.vendor_reference,
                    'payment':temp.payment,
                    'destination':temp.destination,
                    'other_reference':temp.other_reference,
                    'maintanence_manager':temp.maintanence_manager.id,
                    'purchase_manager':temp.purchase_manager.id,
                    'stores_incharge':temp.stores_incharge.id,
                    'terms_of_delivery':temp.terms_of_delivery,
                    'vendor_id': temp.vendor_id.id,
                    'dispatch_through':temp.dispatch_through,
                    'quotation_status':'accepted',
                    'remarks':temp.remarks,
                    'requisition_date': temp.request_date,
                    'no_of_product':temp.no_of_product,
                    'amount_taxed':temp.amount_taxed,
                    'total_cgst':temp.total_cgst,
                    'total_sgst':temp.total_sgst,
                    'total_igst':temp.total_igst,
                    'total_gst':temp.total_gst,
                    'insurance_charges':temp.insurance_charges,
                    'frieght_charges_applied':temp.frieght_charges_applied,
                    'frieght_charges':temp.frieght_charges,
                    'packing_charges':temp.packing_charges,
                    'additional_charges':temp.additional_charges,
                    'grand_total':temp.grand_total,  
                    'grand_total_in_words':temp.grand_total_in_words,
                    'total_amount':temp.total_amount,
                    'gst_total_in_words':temp.gst_total_in_words,
                    'all_additional_charges':temp.all_additional_charges,
                    'proportionate_amount_to_products':temp.proportionate_amount_to_products,
                    'total_taxable_value':temp.total_taxable_value,
                    'vendor_grid_id':temp.vendor_grid_id,
                    'categorization':temp.categorization,
                    'to_name':temp.to_name.id,
                    'plant_manager':temp.plant_manager.id,
                    'document_no':temp.document_no,
                    'revision_no':temp.revision_no,
                    'company_address':temp.company_address.id,
                    'default_pr_date':temp.default_pr_date,
                    'coming_from':'Purchase Quotation'
                    })
                for item in temp.order_line:
                    erp_id = self.pool.get('prakruti.purchase_quotation_analysis_line').create(cr,uid, {
                    'product_id': item.product_id.id,
                    'description': item.description,
                    'quantity': item.quantity,
                    'balance_qty':item.quantity,
                    'uom_id': item.uom_id.id,
                    'scheduled_date': item.scheduled_date, 
                    'required_date': item.required_date,                     
                    'unit_price': item.unit_price,
                    'hsn_code': item.hsn_code,
                    'discount_id':item.discount_id.id,
                    'discount_rate':item.discount_rate,
                    'discount_value':item.discount_value,
                    'taxable_value': item.taxable_value,
                    'total':item.total,
                    'cgst_id':item.cgst_id.id,
                    'cgst_rate':item.cgst_rate,
                    'cgst_value': item.cgst_value,
                    'sgst_id':item.sgst_id.id,
                    'sgst_rate':item.sgst_rate,
                    'sgst_value': item.sgst_value,
                    'igst_id':item.igst_id.id,
                    'igst_rate':item.igst_rate,
                    'igst_value': item.igst_value,
                    'taxable_value_after_adding_other':item.taxable_value_after_adding_other,
                    'subtotal': item.subtotal,
                    'proportionate_amount_to_products':item.proportionate_amount_to_products,
                    'requisition_line_id':item.requisition_line_id,
                    'slip_id':item.slip_id.id,
                    'purchase_line_id': ebsl_id
                    })            
                cr.execute("UPDATE  prakruti_purchase_order_quotation SET state = 'analysis' WHERE prakruti_purchase_order_quotation.id = cast(%s as integer)", ((temp.id),))
                cr.execute("UPDATE  prakruti_purchase_order_quotation SET quotation_status = 'accepted' WHERE prakruti_purchase_order_quotation.id = cast(%s as integer)", ((temp.id),))
                cr.execute("UPDATE  prakruti_purchase_requisition SET state = 'analysis' WHERE prakruti_purchase_requisition.requisition_no = %s ", ((temp.pr_no),))
                cr.execute("UPDATE  prakruti_price_request SET state = 'analysis' WHERE prakruti_price_request.request_no = %s AND prakruti_price_request.inquiry_no = %s", ((temp.pr_no),(temp.inq_no),))
                cr.execute("UPDATE  prakruti_purchase_requistion_analysis SET state = 'analysis' WHERE prakruti_purchase_requistion_analysis.request_no = %s ", ((temp.pr_no),))
                cr.execute("UPDATE  prakruti_purchase_requisition_approve SET state = 'analysis' WHERE prakruti_purchase_requisition_approve.requisition_no = %s",((temp.pr_no),))
        return {}
    '''
    This Button helps for Revision(If any changes need to be done in table 2 click this button and enter)
    '''
    @api.one
    @api.multi
    def revise_quotation(self):
        cr = self.env.cr
        uid = self.env.uid
        ids = self.ids
        context = 'context'
        for temp in self:
            ebsl_id = self.pool.get('prakruti.purchase_order_quotation').create(cr,uid, {
                'qo_no':temp.qo_no,
                'pr_no':temp.pr_no,
                'inq_no':temp.inq_no,
                'vendor_id':temp.vendor_id.id,
                'vendor_reference':temp.vendor_reference,
                'other_reference':temp.other_reference,
                'order_date':temp.order_date,
                'destination':temp.destination,
                'company_address':temp.company_address.id,
                'delivery_address':temp.delivery_address.id,
                'payment':temp.payment,
                'terms_of_delivery':temp.terms_of_delivery,
                'request_date':temp.request_date,
                'dispatch_through':temp.dispatch_through,
                'prepared_by':temp.prepared_by.id,
                'purchase_manager':temp.purchase_manager.id,
                'maintanence_manager':temp.maintanence_manager.id,
                'stores_incharge':temp.stores_incharge.id,
                'remarks':temp.remarks,
                'purchase_type':temp.purchase_type.id,
                'state':temp.state,
                'quotation_status':temp.quotation_status,
                'pr_common_id':temp.pr_common_id,
                'pr_request_common_id':temp.pr_request_common_id,
                'insurance_charges':temp.insurance_charges,
                'frieght_charges':temp.frieght_charges,
                'additional_charges':temp.additional_charges,
                'packing_charges':temp.packing_charges,
                'revise_status':temp.revise_status,
                'revise_no':temp.revise_no,
                'is_revise':temp.is_revise,
                'revise_remarks':temp.revise_remarks,
                'revise_remarks_update':temp.revise_remarks_update,
                'revise_id':temp.revise_id.id,  
                'send_to': temp.send_to,        
                'coming_from':temp.coming_from,
                'vendor_grid_id':temp.vendor_grid_id,
                'categorization':temp.categorization,
                'to_name':temp.to_name.id,
                'plant_manager':temp.plant_manager.id,
                'document_no':temp.document_no,
                'revision_no':temp.revision_no,
                'default_pr_date':temp.default_pr_date,
                'revise_flag': 1
                })
            for item in temp.order_line:
                erp_id = self.pool.get('prakruti.purchase_quotation_line').create(cr,uid, {
                    'product_id': item.product_id.id,
                    'description': item.description,
                    'scheduled_date':item.scheduled_date,
                    'required_date': item.required_date,
                    'quantity': item.quantity,
                    'unit_price':item.unit_price,
                    'uom_id': item.uom_id.id,
                    'hsn_code': item.hsn_code,
                    'discount_id':item.discount_id.id,
                    'discount_rate':item.discount_rate,
                    'cgst_id':item.cgst_id.id,
                    'cgst_rate':item.cgst_rate,
                    'sgst_id':item.sgst_id.id,
                    'sgst_rate':item.sgst_rate,
                    'igst_id':item.igst_id.id,
                    'igst_rate':item.igst_rate,
                    'packing_charges':item.packing_charges,
                    'frieght_charges':item.frieght_charges,
                    'additional_charges':item.additional_charges,
                    'insurance_charges':item.insurance_charges,
                    'proportionate_amount_to_products':item.proportionate_amount_to_products,
                    'requisition_line_id': item.requisition_line_id,
                    'slip_id':item.slip_id.id,
                    'revise_quotation_line':item.revise_quotation_line,
                    'purchase_line_id': ebsl_id
                    })
            cr.execute("UPDATE prakruti_purchase_order_quotation SET revise_status = 'revise_quotation',is_revise = 'True' WHERE id = %s",((temp.id),))
            cr.execute("UPDATE prakruti_purchase_quotation_line SET revise_quotation_line = 1 WHERE purchase_line_id = %s",((temp.id),))
        return {} 
    '''
    After doing changes in table 2 click this to visible Revise button and to update the changes in the screen
    '''
    @api.one
    @api.multi
    def revise_done(self):
        cr = self.env.cr
        uid = self.env.uid
        ids = self.ids
        context = 'context' 
        revise_done_by = False
        error_message = ''
        for temp in self:
            if temp.revise_remarks:
                if temp.revise_id:
                    cr.execute("UPDATE prakruti_purchase_quotation_line SET revise_quotation_line = 2 WHERE purchase_line_id = %s",((temp.id),))
                    cr.execute('''SELECT revise_purchase_quotation AS error_message FROM revise_purchase_quotation(%s,%s)''',((temp.id),(temp.pr_no),))
                    for line in cr.dictfetchall():
                        error_message = line['error_message']
                    if error_message == 'Record Cannot Be Revised':
                        raise UserError(_('Record...Can\'t Be Revised...\nPlease Contact Your Administrator...!!!'))
                else:
                    raise UserError(_('Please enter Revised Person...'))
            else:
                raise UserError(_('Please enter Revise Remarks...'))
        return {} 

class PrakrutiPurchaseQuatationLine(models.Model):
    _name = 'prakruti.purchase_quotation_line'
    _table = 'prakruti_purchase_quotation_line'
    _description = 'Purchase Quotation Line'  
    
    purchase_line_id = fields.Many2one('prakruti.purchase_order_quotation', ondelete='cascade')
    product_id = fields.Many2one('product.product',string='Product Name', required= True)
    description = fields.Text(string='Description')
    scheduled_date =fields.Date(string='Scheduled Date', required= True, default= fields.Date.today)
    required_date = fields.Date(string="Req. Date")
    quantity = fields.Float(string='Qty', required= True ,digits=(6,3))
    unit_price = fields.Float(string='Unit price' ,digits=(6,3)) 
    uom_id = fields.Many2one('product.uom',string='UOM', required= True)
    hsn_code = fields.Char(string='HSN/SAC',readonly=1)
    discount_id = fields.Many2one('account.other.tax',string= 'Discount(%)',domain=[('select_type', '=', 'discount')])
    discount_rate = fields.Float(string= 'Discount(%)',default=0)
    discount_value = fields.Float(string= 'Discount Amount',compute= '_compute_line_discount' ,digits=(6,3),default=0) 
    taxable_value = fields.Float(string= 'Taxable Value',digits=(6,3),compute='_compute_taxable_value',default=0)
    total= fields.Float(string='Total',compute= '_compute_price_total',digits=(6,3),default=0)
    cgst_id = fields.Many2one('account.other.tax',string= 'CGST Rate',domain=[('select_type', '=', 'cgst')])
    cgst_rate = fields.Float(related='cgst_id.per_amount',string= 'CGST Rate',default=0,store=1)
    cgst_value = fields.Float(string= 'CGST Amount',compute= '_compute_cgst_value' ,digits=(6,3),default=0)
    sgst_id = fields.Many2one('account.other.tax',string= 'SGST Rate',domain=[('select_type', '=', 'sgst')])
    sgst_rate = fields.Float(related='sgst_id.per_amount',string= 'SGST Rate',default=0,store=1)
    sgst_value = fields.Float(string= 'SGST Amount',compute= '_compute_sgst_value' ,digits=(6,3),default=0)
    igst_id = fields.Many2one('account.other.tax',string= 'IGST Rate',domain=[('select_type', '=', 'igst')])
    igst_rate = fields.Float(related='igst_id.per_amount',string= 'IGST Rate',default=0,store=1)
    igst_value = fields.Float(string= 'IGST Amount',compute= '_compute_igst_value' ,digits=(6,3),default=0) 
    taxable_value_after_adding_other= fields.Float(string='Taxable Value After Adding Other Charges',compute= '_compute_taxable_value_after_adding_others' ,digits=(6,3),default=0)
    packing_charges = fields.Float(related='purchase_line_id.packing_charges',string='Packing Charges',store=1)
    frieght_charges = fields.Float(related='purchase_line_id.frieght_charges',string='Frieght Charges',store=1)
    additional_charges = fields.Float(related='purchase_line_id.additional_charges',string='Additional Charges',store=1)
    subtotal = fields.Float(string= 'Sub Total',compute= '_compute_subtotal' ,digits=(6,3),default=0)
    insurance_charges = fields.Float(related='purchase_line_id.insurance_charges',string='Insurance Charges',store=1)
    proportionate_amount_to_products = fields.Float(related='purchase_line_id.proportionate_amount_to_products', string="Proportionate Amount to Products",default=0)
    requisition_line_id = fields.Integer(string= 'Requisition Line ID',readonly=1)
    #Added as per requirement for reserving the product based on the Planning Request
    slip_id = fields.Many2one('prakruti.production_slip',string = 'Slip ID',readonly=1)
    revise_quotation_line=fields.Integer(string= 'Revised Flag',default=0)
    
    def onchange_product_id(self, cr, uid, ids, product_id, context=None):
        available_stock = 0.0
        uom_id = 0
        description = ''
        uom_name = ''
        hsn_code = ''
        cr.execute('''SELECT 
                            product_uom.id AS uom_id, 
                            product_uom.name AS uom_name, 
                            product_template.name AS description,
                            product_template.hsn_code AS hsn_code 
                      FROM 
                            product_uom JOIN 
                            product_template ON 
                            product_uom.id=product_template.uom_id JOIN 
                            product_product ON 
                            product_template.id=product_product.product_tmpl_id 
                      WHERE 
                            product_product.id = cast(%s as integer)''', ((product_id),))
        for line in cr.dictfetchall():
            uom_id = line['uom_id']
            description = line['description']
            hsn_code = line['hsn_code']
        return {'value' :{
                    'uom_id':uom_id,
                    'description':description,
                    'hsn_code':hsn_code
    
                }}
    '''
    Check Whether the Unit price is entered and must not be equal to zero or less than Zero
    '''
    def _check_unit_price(self, cr, uid, ids):
         lines = self.browse(cr, uid, ids)
         for line in lines:
             if line.unit_price <= 0:
                 return False
         return True
    '''
    Check Whether the Qty is entered and must not be equal to zero or less than Zero    
    '''
    def _check_qty(self, cr, uid, ids):
         lines = self.browse(cr, uid, ids)
         for line in lines:
             if line.quantity <= 0:
                 return False
         return True
    '''
    Check Whether the discount is greater than 100 and should not be less than 0
    '''     
    def _check_discount(self, cr, uid, ids, context=None):
        obj = self.browse(cr, uid, ids[0], context=context)
        if (obj.discount_rate < 0.0 or obj.discount_rate > 100):
            return False
        return True
     
    _constraints = [
         (_check_qty, 'Order quantity cannot be negative or zero !', ['quantity']),
         (_check_unit_price, 'Unit Price cannot be negative or zero !', ['unit_price']),
         (_check_discount, 'Discount cannot be negative or zero or greater than 100!', ['discount_rate'])
    ]   
    
    # Total Amount
    @api.depends('quantity', 'unit_price')
    def _compute_price_total(self):
        for order in self:
            total = 0.0            
            order.update({                
                'total': order.quantity * order.unit_price 
            })
    
    # Taxable Value
    @api.depends('quantity','unit_price','discount_rate','total')
    def _compute_taxable_value(self):
        for order in self:
            taxable_value = 0.0            
            order.update({                
                'taxable_value': (order.total - (order.total*(order.discount_rate/100))) 
            })
     
    # Taxable Value After Adding Others
    @api.depends('quantity', 'unit_price','discount_rate','proportionate_amount_to_products')
    def _compute_taxable_value_after_adding_others(self):
        for order in self:
            order.update({                
                'taxable_value_after_adding_other': order.taxable_value + (order.taxable_value * order.proportionate_amount_to_products)
            })
            
    # CGST value calculation
    @api.depends('quantity', 'unit_price','discount_rate','cgst_rate','cgst_id','taxable_value_after_adding_other')
    def _compute_cgst_value(self):
        for order in self:
            order.update({                
                'cgst_value': order.taxable_value_after_adding_other * (order.cgst_rate/100)
            })
            
    # SGST value calculation
    @api.depends('quantity', 'unit_price','discount_rate','sgst_rate','sgst_id','taxable_value_after_adding_other')
    def _compute_sgst_value(self):
        for order in self:
            order.update({                
                'sgst_value': order.taxable_value_after_adding_other * (order.sgst_rate/100)
            })
            
    # IGST value calculation
    @api.depends('quantity', 'unit_price','discount_rate','igst_rate','igst_id','taxable_value_after_adding_other')
    def _compute_igst_value(self):
        for order in self:
            order.update({                
                'igst_value': order.taxable_value_after_adding_other * (order.igst_rate/100)
            })
            
    # Subtotal calculation
    @api.depends('quantity', 'unit_price','discount_rate','cgst_rate','cgst_id','sgst_rate','sgst_id','igst_rate','igst_id','taxable_value_after_adding_other','proportionate_amount_to_products')
    def _compute_subtotal(self):
        for order in self:
            order.update({                
                'subtotal': order.taxable_value_after_adding_other + order.cgst_value + order.sgst_value + order.igst_value
            })
    
    # Discount calculation
    @api.depends('quantity','unit_price','discount_rate','total')
    def _compute_line_discount(self):
        for order in self:
            discount_value = 0.0
            order.update({
                    'discount_value': (order.total*(order.discount_rate/100))
                    })