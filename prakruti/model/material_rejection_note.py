'''
Company : EBSL
Author : Karan
Module : Material Rejection Note
Class 1 : PrakrutiReturnItems
Class 2 : PrakrutiReturnItemsLine
Table 1 & Reference Id : prakruti_return_items,return_line
Table 2 & Reference Id : prakruti_return_items_line,return_line_id
Updated By : Karan 
Updated Date & Version : 2017/08/23 & 0.1
'''
import time
import openerp
from datetime import date, datetime
from openerp import models, fields, api
from openerp.tools import DEFAULT_SERVER_DATE_FORMAT, image_colorize, image_resize_image_big
from openerp.exceptions import except_orm, Warning as UserError
from openerp import tools
from openerp.tools.translate import _
from datetime import timedelta

##################################################################################################

class PrakrutiReturnItems(models.Model):
    _name = 'prakruti.return_items'
    _table= 'prakruti_return_items'
    _description = 'Material Rejection Note'
    _rec_name = 'mrn_no' 
    _order = 'id desc'
    
    '''
    Its an unique autogenerated Number which will be in the format of
    Format : MRN\NUMBER\FINANCIAL YEAR
    Example : MRN\0001\17-18
    Updated By : Karan
    Updated On : 2017/08/23
    Version :0.1
    
    '''    
    @api.one
    @api.multi
    def _get_auto(self):
        style_format = {}
        month_value=0
        year_value=0
        next_year=0
        dispay_year=''
        display_present_year=''
        cr = self.env.cr
        uid = self.env.uid
        ids = self.ids
        for temp in self :
            cr.execute('''SELECT 
                                CAST(EXTRACT(month FROM mrn_date) AS INTEGER) AS month,
                                CAST(EXTRACT(year FROM mrn_date) AS INTEGER) AS year,
                                id 
                          FROM 
                                prakruti_return_items 
                          WHERE 
                                id=%s''',((temp.id),))
            for item in cr.dictfetchall():
                month_value=int(item['month'])
                year_value=int(item['year'])
            if month_value<=3:
                year_value=year_value-1
            else:
                year_value=year_value
            next_year=year_value+1
            dispay_year=str(next_year)[-2:]
            display_present_year=str(year_value)[-2:]
            cr.execute('''SELECT autogenerate_material_rejection_note(%s)''', ((temp.id),)  ) 
            result = cr.dictfetchall()
            parent_invoice_id = 0
            for value in result: parent_invoice_id = value['autogenerate_material_rejection_note'];
            auto_gen = int(parent_invoice_id)
            if len(str(auto_gen)) < 2:
                auto_gen = '000'+ str(auto_gen)
            elif len(str(auto_gen)) < 3:
                auto_gen = '00' + str(auto_gen)
            elif len(str(auto_gen)) == 3:
                auto_gen = '0'+str(auto_gen)
            else:
                auto_gen = str(auto_gen)
            for record in self :
                style_format[record.id] ='MRN\\'+str(auto_gen)+'\\'+str(display_present_year)+'-'+str(dispay_year)
                cr.execute('''UPDATE 
                                    prakruti_return_items 
                              SET 
                                    mrn_no = %s 
                              WHERE 
                                    id=%s ''', ((style_format[record.id]),(temp.id),)  )
        return style_format
        
    return_line = fields.One2many('prakruti.return_items_line','return_line_id',string='Return Line')
    purchase_return_id = fields.Many2one('prakruti.purchase_invoice',string = 'Invoice No.')
    flag_display_list = fields.Integer(string="Product List Displayed",default=0)
    flag_delete_list = fields.Integer(string="Product List Deleted",default=0)
    mrn_no=fields.Char('MRN No',default='New',readonly=1)
    pr_no = fields.Char(string="Requisition No")
    coming_from = fields.Selection([('grn','GRN'),('purchase_invoice','Purchase Invoice')],default='purchase_invoice',string="Coming From")
    pr_date= fields.Date(string="Requisition Date")    
    po_no = fields.Char(string='Order No')
    order_date= fields.Date(string="Order Date")
    vendor_id = fields.Many2one('res.partner',string="Vendor Name")
    return_date= fields.Date(string="Return Date",default=fields.Date.today)
    auto_no = fields.Integer('Auto')
    req_no_control_id = fields.Integer('Auto Generating id',default= 0)    
    material_reject_note_no= fields.Char(string='MRN No',compute='_get_auto')
    mrn_date=fields.Date('MRN Date',default= fields.Date.today)
    request_date = fields.Date(string = "Requisition Date")
    stores_incharge = fields.Many2one('res.users','Stores Incharge')
    dispatch_asst = fields.Many2one('res.users','Dispatch Assistant')
    doc_no=fields.Char('Doc. No')
    rev_no=fields.Char('Rev. No')
    doc_date=fields.Date('Document Date',default= fields.Date.today)
    company_address = fields.Many2one('res.company',string='Company Address')
    tin_vat = fields.Char(related='company_address.tin',string= 'Company TIN No')
    reason_for_rejection = fields.Text('Reason for Rejection')
    time_of_removal = fields.Float('Time of Removal',digits=(6,3))
    transporter_name=fields.Text('Name of Transporter')
    party_vat_no = fields.Char(related='vendor_id.vat_no', string="Party VAT No")
    party_cst_no = fields.Char(related='vendor_id.cst_no', string="Party CST No")
    gc_no =fields.Char('GC No')
    gc_date=fields.Date('GC Date')
    grn_no = fields.Char('GRN No')
    grn_date=fields.Date('GRN Date')
    purchase_manager = fields.Many2one('res.users',string="Purchase Manager"  )
    dispatch_through = fields.Char(string='Dispatch Through')
    total= fields.Float(string='Total',compute= '_compute_total',digits=(6,3)) 
    product_id = fields.Many2one('product.product', related='return_line.product_id', string='Product Name')
    #New Status as per the new requirement on 20171102
    status = fields.Selection([('draft','Material Rejection Note Draft'),  
                              ('purchase_return','Purchase Return'),
                              ('material_outward','Material Outward')
                              ],default= 'draft', string= 'Status')
    grn_id = fields.Many2one('prakruti.grn_inspection_details',string = 'GRN No')
    purchase_return_flag = fields.Integer(string = 'Purchase Return Flag',default = 0)
    material_outward_flag = fields.Integer(string = 'Material Outward Flag',default = 0)
    
    #added by induja on 20170928 for categorising the products
    categorization = fields.Selection([
		('goods','Goods'),
		('services','Services'),
		('goods_services','Goods and Services')],default= 'goods',string= 'Category')
    #added by induja on 20171011 for Other details
    default_pr_date = fields.Char(string="Document Date" , default= fields.Date.today)
    plant_manager = fields.Many2one('res.users',string="Plant Manager") 
    to_name = fields.Many2one('res.users',string="Name")
    grn_no = fields.Char(string= 'GRN No') 
    
    '''
    It will load the default company
    '''
    @api.model
    def _default_company(self):
        return self.env['res.company']._company_default_get('res.partner') 
    
    _defaults = {
        'company_address': _default_company  
        }
    
    '''
    Strictly Stopping to delete
    '''
    @api.multi
    def unlink(self):
        for order in self:
            if order.status != 'draft':
                raise UserError(_('Can\'t Delete...'))
        return super(PrakrutiReturnItems, self).unlink()
    
    '''
    While Selection of the Purchase Invoice Number the following fields will be loaded automatically
    '''
    def on_change_grn_id(self, cr, uid, ids, grn_id, context=None):
        grn_value = self.pool.get('prakruti.grn_inspection_details').browse(cr, uid, grn_id, context=context)
        result = {
            'grn_date': grn_value.grn_date,
            'grn_no': grn_value.grn_no,
            'vendor_id': grn_value.vendor_id.id,
            'po_no':grn_value.po_no,
            'pr_no':grn_value.pr_no,
            'order_date':grn_value.order_date,
            'to_name': grn_value.to_name.id,
            'plant_manager':grn_value.plant_manager.id,
            'stores_incharge': grn_value.stores_incharge.id,
            'company_address': grn_value.company_address.id,
            'purchase_manager':grn_value.purchase_manager,
            'document_no': grn_value.document_no,
            'revision_no':grn_value.revision_no,
            'default_pr_date':grn_value.default_pr_date,
                }
        return {'value': result}
    
    '''
    List out the products of the selected Purchase Invoice
    '''
    @api.one
    @api.multi
    def action_list_products(self):
        cr = self.env.cr
        uid = self.env.uid
        ids = self.ids
        context = 'context'
        for temp in self:
            cr.execute('''  SELECT 
                                product_id,
                                description,
                                uom_id,
                                actual_quantity AS ordered_qty,
                                quantity AS received_qty,
                                rejected_qty AS return_qty,
                                unit_price,
                                purchase_line_common_id,
                                hsn_code,
                                discount_rate,
                                cgst_id,
                                cgst_rate,
                                sgst_id,
                                sgst_rate,
                                igst_id,
                                igst_rate,
                                taxable_value,
                                taxable_value_after_adding_other
                            FROM 
                                prakruti_grn_inspection_details_line 
                            WHERE 
                                prakruti_grn_inspection_details_line.inspection_line_id =CAST(%s AS INTEGER) ''',((temp.grn_id.id),))
            for item in cr.dictfetchall():
                product_id=item['product_id']
                description=item['description']
                uom_id=item['uom_id']
                ordered_qty=item['ordered_qty']
                received_qty=item['received_qty']
                return_qty=item['return_qty']
                unit_price =item['unit_price']
                purchase_line_common_id =item['purchase_line_common_id']
                hsn_code =item['hsn_code']
                discount_rate =item['discount_rate']
                cgst_id =item['cgst_id']
                cgst_rate =item['cgst_rate']
                sgst_id =item['sgst_id']
                sgst_rate =item['sgst_rate']
                igst_id =item['igst_id']
                igst_rate =item['igst_rate']
                taxable_value =item['taxable_value']
                taxable_value_after_adding_other =item['taxable_value_after_adding_other']
                return_line_id = self.pool.get('prakruti.return_items_line').create(cr,uid, {
                    'product_id':product_id,
                    'description':description,
                    'uom_id':uom_id,
                    'ordered_qty':ordered_qty,
                    'received_qty':received_qty,
                    'return_qty':return_qty,
                    'unit_price':unit_price,
                    'purchase_line_common_id':purchase_line_common_id,
                    'hsn_code':hsn_code,
                    'discount_rate':discount_rate,
                    'cgst_id':cgst_id,
                    'cgst_rate':cgst_rate,
                    'sgst_id':sgst_id,
                    'sgst_rate':sgst_rate,
                    'igst_id':igst_id,
                    'igst_rate':igst_rate,
                    'taxable_value':taxable_value,
                    'taxable_value_after_adding_other':taxable_value_after_adding_other,
                    'return_line_id':temp.id,
                        })
            cr.execute("UPDATE prakruti_return_items SET flag_display_list = 1,flag_delete_list = 0 WHERE prakruti_return_items.id = cast(%s AS INTEGER)",((temp.id),))
        return {}
    '''
    It will delete the Return Line table
    '''
    @api.one
    @api.multi
    def action_delete_products(self):
        cr = self.env.cr
        uid = self.env.uid
        ids = self.ids
        context = 'context'
        for temp in self:
            cr.execute("DELETE FROM prakruti_return_items_line WHERE prakruti_return_items_line.return_line_id = (%s)", ((temp.id),))
            cr.execute("UPDATE prakruti_return_items SET flag_delete_list = 1,flag_display_list = 0 WHERE prakruti_return_items.id = cast(%s as integer)",((temp.id),))
        return {}
    
    '''
    Pushing the data to purchase_return
    '''
    @api.one
    @api.multi 
    def purchase_return(self):
        cr = self.env.cr
        uid = self.env.uid
        ids = self.ids
        context = 'context'        
        for temp in self:
            if temp.purchase_return_flag == 0:
                if len(temp.return_line) > 0:
                    return_id = self.pool.get('prakruti.purchase_return').create(cr,uid, {
                        'grn_id':temp.grn_id.id,
                        'grn_no':temp.grn_no,
                        'company_address':temp.company_address.id,
                        'grn_date':temp.grn_date,
                        'mrn_no':temp.mrn_no,
                        'mrn_date':temp.mrn_date,
                        'po_no':temp.po_no,
                        'order_date':temp.order_date,
                        'vendor_id':temp.vendor_id.id,
                        'pr_no':temp.pr_no,
                        'purchase_manager':temp.purchase_manager.id,
                        'categorization':temp.categorization,
                        'stores_incharge':temp.stores_incharge.id,
                        'to_name':temp.to_name.id,
                        'plant_manager':temp.plant_manager.id,
                        'document_no':temp.doc_no,
                        'revision_no':temp.rev_no,
                        'default_pr_date':temp.default_pr_date,
                        })
                    for line in temp.return_line:
                        return_line_id = self.pool.get('prakruti.purchase_return_line').create(cr,uid, {
                            'product_id': line.product_id.id,
                            'description': line.description,
                            'remarks': line.remarks,
                            'return_qty': line.return_qty,
                            'quantity': line.ordered_qty,
                            'uom_id': line.uom_id.id, 
                            'unit_price': line.unit_price,
                            'purchase_line_common_id': line.purchase_line_common_id,
                            'hsn_code': line.hsn_code,
                            'discount_rate': line.discount_rate,
                            'cgst_id': line.cgst_id.id,
                            'cgst_rate': line.cgst_rate,
                            'sgst_id': line.sgst_id.id,
                            'sgst_rate': line.sgst_rate,
                            'igst_id': line.igst_id.id,
                            'igst_rate': line.igst_rate,
                            'taxable_value': line.taxable_value,
                            'taxable_value_after_adding_other': line.taxable_value_after_adding_other,
                            'return_line_id': return_id
                            })
                    cr.execute("UPDATE prakruti_return_items SET status = 'purchase_return',purchase_return_flag = 1 WHERE id = %s",((temp.id),))
                    cr.execute('''UPDATE prakruti_material_rejected_store SET state = 'material_return' WHERE grn_no = %s''',((temp.grn_no),))
                else:
                    raise UserError(_('Please Enter Some Products'))
            else:
                raise UserError(_('Record Already Exists...'))
        return {}
    
    '''
    Pushing the data to material_outward
    '''
    @api.one
    @api.multi 
    def material_outward(self):
        cr = self.env.cr
        uid = self.env.uid
        ids = self.ids
        context = 'context'        
        for temp in self:
            if temp.material_outward_flag == 0:
                if len(temp.return_line) > 0:
                    cr.execute('''select count(id) as total_line from prakruti_return_items_line where return_line_id = %s''',((temp.id),))
                    for no_of_line in cr.dictfetchall():
                        total_line = no_of_line['total_line']
                    cr.execute('''select count(id) as entered_line from prakruti_return_items_line where return_line_id = %s and return_qty > 0.000''',((temp.id),))
                    for no_of_line in cr.dictfetchall():
                        entered_line = no_of_line['entered_line']
                    if entered_line == total_line:
                        outward_id = self.pool.get('prakruti.material_outward_note').create(cr,uid, {
                            'company_id':temp.company_address.id,
                            'vendor_id':temp.vendor_id.id,
                            's_ing':temp.stores_incharge.id,
                            'doc_no':temp.doc_no,
                            'rev_no':temp.rev_no
                            })
                        for line in temp.return_line:
                            outward_line_id = self.pool.get('prakruti.material_outward_note_line').create(cr,uid, {
                                'product_id': line.product_id.id,
                                'description': line.description,
                                'remarks': line.remarks,
                                'qty': line.return_qty,
                                'uom_id': line.uom_id.id, 
                                'amount': line.unit_price,
                                'line_id': outward_id
                                })
                        cr.execute('''select stock_material_rejection_note(%s)''',((temp.id),))
                        cr.execute('''UPDATE prakruti_return_items SET status = 'material_outward',material_outward_flag = 1 WHERE id = %s''',((temp.id),))
                        cr.execute('''UPDATE prakruti_material_rejected_store SET state = 'material_outward' WHERE grn_no = %s''',((temp.grn_no),))
                    else:
                        raise UserError(_('Oops Somewhere You Missed out Rejected Qty...'))
                else:
                    raise UserError(_('Please Enter Some Products'))
            else:
                raise UserError(_('Record Already Exists...'))
                
        return {}
    
    
    
    '''
    Total Amount Calculation
    '''    
    @api.depends('return_line.return_qty','return_line.unit_price')
    def _compute_total(self):
        for order in self:
            total_amount = total = 0.0
            for line in order.return_line:
                total_amount += line.return_qty * line.unit_price
                total = total_amount
                print '-------------------TOTAL----------------------',total_amount
                order.update({
                    'total': total_amount
                    })
    
class PrakrutiReturnItemsLine(models.Model):
    _name="prakruti.return_items_line"
    _table= 'prakruti_return_items_line'
    _description = 'Material Rejection Note Line'
    
    return_line_id = fields.Many2one('prakruti.return_items', ondelete='cascade',string = 'MRN ID')    
    product_id= fields.Many2one('product.product', string="Product Name", readonly= 1)
    description = fields.Char(string="Description", readonly= 1)
    uom_id = fields.Many2one('product.uom', string="UOM", readonly= 1)
    remarks= fields.Char(string="Remarks")
    status= fields.Selection([('reject','Reject'),('par_reject','Partially Rejected')],string="Status")
    ordered_qty= fields.Float(string="Ordered Qty",digits=(6,3), readonly= 1)
    received_qty= fields.Float(string="Received Qty",digits=(6,3), readonly= 1)
    return_qty= fields.Float(string="Rejected Qty",digits=(6,3))
    no_of_packing =  fields.Float(string="No of Packing" ,digits=(6,3))
    packing_size = fields.Float(string="Packing Size" ,digits=(6,3))
    unit_price = fields.Float(string='Unit price' ,digits=(6,3))
    total = fields.Float('Total' ,digits=(6,3))    
    purchase_line_common_id = fields.Integer(string="Purchase Line ID")
    hsn_code = fields.Char(string='HSN/SAC',readonly=1)
    discount_rate = fields.Float(string= 'Discount(%)',default=0)
    cgst_id = fields.Many2one('account.other.tax',string= 'CGST Rate',domain=[('select_type', '=', 'cgst')])
    cgst_rate = fields.Float(related='cgst_id.per_amount',string= 'CGST Rate',default=0,store=1)
    sgst_id = fields.Many2one('account.other.tax',string= 'SGST Rate',domain=[('select_type', '=', 'sgst')])
    sgst_rate = fields.Float(related='sgst_id.per_amount',string= 'SGST Rate',default=0,store=1)
    igst_id = fields.Many2one('account.other.tax',string= 'IGST Rate',domain=[('select_type', '=', 'igst')])
    igst_rate = fields.Float(related='igst_id.per_amount',string= 'IGST Rate',default=0,store=1)
    taxable_value = fields.Float(string= 'Taxable Value',digits=(6,3)) 
    taxable_value_after_adding_other = fields.Float(string='Taxable Value After Adding Other Charges',digits=(6,3))