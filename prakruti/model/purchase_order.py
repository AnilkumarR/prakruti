'''
Company : EBSL
Author : Karan
Module : Purchase Order
Class 1 : PrakrutiPurchaseOrder
Class 2 : PrakrutiPurchaseLine
Table 1 & Reference Id : prakruti_purchase_order,order_line
Table 2 & Reference Id : prakruti_purchase_line,purchase_line_id
Updated By : Karan 
Updated Date & Version : 2017/08/23 & 0.1
'''
import openerp
from datetime import date, datetime
from openerp.tools import DEFAULT_SERVER_DATE_FORMAT, image_colorize, image_resize_image_big
from openerp.exceptions import except_orm, Warning as UserError
from openerp import tools
from datetime import timedelta
from openerp.osv import osv,fields
from openerp import models, fields, api, _
from openerp.tools.translate import _
import sys, os, urllib2, urlparse
from email.MIMEText import MIMEText
from email.MIMEImage import MIMEImage
from email.MIMEMultipart import MIMEMultipart
import email, re
from datetime import datetime
from datetime import date, timedelta
from lxml import etree
import cgi
import logging
import lxml.html
import lxml.html.clean as clean
import openerp.pooler as pooler
import random
import re
import socket
import threading
import time
from openerp.tools import image_resize_image_big
from openerp.tools import amount_to_text
from openerp.tools.amount_to_text import amount_to_text_in 
from openerp.tools.amount_to_text import amount_to_text_in_without_word_rupees 

from openerp.tools import amount_to_text_en
from openerp.tools.amount_to_text_en import amount_to_text

from openerp.exceptions import ValidationError


class PrakrutiPurchaseOrder(models.Model):
    _name =  'prakruti.purchase_order'
    _table = 'prakruti_purchase_order'
    _description = 'Purchase Order'
    _rec_name = 'po_no'    
    _order="id desc" 
    
    '''
    Its an unique autogenerated Number which will be in the format of
    Format : PO\PRODUCT_TYPE\NUMBER\FINANCIAL YEAR
    Example : PO\EXFG\0001\17-18
    Updated By : Karan
    Updated On : 2017/08/23
    Version :0.1
    
    '''    
    @api.one
    @api.multi
    def _get_auto(self):
        style_format = {}
        month_value=0
        year_value=0
        next_year=0
        dispay_year=''
        display_present_year=''
        cr = self.env.cr
        uid = self.env.uid
        ids = self.ids
        for temp in self :
            cr.execute('''SELECT 
                                CAST(EXTRACT(month FROM order_date) AS INTEGER) AS month,
                                CAST(EXTRACT(year FROM order_date) AS INTEGER) AS year,
                                id 
                          FROM 
                                prakruti_purchase_order 
                          WHERE 
                                id=%s''',((temp.id),))
            for item in cr.dictfetchall():
                month_value=int(item['month'])
                year_value=int(item['year'])
            if month_value<=3:
                year_value=year_value-1
            else:
                year_value=year_value
            next_year=year_value+1
            dispay_year=str(next_year)[-2:]
            display_present_year=str(year_value)[-2:]
            cr.execute('''SELECT autogenerate_purchase_order(%s)''', ((temp.id),)  ) 
            result = cr.dictfetchall()
            parent_invoice_id = 0
            for value in result: parent_invoice_id = value['autogenerate_purchase_order'];
            auto_gen = int(parent_invoice_id)
            if len(str(auto_gen)) < 2:
                auto_gen = '000'+ str(auto_gen)
            elif len(str(auto_gen)) < 3:
                auto_gen = '00' + str(auto_gen)
            elif len(str(auto_gen)) == 3:
                auto_gen = '0'+str(auto_gen)
            else:
                auto_gen = str(auto_gen)
            for record in self :
                if temp.purchase_type.group_code:
                    style_format[record.id] ='PO\\'+ temp.purchase_type.group_code+'\\'+str(auto_gen)+'\\'+str(display_present_year)+'-'+str(dispay_year)
                else:                        
                    style_format[record.id] ='PO\\'+str(auto_gen)+'\\'+str(display_present_year)+'-'+str(dispay_year)
                cr.execute('''UPDATE 
                                    prakruti_purchase_order 
                              SET 
                                    po_no = %s 
                              WHERE 
                                    id=%s ''', ((style_format[record.id]),(temp.id),)  )
        return style_format
    
    order_line = fields.One2many('prakruti.purchase_line','purchase_line_id',string='Purchase Order Line')
    auto_no = fields.Integer('Auto')
    req_no_control_id = fields.Integer('Auto Generating id',default= 0)
    order_no = fields.Char(string='PO No',compute= '_get_auto') 
    po_no = fields.Char(string='Order No', readonly=True)
    pr_no = fields.Char(string='Requisition No', readonly=True)
    qa_no = fields.Char(string='Analysis No', readonly=True)
    qo_no = fields.Char(string='Quotation No', readonly=True)
    req_no =fields.Char(string='Request No', readonly=True)
    vendor_id = fields.Many2one('res.partner',string='Vendor/Supplier')
    vendor_reference = fields.Char(string='Vendor/Supplier Reference')
    other_reference = fields.Char(string='Other Reference')
    request_date = fields.Date(string = "Requisition Date")
    order_date = fields.Date(string='Order Date', default= fields.Date.today, required=True)
    destination = fields.Char(string='Destination')
    company_address = fields.Many2one('res.company',string='Company Address')
    delivery_address = fields.Many2one('res.company',string='Dispatch To')
    payment = fields.Char(string='Mode/Terms of Payments')
    terms_of_delivery = fields.Text(string='Terms of Delivery')
    remarks=fields.Text('Remarks')
    dispatch_through = fields.Char(string='Dispatch Through')
    prepared_by = fields.Many2one('res.users','Prepared By',readonly=True)
    maintanence_manager = fields.Many2one('res.users',string="Maintanence Manager", required=True)    
    purchase_manager = fields.Many2one('res.users',string="Purchase Manager", required=True)
    stores_incharge = fields.Many2one('res.users',string="Stores Incharge")
    purchase_type = fields.Many2one('product.group',string= 'Purchase Type',readonly=1)
    pr_common_id = fields.Integer('PR SCREEN COMMON ID')
    prakruti_stock_id = fields.Integer('SCREEN COMMON ID')
    order_close_flag = fields.Integer(string='Close the Order',default=0)
    cash_amount = fields.Float(string="Amount" ,digits=(6,3),default=0)
    cash_remarks = fields.Text(string="Remarks")    
    cheque_amount = fields.Float(string="Amount" ,digits=(6,3),default=0)
    cheque_no = fields.Integer(string="Cheque No.")
    cheque_remarks = fields.Text(string="Remarks")    
    draft_amount = fields.Float(string="Amount" ,digits=(6,3),default=0)
    draft_no = fields.Integer(string="Draft No.")
    draft_remarks = fields.Text(string="Remarks") 
    product_id = fields.Many2one('product.product', related='order_line.product_id', string='Product Name')
    short_close_remarks = fields.Text(string="Remarks For Short Close")
    no_of_product = fields.Integer(string= "No of Products")
    amount_taxed= fields.Float(string='Taxed Amount',digits=(6,3),readonly=1)    
    total_cgst= fields.Float(string='Total CGST',digits=(6,3),readonly=1)
    total_sgst= fields.Float(string='Total SGST',digits=(6,3),readonly=1)
    total_igst= fields.Float(string='Total IGST',digits=(6,3),readonly=1)
    total_gst= fields.Float(string='Total GST',digits=(6,3),readonly=1)
    insurance_charges = fields.Float(string="Insurance Charges" ,digits=(6,3))
    frieght_charges_applied = fields.Selection([('yes','Yes'),('no','No')], string="Freight Charge Applied", default='no')
    frieght_charges = fields.Float(string="Frieght Charges" ,digits=(6,3))
    additional_charges = fields.Float(string='Additional Charges' ,digits=(6,3))
    packing_charges = fields.Float(string='Packing & Forwarding' ,digits=(6,3))
    grand_total= fields.Float(string='Total',digits=(6,3),readonly=1)
    grand_total_after_payments= fields.Float(string='Grand Total',digits=(6,3),readonly=1)
    grand_total_in_words= fields.Text(compute= '_get_total_in_words',string='Total in words')
    total_amount = fields.Float(string='Total Amount',digits=(6,3))
    gst_total_in_words= fields.Text(compute= '_gst_total_in_words',string='GST Total in Words')
    all_additional_charges = fields.Float(string="All Additional Charges",digits=(6,3))#SUM OF all charges like freight_charges
    proportionate_amount_to_products = fields.Float(string="Proportionate Amount to Products",digits=(6,3))
    total_taxable_value = fields.Float(string="Total Taxable",digits=(6,3))
    revise_status = fields.Selection([('revise_order','Revise Order'),('revise_done','Revise Done')],string= 'Revise Status')
    revise_no = fields.Integer(string= '# Of Revision',default=0,readonly=1)
    is_revise = fields.Boolean(string= 'Is Revised',default=0,readonly=1)
    revise_remarks = fields.Text(string= 'Revise Remarks')
    revise_remarks_update = fields.Text(string= 'All Revise Updates',readonly=1,default='-')
    revise_id = fields.Many2one('res.users',string = 'Revised Done By')
    coming_from = fields.Char(string= 'Coming From',readonly=1)
    vendor_grid_id = fields.Integer(string= 'Price Request Vendor Grid ID',readonly=1)
    revise_flag = fields.Integer(string= 'Revise Flag',default=0,readonly=1)
    state = fields.Selection([
                ('order','Purchase Order Draft'),
                ('partial_grn','GRN Partially Confirmed'),
                ('confirm','GRN/Purchase Order Open'),
                ('order_close','Purchase Order Closed'),
                ('reject','Purchase Order Rejected'),
                ('short_close','Purchase Order Short Closed')],default= 'order', string= 'Status')
    any_adv_payment =fields.Selection([
                    ('no', 'No'),
                    ('yes','Yes')
                    ], string= 'Any Advance Payment')
    advance_payment_type =fields.Selection([
                    ('cash', 'CASH'),
                    ('cheque','CHEQUE'),
                    ('demand_draft','DEMAND DRAFT')
                    ], string= 'Done By')
    type_of_gst = fields.Selection([
        ('cgst_sgst','CGST/SGST'),('igst','IGST')],default='cgst_sgst',string='Type Of GST') 
    
    #added by induja on 20170928 for categorising the products
    categorization = fields.Selection([
		('goods','Goods'),
		('services','Services'),
		('goods_services','Goods and Services')],default= 'goods')
    list_in_pi_line=fields.Integer(string= 'Revised Flag',default=0)    
    #added by induja on 20171011 for Other details
    
    document_no = fields.Char(string ="Document No" , default='PPPL-PUR-F-004' , readonly=1)
    revision_no = fields.Char(string = "Rev. No", default='01' , readonly=1)
    default_pr_date = fields.Char(string="Document Date" , default= fields.Date.today , readonly=1)
    plant_manager = fields.Many2one('res.users',string="Plant Manager",readonly=True) 
    to_name = fields.Many2one('res.users',string="Name") 
     
    '''
    means that automatically shows this fields while creating this record.
    '''
    @api.model
    def _default_company(self):
        return self.env['res.company']._company_default_get('res.partner') 
    
    _defaults = {
        'po_no':'New',
        'pr_no':'Direct Order',
        'qa_no':'Direct Order',
        'qo_no':'Direct Order',
        'req_no':'Direct Order',
        'prepared_by': lambda s, cr, uid, c:uid,
        'company_address': _default_company,
        'revise_id': lambda s, cr, uid, c:uid   
        }              
    '''
    Cannot able to delete this record 
    '''
    @api.multi
    def unlink(self):
        for order in self:
            raise UserError(_('Can\'t Delete...'))
        return super(PrakrutiPurchaseOrder, self).unlink()
    
    @api.onchange('any_adv_payment')
    def onchange_any_adv_payment(self):
        if self.any_adv_payment == 'no':
            self.advance_payment_type = None
    
    @api.onchange('advance_payment_type')
    def onchange_advance_payment_type(self):
        if self.advance_payment_type == 'cash':
            self.cheque_amount = 0
            self.cheque_no = 0
            self.cheque_remarks = ''
            self.draft_amount = 0
            self.draft_no = 0
            self.draft_remarks = ''
        if self.advance_payment_type == 'cheque':
            self.cash_amount = 0
            self.cash_remarks = ''
            self.draft_amount = 0
            self.draft_no = 0
            self.draft_remarks = ''
        if self.advance_payment_type == 'demand_draft':
            self.cash_amount = 0
            self.cash_remarks = ''
            self.cheque_amount = 0
            self.cheque_no = 0
            self.cheque_remarks = ''
        else:
            self.cash_amount = 0
            self.cash_remarks = ''
            self.cheque_amount = 0
            self.cheque_no = 0
            self.cheque_remarks = ''
            self.draft_amount = 0
            self.draft_no = 0
            self.draft_remarks = ''
    
    @api.onchange('frieght_charges_applied','frieght_charges')
    def onchange_freight_charges(self):
        if self.frieght_charges_applied == 'no':
            self.frieght_charges = 0.0
    '''
    Validation for Vendor
    '''
    @api.one
    @api.constrains('vendor_id')
    def _check_vendor_id(self):
        if not self.vendor_id:
            raise ValidationError(
                "Please Check the Vendor")
    '''
    Grand Total Should not be -ve
    '''
    @api.one
    @api.constrains('grand_total')
    def _check_grand_total(self):
        if self.grand_total < 0:
            raise ValidationError(
                "Please Check the Advance Payment Details\n Since Grand Total is going Negative")
    '''
    Validation for negative values
    '''
    @api.one
    @api.constrains('packing_charges')
    def _check_packing_charges(self):
        if self.packing_charges < 0:
            raise ValidationError(
                "Packing Amount !!! Can't be Negative")  
    '''
    Validation for negative values
    '''
    @api.one
    @api.constrains('frieght_charges')
    def _check_frieght_charges(self):
        if self.frieght_charges < 0:
            raise ValidationError(
                "Freight Amount !!! Can't be Negative") 
    '''
    Validation for negative values 
    '''
    @api.one
    @api.constrains('additional_charges')
    def _check_additional_charges(self):
        if self.additional_charges < 0:
            raise ValidationError(
                "Additional Amount !!! Can't be Negative") 
    '''
    Validation for negative values
    '''
    @api.one
    @api.constrains('draft_amount')
    def _check_draft_amount(self):
        if self.draft_amount < 0:
            raise ValidationError(
                "Draft Amount !!! Can't be Negative") 
    '''
    Validation for negative values
    '''
    @api.one
    @api.constrains('cash_amount')
    def _check_cash_amount(self):
        if self.cash_amount < 0:
            raise ValidationError(
                "Cash Amount !!! Can't be Negative") 
    '''
    Validation for negative values
    '''
    @api.one
    @api.constrains('cheque_amount')
    def _check_cheque_amount(self):
        if self.cheque_amount < 0:
            raise ValidationError(
                "Check Amount !!! Can't be Negative")    
    
    '''
    Total GST in words
    '''
    @api.depends('total_gst')
    def _gst_total_in_words(self):
        for order in self:
            grand_total = val1=0.0
            val1_in_words = ""
            val1 = order.total_gst
            val1_in_words = str(amount_to_text_in_without_word_rupees(round(val1),"Rupee"))
            order.update({                    
                'gst_total_in_words': val1_in_words.upper()
                })
    '''
    Grand Total in words
    '''
    @api.depends('grand_total_after_payments')
    def _get_total_in_words(self):
        for order in self:
            grand_total_after_payments = val1 = 0.0
            val1_in_words = ""
            val1 = order.grand_total_after_payments
            val1_in_words = str(amount_to_text_en.amount_to_text(val1,"rupee"))
            order.update({
                'grand_total_in_words': val1_in_words.upper()
                })
    
    '''
    Pushing data to Logistics Screen
    '''
    @api.one
    @api.multi 
    def confirm_to_logistics(self):        
        cr = self.env.cr
        uid = self.env.uid
        ids = self.ids
        context = 'context'
        open_line = 0
        price_entered_line = 0
        total_entered_line = 0
        for temp in self:
            cr = self.env.cr
            uid = self.env.uid
            ids = self.ids
            context = {}
            #template_id = self.pool.get('email.template').search(cr,uid,[('name','=','Purchase Order')],context=context)[0]
            #email_obj = self.pool.get('email.template').send_mail(cr, uid, template_id,ids[0],force_send=True)
            cr.execute("SELECT prakruti_purchase_order.type_of_gst as type_of_gst,cgst_rate,sgst_rate,igst_rate FROM prakruti_purchase_line INNER JOIN prakruti_purchase_order ON prakruti_purchase_line.purchase_line_id = prakruti_purchase_order.id WHERE purchase_line_id = %s",((temp.id),))
            for line in cr.dictfetchall():
                type_of_gst = line['type_of_gst']
                cgst_rate = line['cgst_rate']
                sgst_rate = line['sgst_rate']
                igst_rate = line['igst_rate']
                if type_of_gst == 'cgst_sgst':
                    if cgst_rate:
                        if not sgst_rate:
                            raise UserError(_('Please Enter Equal Tax for SGST Also'))
                    if sgst_rate:
                        if not cgst_rate: 
                            raise UserError(_('Please Enter Equal Tax for CGST Also'))               
                    if (cgst_rate + sgst_rate) in [0,5,12,18,28]:
                        if igst_rate:
                            raise UserError(_('You are not supposed to enter IGST details'))
                        if cgst_rate:
                            if not sgst_rate:
                                raise UserError(_('Please Enter Equal Tax for SGST Also'))
                        if sgst_rate:
                            if not cgst_rate:
                                raise UserError(_('Please Enter Equal Tax for CGST Also'))
                    else:
                        raise UserError(_('Please Enter Proper Tax Details'))
                elif type_of_gst == 'igst':
                    if cgst_rate:
                        raise UserError(_('Sorry You are not supposed to enter CGST Details'))
                    if sgst_rate:
                        raise UserError(_('Sorry You are not supposed to enter SGST Details'))
                    if (igst_rate) not in [0,5,12,18,28]:
                        raise UserError(_('Please Enter Proper Tax Details'))
                else:
                    raise UserError(_('Sorry Please Select GST TYPE'))
                
            cr.execute("SELECT COUNT(id) AS open_line FROM prakruti_purchase_line WHERE purchase_line_id = CAST(%s as integer) AND status ='open'",((temp.id),))
            for line in cr.dictfetchall():
                open_line=line['open_line']
            if open_line > 0:
                cr.execute("SELECT COUNT(id) AS price_entered_line FROM prakruti_purchase_line WHERE purchase_line_id = CAST(%s as integer) AND status ='open' AND unit_price > 0 ",((temp.id),))
                for line in cr.dictfetchall():
                    price_entered_line=line['price_entered_line']
                cr.execute("SELECT COUNT(id) AS total_entered_line FROM prakruti_purchase_line WHERE purchase_line_id = CAST(%s as integer) AND status ='open'",((temp.id),))
                for line in cr.dictfetchall():
                    total_entered_line=line['total_entered_line']
                if price_entered_line == total_entered_line:
                    cr.execute("SELECT categorization FROM prakruti_purchase_order WHERE prakruti_purchase_order.id = CAST(%s as integer) ",((temp.id),))
                    for line in cr.dictfetchall():
                        categorization=line['categorization']
                    if categorization=='goods' or categorization=='goods_services':
                        ebsl_id = self.pool.get('prakruti.logistics_po_tracking').create(cr,uid, {
                            'cash_amount':temp.cash_amount,
                            'cash_remarks':temp.cash_remarks,
                            'cheque_amount':temp.cheque_amount,
                            'cheque_no':temp.cheque_no,
                            'cheque_remarks':temp.cheque_remarks,
                            'draft_amount':temp.draft_amount,
                            'draft_no':temp.draft_no,
                            'draft_remarks':temp.draft_remarks,
                            'advance_payment_type':temp.advance_payment_type,
                            'any_adv_payment':temp.any_adv_payment,
                            'po_no':temp.po_no,
                            'qa_no':temp.qa_no,
                            'pr_no':temp.pr_no,
                            'qo_no':temp.qo_no,
                            'req_no':temp.req_no,
                            'vendor_reference':temp.vendor_reference,
                            'payment':temp.payment,
                            'destination':temp.destination,
                            'other_reference':temp.other_reference,
                            'maintanence_manager':temp.maintanence_manager.id,
                            'purchase_manager':temp.purchase_manager.id,
                            'stores_incharge':temp.stores_incharge.id,
                            'terms_of_delivery':temp.terms_of_delivery,
                            'vendor_id': temp.vendor_id.id,
                            'remarks':temp.remarks,
                            'request_date':temp.request_date,
                            'order_date':temp.order_date,
                            'dispatch_through':temp.dispatch_through,
                            'company_address':temp.company_address.id,
                            'purchase_type':temp.purchase_type.id,
                            'no_of_product':temp.no_of_product,
                            'amount_taxed':temp.amount_taxed,
                            'total_cgst':temp.total_cgst,
                            'total_sgst':temp.total_sgst,
                            'total_igst':temp.total_igst,
                            'total_gst':temp.total_gst,
                            'insurance_charges':temp.insurance_charges,
                            'frieght_charges_applied':temp.frieght_charges_applied,
                            'frieght_charges':temp.frieght_charges,
                            'packing_charges':temp.packing_charges,
                            'additional_charges':temp.additional_charges,
                            'grand_total':temp.grand_total,
                            'categorization':temp.categorization,
                            'to_name':temp.to_name.id,
                            'plant_manager':temp.plant_manager.id,
                            'document_no':temp.document_no,
                            'revision_no':temp.revision_no,
                            'default_pr_date':temp.default_pr_date,
                            'coming_from':'Purchase Order'
                            })
                        cr.execute("SELECT product_id,balance_qty,description,uom_id,quantity,extra_packing,scheduled_date,unit_price,subtotal,prakruti_purchase_line.remarks,prakruti_purchase_line.id,no_of_packings,pack_per_qty,hsn_code,discount_id,discount_rate,discount_value,taxable_value,total,cgst_id,cgst_rate,cgst_value,sgst_id,sgst_rate,sgst_value,igst_id,igst_rate,igst_value,taxable_value_after_adding_other,no_of_product,packing_charges,frieght_charges,additional_charges,insurance_charges,requisition_line_id,slip_id FROM prakruti_purchase_line WHERE purchase_line_id = CAST(%s as integer) AND status ='open' ",((temp.id),))
                        for item in cr.dictfetchall():
                            erp_id = self.pool.get('prakruti.purchase_line_in_logistics').create(cr,uid, {
                                'product_id':item['product_id'],
                                'description':item['description'],
                                'quantity':item['balance_qty'],
                                'uom_id':item['uom_id'],
                                'scheduled_date':item['scheduled_date'],
                                'unit_price':item['unit_price'],
                                'subtotal':item['subtotal'],
                                'remarks':item['remarks'],
                                'no_of_packings':item['no_of_packings'],
                                'pack_per_qty':item['pack_per_qty'],
                                'extra_packing':item['extra_packing'],
                                'purchase_line_common_id':item['id'],
                                'hsn_code': item['hsn_code'],
                                'discount_id':item['discount_id'],
                                'discount_rate':item['discount_rate'],
                                'discount_value':item['discount_value'],
                                'taxable_value': item['taxable_value'],
                                'total':item['total'],
                                'cgst_id':item['cgst_id'],
                                'cgst_rate':item['cgst_rate'],
                                'cgst_value': item['cgst_value'],
                                'sgst_id':item['sgst_id'],
                                'sgst_rate':item['sgst_rate'],
                                'sgst_value': item['sgst_value'],
                                'igst_id':item['igst_id'],
                                'igst_rate':item['igst_rate'],
                                'igst_value': item['igst_value'],
                                'taxable_value_after_adding_other':item['taxable_value_after_adding_other'],
                                'no_of_product':item['no_of_product'],
                                'packing_charges':item['packing_charges'],
                                'frieght_charges':item['frieght_charges'],
                                'additional_charges':item['additional_charges'],
                                'insurance_charges':item['insurance_charges'],
                                'requisition_line_id':item['requisition_line_id'],
                                'slip_id':item['slip_id'],
                                'logistics_line_id':ebsl_id
                                })
                        cr.execute("UPDATE  prakruti_purchase_order SET state = 'confirm' WHERE prakruti_purchase_order.id = cast(%s as integer)", ((temp.id),))
                        cr.execute("UPDATE  prakruti_purchase_requisition SET state = 'confirm' WHERE prakruti_purchase_requisition.requisition_no = %s ", ((temp.pr_no),))
                        cr.execute("UPDATE  prakruti_price_request SET state = 'confirm' WHERE prakruti_price_request.request_no = %s AND prakruti_price_request.inquiry_no = %s", ((temp.pr_no),(temp.req_no)))
                        cr.execute("UPDATE  prakruti_purchase_order_quotation SET state = 'confirm' WHERE prakruti_purchase_order_quotation.pr_no = %s AND prakruti_purchase_order_quotation.qo_no = %s", ((temp.pr_no),(temp.qo_no),))
                        cr.execute("UPDATE  prakruti_purchase_order_quotation_analysis SET state = 'confirm' WHERE prakruti_purchase_order_quotation_analysis.pr_no = %s AND prakruti_purchase_order_quotation_analysis.qa_no = %s", ((temp.pr_no),(temp.qa_no)))
                        cr.execute("UPDATE  prakruti_purchase_requisition_approve SET state = 'confirm' WHERE prakruti_purchase_requisition_approve.requisition_no = %s",((temp.pr_no),)) 
                        cr.execute('''SELECT 
                                            count(prakruti_purchase_requistion_analysis_line.id) AS no_of_approved_line 
                                    FROM 
                                            prakruti_purchase_requistion_analysis_line JOIN 
                                            prakruti_purchase_requistion_analysis ON 
                                            prakruti_purchase_requistion_analysis_line.requistion_line_id = prakruti_purchase_requistion_analysis.id JOIN 
                                            prakruti_purchase_order ON 
                                            prakruti_purchase_order.pr_no = prakruti_purchase_requistion_analysis.request_no 
                                    WHERE 
                                            prakruti_purchase_requistion_analysis_line.status= 'approved' AND 
                                            prakruti_purchase_requistion_analysis.request_no = %s AND 
                                            prakruti_purchase_order.id = %s''',((temp.pr_no),(temp.id),))
                        for line in cr.dictfetchall():
                            no_of_approved_line=line['no_of_approved_line']
                        cr.execute('''SELECT 
                                            count(prakruti_purchase_requistion_analysis_line.id) AS no_of_line 
                                    FROM 
                                            prakruti_purchase_requistion_analysis_line JOIN 
                                            prakruti_purchase_requistion_analysis ON 
                                            prakruti_purchase_requistion_analysis_line.requistion_line_id = prakruti_purchase_requistion_analysis.id JOIN 
                                            prakruti_purchase_order ON 
                                            prakruti_purchase_order.pr_no = prakruti_purchase_requistion_analysis.request_no 
                                    WHERE 
                                            prakruti_purchase_requistion_analysis.request_no = %s AND 
                                            prakruti_purchase_order.id = %s''',((temp.pr_no),(temp.id),))
                        for line in cr.dictfetchall():
                            no_of_line=line['no_of_line']
                        if no_of_approved_line == no_of_line:
                            cr.execute("UPDATE prakruti_purchase_requistion_analysis SET state = 'confirm' WHERE prakruti_purchase_requistion_analysis.request_no = %s ", ((temp.pr_no),))
                        else:
                            cr.execute("UPDATE prakruti_purchase_requistion_analysis SET state = 'partial_confirm' WHERE prakruti_purchase_requistion_analysis.request_no = %s ", ((temp.pr_no),))
                    else:
                        cr.execute("UPDATE prakruti_purchase_order SET state = 'confirm' ,list_in_pi_line=2 WHERE prakruti_purchase_order.id = %s ", ((temp.id),))
                        cr.execute("UPDATE  prakruti_purchase_requisition SET state = 'confirm' WHERE prakruti_purchase_requisition.requisition_no = %s ", ((temp.pr_no),))
                        cr.execute("UPDATE  prakruti_price_request SET state = 'confirm' WHERE prakruti_price_request.request_no = %s AND prakruti_price_request.inquiry_no = %s", ((temp.pr_no),(temp.req_no)))
                        cr.execute("UPDATE  prakruti_purchase_order_quotation SET state = 'confirm' WHERE prakruti_purchase_order_quotation.pr_no = %s AND prakruti_purchase_order_quotation.qo_no = %s", ((temp.pr_no),(temp.qo_no),))
                        cr.execute("UPDATE  prakruti_purchase_order_quotation_analysis SET state = 'confirm' WHERE prakruti_purchase_order_quotation_analysis.pr_no = %s AND prakruti_purchase_order_quotation_analysis.qa_no = %s", ((temp.pr_no),(temp.qa_no)))
                        cr.execute("UPDATE  prakruti_purchase_requisition_approve SET state = 'confirm' WHERE prakruti_purchase_requisition_approve.requisition_no = %s",((temp.pr_no),))
                        cr.execute('''SELECT 
                                            count(prakruti_purchase_requistion_analysis_line.id) AS no_of_approved_line 
                                    FROM 
                                            prakruti_purchase_requistion_analysis_line JOIN 
                                            prakruti_purchase_requistion_analysis ON 
                                            prakruti_purchase_requistion_analysis_line.requistion_line_id = prakruti_purchase_requistion_analysis.id JOIN 
                                            prakruti_purchase_order ON 
                                            prakruti_purchase_order.pr_no = prakruti_purchase_requistion_analysis.request_no 
                                    WHERE 
                                            prakruti_purchase_requistion_analysis_line.status= 'approved' AND 
                                            prakruti_purchase_requistion_analysis.request_no = %s AND 
                                            prakruti_purchase_order.id = %s''',((temp.pr_no),(temp.id),))
                        for line in cr.dictfetchall():
                            no_of_approved_line=line['no_of_approved_line']
                        cr.execute('''SELECT 
                                            count(prakruti_purchase_requistion_analysis_line.id) AS no_of_line 
                                    FROM 
                                            prakruti_purchase_requistion_analysis_line JOIN 
                                            prakruti_purchase_requistion_analysis ON 
                                            prakruti_purchase_requistion_analysis_line.requistion_line_id = prakruti_purchase_requistion_analysis.id JOIN 
                                            prakruti_purchase_order ON 
                                            prakruti_purchase_order.pr_no = prakruti_purchase_requistion_analysis.request_no 
                                    WHERE 
                                            prakruti_purchase_requistion_analysis.request_no = %s AND 
                                            prakruti_purchase_order.id = %s''',((temp.pr_no),(temp.id),))
                        for line in cr.dictfetchall():
                            no_of_line=line['no_of_line']
                        if no_of_approved_line == no_of_line:
                            cr.execute("UPDATE prakruti_purchase_requistion_analysis SET state = 'confirm' WHERE prakruti_purchase_requistion_analysis.request_no = %s ", ((temp.pr_no),))
                        else:
                            cr.execute("UPDATE prakruti_purchase_requistion_analysis SET state = 'partial_confirm' WHERE prakruti_purchase_requistion_analysis.request_no = %s ", ((temp.pr_no),))
                else:
                    raise UserError(_('Please Enter Unit Price...'))
            else:
                raise UserError(_('There Might Be No Any Product To Send Further...'))
        return {}
    
    
    '''
    When clicking this button the order will be short closed and the status is updated , with the same Requisition no again we will raise the order from Requisition Analysis
    ''' 
    @api.one
    @api.multi 
    def short_close_order(self):        
        cr = self.env.cr
        uid = self.env.uid
        ids = self.ids
        context = 'context'
        for temp in self:
            cr = self.env.cr
            uid = self.env.uid
            ids = self.ids
            context = {}
            if temp.short_close_remarks:
                cr.execute('''SELECT short_close_purchase(%s,%s,%s,%s,%s)''', ((temp.id),(temp.pr_no),(temp.qa_no),(temp.qo_no),(temp.req_no),))
                #template_id = self.pool.get('email.template').search(cr,uid,[('name','=','Purchase Order Short Close')],context=context)[0]
                #email_obj = self.pool.get('email.template').send_mail(cr, uid, template_id,ids[0],force_send=True)
            else:
                raise UserError(_('Please enter remarks for Short Close'))
        return {}    
    
    
    '''
    Rejecting the Order and the status is updating in every screen up to PO Tracking
    '''    
    @api.one
    @api.multi 
    def reject_order(self):        
        cr = self.env.cr
        uid = self.env.uid
        ids = self.ids
        context = 'context'
        for temp in self:
            if temp.remarks:
                cr.execute('''SELECT reject_purchase_order(%s,%s,%s,%s,%s)''', ((temp.id),(temp.pr_no),(temp.po_no),(temp.vendor_id.id),(temp.req_no),))
            else:
                raise UserError(_('Please Enter Remarks...'))
        return {} 
    '''
    This Button helps for Revision(If any changes need to be done in prakruti_purchase_line click this button and enter)
    '''
    @api.one
    @api.multi
    def revise_order(self):
        cr = self.env.cr
        uid = self.env.uid
        ids = self.ids
        context = 'context'
        for temp in self:
            ebsl_id = self.pool.get('prakruti.purchase_order').create(cr,uid,{
                'order_no':temp.order_no,
                'po_no':temp.po_no,
                'pr_no':temp.pr_no,
                'qa_no':temp.qa_no,
                'qo_no':temp.qo_no,
                'req_no':temp.req_no,
                'vendor_id':temp.vendor_id.id,
                'vendor_reference':temp.vendor_reference,
                'other_reference':temp.other_reference,
                'request_date':temp.request_date,
                'order_date':temp.order_date,
                'destination':temp.destination,
                'company_address':temp.company_address.id,
                'delivery_address':temp.delivery_address.id,
                'payment':temp.payment,
                'terms_of_delivery':temp.terms_of_delivery,
                'remarks':temp.remarks,
                'dispatch_through':temp.dispatch_through,
                'prepared_by':temp.prepared_by.id,
                'maintanence_manager':temp.maintanence_manager.id,
                'purchase_manager':temp.purchase_manager.id,
                'stores_incharge':temp.stores_incharge.id,
                'purchase_type':temp.purchase_type.id,
                'state':temp.state,
                'pr_common_id':temp.pr_common_id,
                'prakruti_stock_id':temp.prakruti_stock_id,
                'order_close_flag':temp.order_close_flag,
                'any_adv_payment':temp.any_adv_payment,
                'advance_payment_type':temp.advance_payment_type,
                'cash_amount':temp.cash_amount,
                'cash_remarks':temp.cash_remarks,
                'cheque_amount':temp.cheque_amount,
                'cheque_no':temp.cheque_no,
                'cheque_remarks':temp.cheque_remarks,
                'draft_amount':temp.draft_amount,
                'draft_no':temp.draft_no,
                'draft_remarks':temp.draft_remarks,
                'short_close_remarks':temp.short_close_remarks,
                'no_of_product':temp.no_of_product,
                'amount_taxed':temp.amount_taxed,
                'total_cgst':temp.total_cgst,
                'total_sgst':temp.total_sgst,
                'total_igst':temp.total_igst,
                'total_gst':temp.total_gst,
                'insurance_charges':temp.insurance_charges,
                'frieght_charges_applied':temp.frieght_charges_applied,
                'frieght_charges':temp.frieght_charges,
                'packing_charges':temp.packing_charges,
                'additional_charges':temp.additional_charges,
                'grand_total':temp.grand_total,
                'grand_total_after_payments':temp.grand_total_after_paymenplant_managerts,
                'vendor_grid_id':temp.vendor_grid_id,
                'categorization':temp.categorization,
                'to_name':temp.to_name.id,
                'plant_manager':temp.plant_manager.id,
                'document_no':temp.document_no,
                'revision_no':temp.revision_no,
                'default_pr_date':temp.default_pr_date,
                'revise_flag':1
                })
            for line in temp.order_line:
                erp_id = self.pool.get('prakruti.purchase_line').create(cr,uid,{
                    'product_id':line.product_id.id,
                    'description':line.description,
                    'scheduled_date':line.scheduled_date,
                    'required_date':line.required_date,
                    'unit_price':line.unit_price,
                    'uom_id':line.uom_id.id,
                    'pr_common_id':line.pr_common_id,
                    'prakruti_stock_id':line.prakruti_stock_id,
                    'remarks':line.remarks,
                    'status':line.status,
                    'balance_qty':line.balance_qty,
                    'no_of_packings':line.no_of_packings,
                    'pack_per_qty':line.pack_per_qty,
                    'extra_packing':line.extra_packing,
                    'quantity':line.quantity,
                    'hsn_code': line.hsn_code,
                    'discount_id':line.discount_id.id,
                    'discount_rate':line.discount_rate,
                    'discount_value':line.discount_value,
                    'taxable_value': line.taxable_value,
                    'total':line.total,
                    'cgst_id':line.cgst_id.id,
                    'cgst_rate':line.cgst_rate,
                    'cgst_value': line.cgst_value,
                    'sgst_id':line.sgst_id.id,
                    'sgst_rate':line.sgst_rate,
                    'sgst_value': line.sgst_value,
                    'igst_id':line.igst_id.id,
                    'igst_rate':line.igst_rate,
                    'igst_value': line.igst_value,
                    'taxable_value_after_adding_other':line.taxable_value_after_adding_other,
                    'subtotal': line.subtotal,
                    'requisition_line_id':line.requisition_line_id,
                    'slip_id':line.slip_id.id,
                    'revise_order_line':line.revise_order_line,
                    'purchase_line_id':ebsl_id
                    })
            cr.execute("UPDATE prakruti_purchase_order SET revise_status = 'revise_order',is_revise = 'True' WHERE id = %s",((temp.id),))
            cr.execute("UPDATE prakruti_purchase_line SET revise_order_line = 1 WHERE purchase_line_id = %s",((temp.id),))
        return {}
    '''
    After doing changes in prakruti_purchase_line click this to visible Revise button and to update the changes in the screen
    '''
    @api.one
    @api.multi
    def revise_done(self):
        cr = self.env.cr
        uid = self.env.uid
        ids = self.ids
        context = 'context' 
        revise_done_by = False
        error_message = ''
        for temp in self:
            if temp.revise_remarks:
                if temp.revise_id:
                    cr.execute("UPDATE prakruti_purchase_line SET revise_order_line = 2 WHERE purchase_line_id = %s",((temp.id),))
                    cr.execute('''SELECT revise_purchase_order AS error_message FROM revise_purchase_order(%s,%s)''',((temp.id),(temp.pr_no),))
                    for line in cr.dictfetchall():
                        error_message = line['error_message']
                    if error_message == 'Record Cannot Be Revised':
                        raise UserError(_('Record...Can\'t Be Revised...\nPlease Contact Your Administrator...!!!'))
                else:
                    raise UserError(_('Please enter Revised Person...'))
            else:
                raise UserError(_('Please enter Revise Remarks...'))
        return {}
    '''
    calculation for purchase order
    '''
    @api.one
    @api.multi
    def calculate_total(self):
        cr = self.env.cr
        uid = self.env.uid
        ids = self.ids
        context = 'context'
        for temp in self:
            cr.execute('''SELECT calculation_purchase_order(%s)''',((temp.id),)) 
        return {} 
 

class PrakrutiPurchaseLine(models.Model):
    _name = 'prakruti.purchase_line'
    _table = 'prakruti_purchase_line'
    _description = 'Purchase Order Line'
    
    purchase_line_id = fields.Many2one('prakruti.purchase_order', ondelete='cascade')
    product_id = fields.Many2one('product.product',string='Product Name',readonly=1)    
    description = fields.Text(string='Description')
    scheduled_date =fields.Date(string='Due On')
    required_date = fields.Date(string="Req. Date")
    unit_price = fields.Float(string='Unit price' ,digits=(6,3))
    uom_id = fields.Many2one('product.uom',string='UOM',readonly=1)
    pr_common_id = fields.Integer('PR SCREEN COMMON ID') 
    prakruti_stock_id = fields.Integer('SCREEN COMMON ID')
    remarks=fields.Text('Remarks')
    balance_qty = fields.Float(string="Balance Qty" ,digits=(6,3))
    no_of_packings= fields.Float(string= "No. of Packings",default=0 ,digits=(6,3))
    pack_per_qty= fields.Float(string= "Packing Per. Qty.",default=0 ,digits=(6,3))
    extra_packing= fields.Float(string= "(+)Extra Packing",default=0 ,digits=(6,3))
    quantity = fields.Float(string='Quantity Packed',digits=(6,3))
    hsn_code = fields.Char(string='HSN/SAC',readonly=1)
    discount_id = fields.Many2one('account.other.tax',string= 'Discount(%)',domain=[('select_type', '=', 'discount')])
    discount_rate = fields.Float(string= 'Discount(%)',default=0)
    discount_value = fields.Float(string= 'Discount Amount',digits=(6,3),readonly=1) 
    taxable_value = fields.Float(string= 'Taxable Value',digits=(6,3),readonly=1)
    total= fields.Float(string='Total',digits=(6,3),readonly=1)
    cgst_id = fields.Many2one('account.other.tax',string= 'CGST Rate',domain=[('select_type', '=', 'cgst')])
    cgst_rate = fields.Float(related='cgst_id.per_amount',string= 'CGST Rate',default=0,store=1)
    cgst_value = fields.Float(string= 'CGST Amount',digits=(6,3),readonly=1)
    sgst_id = fields.Many2one('account.other.tax',string= 'SGST Rate',domain=[('select_type', '=', 'sgst')])
    sgst_rate = fields.Float(related='sgst_id.per_amount',string= 'SGST Rate',default=0,store=1)
    sgst_value = fields.Float(string= 'SGST Amount',digits=(6,3),readonly=1) 
    igst_id = fields.Many2one('account.other.tax',string= 'IGST Rate',domain=[('select_type', '=', 'igst')])
    igst_rate = fields.Float(related='igst_id.per_amount',string= 'IGST Rate',default=0,store=1)
    igst_value = fields.Float(string= 'IGST Amount',digits=(6,3),readonly=1) 
    taxable_value_after_adding_other= fields.Float(string='Taxable Value After Adding Other Charges',digits=(6,3),readonly=1)
    subtotal = fields.Float(string= 'Sub Total',digits=(6,3),readonly=1)
    requisition_line_id = fields.Integer(string= 'Requisition Line ID',readonly=1)
    status = fields.Selection([
        ('open', 'Open'),
        ('wait', 'Wait'),
        ('close','Close')],default= 'open', string= 'Status')
    #Added as per requirement for reserving the product based on the Planning Request
    slip_id = fields.Many2one('prakruti.production_slip',string = 'Slip ID',readonly=1)
    revise_order_line=fields.Integer(string= 'Revised Flag',default=0)
    
    def onchange_product_id(self, cr, uid, ids, product_id, context=None):
        available_stock = 0.0
        uom_id = 0
        description = ''
        uom_name = ''
        hsn_code = ''
        cr.execute('''SELECT 
                            product_uom.id AS uom_id, 
                            product_uom.name AS uom_name, 
                            product_template.name AS description,
                            product_template.hsn_code AS hsn_code 
                      FROM 
                            product_uom JOIN 
                            product_template ON 
                            product_uom.id=product_template.uom_id JOIN 
                            product_product ON 
                            product_template.id=product_product.product_tmpl_id 
                      WHERE 
                            product_product.id = cast(%s as integer)''', ((product_id),))
        for line in cr.dictfetchall():
            uom_id = line['uom_id']
            description = line['description']
            hsn_code = line['hsn_code']
        return {'value' :{
                    'uom_id':uom_id,
                    'description':description,
                    'hsn_code':hsn_code
    
                }}
    
    '''
    -ve and 0 value validation
    '''    
    def _check_qty(self, cr, uid, ids):
         lines = self.browse(cr, uid, ids)
         for line in lines:
             if line.quantity <= 0:
                 return False
         return True
     
    _constraints = [
         (_check_qty, 'Order quantity cannot be negative or zero !', ['quantity']),
    ]    
    '''
    -ve and > than 100 value validation
    ''' 
    @api.one
    @api.constrains('discount')
    def _check_discount(self):
        if self.discount < 0 or self.discount > 100:
            raise ValidationError(
                "Discount !!! Can't be Negative OR exceeds more than 100%") 
    '''
    -ve and 0 value validation
    '''
    @api.one
    @api.constrains('unit_price')
    def _check_unit_price(self):
        if self.unit_price <= 0 :
            raise ValidationError(
                "Unit Price !!! Can't be Negative or 0")  
    '''
    -ve  value validation
    '''
    @api.one
    @api.constrains('no_of_packings')
    def _check_no_of_packings(self):
        if self.no_of_packings < 0 :
            raise ValidationError(
                "No of Packing !!! Can't be Negative")  
    '''
    -ve  value validation
    '''
    @api.one
    @api.constrains('pack_per_qty')
    def _check_pack_per_qty(self):
        if self.pack_per_qty < 0 :
            raise ValidationError(
                "Packing Per Qty !!! Can't be Negative") 
    '''
    -ve  value validation
    '''
    @api.one
    @api.constrains('extra_packing')
    def _check_extra_packing(self):
        if self.extra_packing < 0 :
            raise ValidationError(
                "Extra Packing Qty !!! Can't be Negative") 
    '''
    -ve  value validation
    '''
    @api.one
    @api.constrains('quantity')
    def _check_quantity(self):
        if self.quantity <= 0 :
            raise ValidationError(
                "Qty !!! Can't be Negative")