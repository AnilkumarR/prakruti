'''
Company : EBSL
Author : Karan
Module : Product Master
Class 1 : ProductGroup
Class 2 : ProductTemplate
Class 3 : PackingMaterialLine
Class 3 : PrackrutiEmergencyLevel
Table 1 & Reference Id : product_group
Table 2 & Reference Id : product_template,packingmaterial_name
Table 3 & Reference Id : packing_material_line,packing_id
Table 4 & Reference Id : stock_warehouse_orderpoint
Updated By : Karan 
Updated Date & Version : 2017/08/28 & 0.1
'''
from openerp import models, fields, api
import time
import openerp
from datetime import date
from datetime import datetime
from openerp.tools.translate import _
import openerp.addons.decimal_precision as dp
from openerp.tools import DEFAULT_SERVER_DATE_FORMAT, image_colorize
from openerp.tools import image_resize_image_big
from openerp.exceptions import except_orm, Warning as UserError
import re
import logging
from datetime import timedelta
from openerp.exceptions import ValidationError

class ProductGroup(models.Model):
    _name= 'product.group'
    _table= 'product_group'
    _description = 'Product Group'
    _rec_name= 'group_name'
    _order = 'id desc'

    group_name = fields.Char('Group Name',required= True)
    group_code = fields.Char('Group Code',required= True)
    
    '''
     name must be in this format
    ''' 
    def onchange_group_name(self, cr, uid, ids, group_name, context=None):
        if group_name == False:
            return {
                'value': {
                    'group_name': False
                }
            }

        else:
            new_string = re.sub('[^a-zA-Z0-9\n\.]', ' ', group_name)
            return {
                'value': {
                    'group_name': new_string
                    }
                }

class ProductTemplate(models.Model):
    _inherit= 'product.template'
    _table= 'product_template'
    _description = 'Inherited Product Template'
    
    '''
    Its an unique autogenerated Number which will be in the format of
    Format : PRODUCT_TYPENUMBER
    Example : EXFG0001
    Updated By : Karan
    Updated On : 2017/08/28
    Version :0.1
    
    '''
    
    @api.one
    @api.multi
    def _get_auto(self):
        style_format = {}
        month_value=0
        year_value=0
        next_year=0
        dispay_year=''
        display_present_year=''
        cr = self.env.cr
        uid = self.env.uid
        ids = self.ids
        for temp in self :
            cr.execute('''SELECT 
                                CAST(EXTRACT(month FROM code_date) AS INTEGER) AS month,
                                CAST(EXTRACT(year FROM code_date) AS INTEGER) AS year,
                                id 
                          FROM 
                                product_template 
                          WHERE 
                                id=%s''',((temp.id),))
            for item in cr.dictfetchall():
                month_value=int(item['month'])
                year_value=int(item['year'])
            if month_value<=3:
                year_value=year_value-1
            else:
                year_value=year_value
            next_year=year_value+1
            dispay_year=str(next_year)[-2:]
            display_present_year=str(year_value)[-2:]
            cr.execute('''SELECT autogenerate_product_template(%s)''', ((temp.id),)  ) 
            result = cr.dictfetchall()
            parent_invoice_id = 0
            for value in result: parent_invoice_id = value['autogenerate_product_template'];
            auto_gen = int(parent_invoice_id)
            if len(str(auto_gen)) < 2:
                auto_gen = '000'+ str(auto_gen)
            elif len(str(auto_gen)) < 3:
                auto_gen = '00' + str(auto_gen)
            elif len(str(auto_gen)) == 3:
                auto_gen = '0'+str(auto_gen)
            else:
                auto_gen = str(auto_gen)
            for record in self :
                if temp.group_ref.group_code:
                    style_format[record.id] = temp.group_ref.group_code+str(auto_gen)
                else:                        
                    style_format[record.id] = 'MISC'+str(auto_gen)
                cr.execute('''UPDATE 
                                    product_template 
                              SET 
                                    code = %s 
                              WHERE 
                                    id=%s ''', ((style_format[record.id]),(temp.id),)  )
        return style_format
   
    packingmaterial_name= fields.One2many('packing.material.line','packing_id')
    list_purchase_price = fields.Float(string= 'Purchase Price', default= '1', digits_compute= dp.get_precision('Product Price') ,digits=(6,3))
    group_ref = fields.Many2one('product.group',string= "Product Group/Type of Product")
    remarks= fields.Text(string= 'Remarks')
    code = fields.Char(string='Code',readonly=1)
    specification_attachement= fields.Binary(string= 'Specification Attachment') 
    state = fields.Selection([
		('draft','Draft'),
		('approve','Approved')],default= 'draft')
    code_date = fields.Date(string='Code Date', default= fields.Date.today, required=True)
    code_no = fields.Char('Code Number', compute='_get_auto')
    auto_no = fields.Integer('Auto')
    req_no_control_id1 = fields.Integer('Auto Generating id',default= 0)
    store_qty = fields.Float(string="Store Qty",digits=(6,3),readonly=1)
    hsn_code = fields.Char(string= 'HSN/SAC')
    sale_price= fields.Float('Sales Price')
    
    #added by induja on 20170928 for categorising the products
    categorization = fields.Selection([
		('goods','Goods'),
		('services','Services'),
		('goods_services','Goods and Services')
		],default= 'goods')
    
    _sql_constraints = [
    ('name_group_unique', 'unique(name,group_ref)','Product Name must be Unique With Product Group!')
    ]
    
    _defaults = {
        'sale_price':0.1 
        }
    
    
    
    
    @api.one
    @api.constrains('sale_price')
    def _check_sale_price(self):
        if self.sale_ok:
            if self.sale_price <= 0:
                raise ValidationError(
                    "Sale Minimum Price !!! Can't be Negative OR 0 ")
            
            
    @api.onchange('purchase_ok')
    def onchange_purchase_ok(self):
        if self.purchase_ok :
            self.sale_price = 0.1
    
    
    
    @api.one
    @api.multi
    def check_stock(self):
        cr = self.env.cr
        uid = self.env.uid
        ids = self.ids
        context = 'context'        
        for temp in self:
            cr.execute('''  UPDATE 
                                product_template 
                            SET 
                                store_qty = product_qty 
                            FROM(
                                SELECT 
                                    product_id,
                                    SUM(product_qty) AS product_qty,
                                    id 
                                FROM(
                                    SELECT 
                                        prakruti_stock.product_id,
                                        prakruti_stock.product_qty,
                                        product_template.id 
                                    FROM 
                                        product_template JOIN 
                                        product_product  ON 
                                        product_product.product_tmpl_id = product_template.id JOIN 
                                        prakruti_stock ON 
                                        prakruti_stock.product_id = product_product.id 
                                    WHERE 
                                        product_template.id = %s
                                    )as a GROUP BY product_id,id
                                ) as b 
                            WHERE 
                                b.id = product_template.id''',((temp.id),))
            return {}
  

    def onchange_check_name(self, cr, uid, ids, name, context=None):
        if name == False:
            return {
                'value': {
                    'name': False
                }
            }

        if  name != None:
            name = name.strip()
            name = name.upper()

            return {
                'value': {
                    'name': name
                }
            }

        else:
            warning_shown = {
                'title': _("Warning"),
                'message': _('Enter only numbers and alphabets'),
            }
            return {'value': {
                'name': False
            }, 'warning': warning_shown}
            
    @api.multi
    def action_draft(self):
        self.state = 'draft'

    @api.multi
    def action_approve(self):
        self.state = 'approve'

    
class PackingMaterialLine(models.Model):
    _name= 'packing.material.line'
    _table= 'packing_material_line'
    _description= 'Packing Material Line'
    _order= 'id desc'

    remarks = fields.Text(string= 'Remarks')
    qty = fields.Float(string= 'Qty.', default= '1',digits=(6,3))
    package_name = fields.Char(string= 'Package Name',index= True)
    packing_name = fields.Many2one('product.product',string='Packing Item', ondelete='cascade', domain= "[('group_ref','=', 3)]", no_create= 'True')
    packing_id = fields.Many2one('product.template')


class PrackrutiEmergencyLevel(models.Model):
    _inherit = 'stock.warehouse.orderpoint'
    _table = 'stock_warehouse_orderpoint'
    _description = 'Emergengy Min Qty'
    
    emergency_min_qty = fields.Float(string= "Emergency Quantity" ,digits=(6,3))
