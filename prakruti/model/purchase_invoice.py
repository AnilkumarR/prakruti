'''
Company : EBSL
Author : Karan
Module : Purchase Invoice
Class 1 : PrakrutiPurchaseInvoice
Class 2 : PrakrutiPurchaseInvoiceLine
Table 1 & Reference Id : prakruti_purchase_invoice,invoice_line
Table 2 & Reference Id : prakruti_purchase_invoice_line,invoice_line_id
Updated By : Karan 
Updated Date & Version : 2017/08/23 & 0.1
'''
import openerp
from datetime import date, datetime
from openerp.tools import DEFAULT_SERVER_DATE_FORMAT, image_colorize, image_resize_image_big
from openerp.exceptions import except_orm, Warning as UserError
from openerp import tools
from datetime import timedelta
from openerp.osv import osv,fields
from openerp import models, fields, api, _
from openerp.tools.translate import _
import sys, os, urllib2, urlparse
from email.MIMEText import MIMEText
from email.MIMEImage import MIMEImage
from email.MIMEMultipart import MIMEMultipart
import email, re
from datetime import datetime
from datetime import date, timedelta
from lxml import etree
import cgi
import logging
import lxml.html
import lxml.html.clean as clean
import openerp.pooler as pooler
import random
import re
import socket
import threading
import time
from openerp.tools import image_resize_image_big
from openerp.tools import amount_to_text
from openerp.tools.amount_to_text import amount_to_text_in 
from openerp.tools.amount_to_text import amount_to_text_in_without_word_rupees 

class PrakrutiPurchaseInvoice(models.Model):
    _name =  'prakruti.purchase_invoice'
    _table = 'prakruti_purchase_invoice'
    _description = 'Purchase Invoice'
    _rec_name="purchase_invoice_no"
    _order="id desc" 
    
    '''
    Its an unique autogenerated Number which will be in the format of
    Format : PI\PRODUCT_TYPE\NUMBER\FINANCIAL YEAR
    Example : PI\EXFG\0001\17-18
    Updated By : Karan
    Updated On : 2017/08/23
    Version :0.1
    
    '''    
    @api.one
    @api.multi
    def _get_auto(self):
        style_format = {}
        month_value=0
        year_value=0
        next_year=0
        dispay_year=''
        display_present_year=''
        cr = self.env.cr
        uid = self.env.uid
        ids = self.ids
        for temp in self :
            cr.execute('''SELECT 
                                CAST(EXTRACT(month FROM purchase_invoice_date) AS INTEGER) AS month,
                                CAST(EXTRACT(year FROM purchase_invoice_date) AS INTEGER) AS year,
                                id 
                          FROM 
                                prakruti_purchase_invoice 
                          WHERE 
                                id=%s''',((temp.id),))
            for item in cr.dictfetchall():
                month_value=int(item['month'])
                year_value=int(item['year'])
            if month_value<=3:
                year_value=year_value-1
            else:
                year_value=year_value
            next_year=year_value+1
            dispay_year=str(next_year)[-2:]
            display_present_year=str(year_value)[-2:]
            cr.execute('''SELECT autogenerate_purchase_invoice(%s)''', ((temp.id),)  ) 
            result = cr.dictfetchall()
            parent_invoice_id = 0
            for value in result: parent_invoice_id = value['autogenerate_purchase_invoice'];
            auto_gen = int(parent_invoice_id)
            if len(str(auto_gen)) < 2:
                auto_gen = '000'+ str(auto_gen)
            elif len(str(auto_gen)) < 3:
                auto_gen = '00' + str(auto_gen)
            elif len(str(auto_gen)) == 3:
                auto_gen = '0'+str(auto_gen)
            else:
                auto_gen = str(auto_gen)
            for record in self :
                if temp.purchase_type.group_code:
                    style_format[record.id] ='PI\\'+ temp.purchase_type.group_code+'\\'+str(auto_gen)+'\\'+str(display_present_year)+'-'+str(dispay_year)
                else:                        
                    style_format[record.id] ='PI\\'+str(auto_gen)+'\\'+str(display_present_year)+'-'+str(dispay_year)
                cr.execute('''UPDATE 
                                    prakruti_purchase_invoice 
                              SET 
                                    purchase_invoice_no = %s 
                              WHERE 
                                    id=%s ''', ((style_format[record.id]),(temp.id),)  )
        return style_format
    
    invoice_line = fields.One2many('prakruti.purchase_invoice_line','invoice_line_id')
    purchase_invoice_date=fields.Date(string='Invoice Date',default= fields.Date.today,required=1)
    purchase_invoice_no = fields.Char(string='Invoice No', readonly=1,default='New')
    flag_count_display_product = fields.Integer(default=0)    
    flag_count = fields.Integer('Accepted Line is There',default= 0)
    pur_inv_no = fields.Char('Purchase Invoice Number', compute='_get_auto')    
    auto_no2 = fields.Integer('Auto')
    req_no_control_id2 = fields.Integer('Auto Generating id',default= 0)    
    order_close_flag = fields.Integer('Order Is Closed',default=0,readonly=1)
    invoice_no= fields.Char(string='Invoice No')    
    po_no= fields.Char(string= "Order No.")
    pass_no= fields.Many2one('prakruti.gate_pass',string= "Gate Pass No.")
    pr_no = fields.Char(string='Requisition No')
    qa_no = fields.Char(string='Analysis No')
    qo_no = fields.Char(string='Quotation No')
    req_no =fields.Char(string='Request No')
    vendor_id = fields.Many2one('res.partner',string='Vendor/Supplier')
    vendor_reference = fields.Char(string='Vendor/Supplier Reference' )
    other_reference = fields.Char(string='Other Reference')
    request_date = fields.Date(string = "Requisition Date")
    order_date = fields.Date(string='Order Date')
    destination = fields.Char(string='Destination')
    company_address = fields.Many2one('res.company',string='Company Address')
    delivery_address = fields.Many2one('res.company',string='Dispatch To' )
    payment = fields.Char(string='Mode/Terms of Payments')
    terms_of_delivery = fields.Text(string='Terms of Delivery')
    remarks=fields.Text(string='Remarks')
    dispatch_through = fields.Char(string='Dispatch Through')
    prepared_by = fields.Many2one('res.users','Prepared By')
    maintanence_manager = fields.Many2one('res.users',string="Maintanence Manager")    
    purchase_manager = fields.Many2one('res.users',string="Purchase Manager")
    purchase_type = fields.Many2one('product.group',string= 'Purchase Type')
    pr_common_id = fields.Integer('PR SCREEN COMMON ID')
    grand_total_in_words= fields.Text(string='Total in words')
    prakruti_stock_id = fields.Integer('SCREEN COMMON ID')
    stores_incharge = fields.Many2one('res.users','Stores Incharge')
    gc_no=fields.Char('GC No')
    gc_date=fields.Date('GC Date')
    dc_no=fields.Char('DC No')
    dc_date=fields.Date('DC Date')
    transporter_name=fields.Text('Name of Transporter')
    transporter_payment_details=fields.Text('Transporter Payment Details')
    doc_no=fields.Char('Doc. No')
    rev_no=fields.Char('Rev. No',default='02')
    doc_date=fields.Date('Document Date',default= fields.Date.today)
    order_close_pending = fields.Integer('Still Pending Order',default=0,readonly=1)
    cash_amount = fields.Float(string="Amount" ,digits=(6,3),default=0)
    cash_remarks = fields.Text(string="Remarks")    
    cheque_amount = fields.Float(string="Amount" ,digits=(6,3),default=0)
    cheque_no = fields.Integer(string="Cheque No.")
    cheque_remarks = fields.Text(string="Remarks")    
    draft_amount = fields.Float(string="Amount" ,digits=(6,3),default=0)
    draft_no = fields.Integer(string="Draft No.")
    draft_remarks = fields.Text(string="Remarks") 
    product_id = fields.Many2one('product.product', related='invoice_line.product_id', string='Product Name')
    no_of_product = fields.Integer(string= "No of Products")
    amount_taxed= fields.Float(string='Taxed Amount',digits=(6,3),readonly=1)    
    total_cgst= fields.Float(string='Total CGST',digits=(6,3),readonly=1)
    total_sgst= fields.Float(string='Total SGST',digits=(6,3),readonly=1)
    total_igst= fields.Float(string='Total IGST',digits=(6,3),readonly=1)
    total_gst= fields.Float(string='Total GST',digits=(6,3),readonly=1)
    insurance_charges = fields.Float(string="Insurance Charges" ,digits=(6,3))
    frieght_charges_applied = fields.Selection([('yes','Yes'),('no','No')], string="Freight Charge Applied", default='no')
    frieght_charges = fields.Float(string="Frieght Charges" ,digits=(6,3))
    additional_charges = fields.Float(string='Additional Charges' ,digits=(6,3))
    packing_charges = fields.Float(string='Packing & Forwarding' ,digits=(6,3))
    grand_total= fields.Float(string='Total',digits=(6,3),readonly=1)
    grand_total_after_payments= fields.Float(string='Grand Total',digits=(6,3),readonly=1)
    grand_total_in_words= fields.Text(compute= '_get_total_in_words',string='Total in words')
    total_amount = fields.Float(string='Total Amount',digits=(6,3))
    gst_total_in_words= fields.Text(compute= '_gst_total_in_words',string='GST Total in Words')
    all_additional_charges = fields.Float(string="All Additional Charges",digits=(6,3))#SUM OF all charges like freight_charges
    proportionate_amount_to_products = fields.Float(string="Proportionate Amount to Products",digits=(6,3))
    total_taxable_value = fields.Float(string="Total Taxable",digits=(6,3))
    state = fields.Selection([('invoice','Invoiced'),
                              ('qc_check','QC Check'),                              
                              ('accepted','Accepted'),
                              ('rejected','Rejected'),
                              ('accepted_under_deviation','Accepted Under Deviation'),
                              ('qc_check_done','QC Check Done'),
                              ('done','Done')],default= 'invoice', string= 'Status') 
    status = fields.Selection([('draft','Draft'),
                              ('pending','Pending'),                              
                              ('close','Close')],default= 'draft', string= 'Status')
    any_adv_payment =fields.Selection([
                    ('no', 'No'),
                    ('yes','Yes')
                    ], string= 'Any Advance Payment')
    advance_payment_type =fields.Selection([
                    ('cash', 'CASH'),
                    ('cheque','CHEQUE'),
                    ('demand_draft','DD')
                    ], string= 'Done By')
    
    #added by induja on 20170928 for categorising the products
    categorization = fields.Selection([
		('goods','Goods'),
		('services','Services'),
		('goods_services','Goods and Services')],default= 'goods',string='Category')   
    po_num = fields.Many2one('prakruti.purchase_order',string= "Order Number.")    
    list_in_pi_line=fields.Integer(string= 'Revised Flag') 
    #added by induja on 20171011 for Other details    
    document_no = fields.Char(string ="Document No")
    revision_no = fields.Char(string = "Rev. No")
    default_pr_date = fields.Char(string="Document Date" , default= fields.Date.today)
    plant_manager = fields.Many2one('res.users',string="Plant Manager")
    to_name = fields.Many2one('res.users',string="Name") 
    
    #Now the Invoice will be generated based on the GRN Number
    #Updated on 20171018 by Karan
    grn_id = fields.Many2one('prakruti.grn_inspection_details',string = 'GRN No.')
    
       
    
    def onchange_grn_id(self, cr, uid, ids, grn_id, context=None):
        grn_value = self.pool.get('prakruti.grn_inspection_details').browse(cr, uid, grn_id, context=context)
        result = {
            'list_in_pi_line':grn_value.list_in_pi_line,            
            'po_no':grn_value.po_no,
            'order_date':grn_value.order_date,
            'pr_no':grn_value.pr_no,
            'request_date':grn_value.request_date,
            'vendor_id':grn_value.vendor_id.id,
            'stores_incharge':grn_value.stores_incharge.id,
            'purchase_manager':grn_value.purchase_manager.id,
            'delivery_address':grn_value.delivery_address.id,
            'dispatch_through':grn_value.dispatch_through,
            'purchase_type':grn_value.purchase_type.id,
            'advance_payment_type':grn_value.advance_payment_type,
            'any_adv_payment':grn_value.any_adv_payment,
            'cash_amount':grn_value.cash_amount,
            'cash_remarks':grn_value.cash_remarks,
            'cheque_amount':grn_value.cheque_amount,
            'cheque_no':grn_value.cheque_no,
            'cheque_remarks':grn_value.cheque_remarks,
            'draft_amount':grn_value.draft_amount,
            'draft_no':grn_value.draft_no,
            'draft_remarks':grn_value.draft_remarks,
            'transporter_name':grn_value.transporter_name,
            'insurance_charges':grn_value.insurance_charges,
            'frieght_charges_applied':grn_value.frieght_charges_applied,
            'frieght_charges':grn_value.frieght_charges,
            'packing_charges':grn_value.packing_charges,
            'additional_charges':grn_value.additional_charges,
            'to_name': grn_value.to_name.id,
            'plant_manager':grn_value.plant_manager.id,
            'company_address':grn_value.company_address.id,
            'document_no': grn_value.document_no,
            'revision_no':grn_value.rev_no,
            'default_pr_date':grn_value.default_pr_date 
            }
        return {'value': result} 
    
    
    
    '''
    Default company will be listed
    '''
    @api.model
    def _default_company(self):
        return self.env['res.company']._company_default_get('res.partner') 
    
    _defaults = {
        'list_in_pi_line':0,
        'company_address': _default_company,
        'revise_id': lambda s, cr, uid, c:uid,
        'prepared_by': lambda s, cr, uid, c:uid    
        }
    
    '''
    Strictly not allowing to Delete
    '''
    @api.multi
    def unlink(self):
        raise UserError(_('Can\'t Delete record went to further process'))
        return super(PrakrutiPurchaseInvoice, self).unlink() 
    
    @api.onchange('frieght_charges_applied','frieght_charges')    
    def onchange_freight_charges(self):
        if self.frieght_charges_applied == 'no':
            self.frieght_charges = 0.0

    #################### still pending on 20170928
    def onchange_po_no(self, cr, uid, ids, po_num, context=None):
        process_type = self.pool.get('prakruti.purchase_order').browse(cr, uid, po_num, context=context)
        result = {
            'list_in_pi_line':process_type.list_in_pi_line,
            'order_date':process_type.order_date,
            'pr_no':process_type.pr_no,
            'request_date':process_type.request_date,
            'vendor_id':process_type.vendor_id.id,
            'stores_incharge':process_type.stores_incharge.id,
            'purchase_manager':process_type.purchase_manager.id,
            'delivery_address':process_type.delivery_address.id,
            'dispatch_through':process_type.dispatch_through,
            'purchase_type':process_type.purchase_type.id,
            'advance_payment_type':process_type.advance_payment_type,
            'any_adv_payment':process_type.any_adv_payment,
            'cash_amount':process_type.cash_amount,
            'cash_remarks':process_type.cash_remarks,
            'cheque_amount':process_type.cheque_amount,
            'cheque_no':process_type.cheque_no,
            'cheque_remarks':process_type.cheque_remarks,
            'draft_amount':process_type.draft_amount,
            'draft_no':process_type.draft_no,
            'draft_remarks':process_type.draft_remarks,
            'no_of_product':process_type.no_of_product,
            'amount_taxed':process_type.amount_taxed,
            'total_cgst':process_type.total_cgst,
            'total_sgst':process_type.total_sgst,
            'total_igst':process_type.total_igst,
            'total_gst':process_type.total_gst,
            'insurance_charges':process_type.insurance_charges,
            'frieght_charges_applied':process_type.frieght_charges_applied,
            'frieght_charges':process_type.frieght_charges,
            'packing_charges':process_type.packing_charges,
            'additional_charges':process_type.additional_charges,
            'grand_total':process_type.grand_total,
            'to_name': process_type.to_name.id,
            'plant_manager':process_type.plant_manager.id,
            'company_address':process_type.company_address.id,
            'document_no': process_type.document_no,
            'revision_no':process_type.revision_no,
            'default_pr_date':process_type.default_pr_date, 
            }
        return {'value': result}
                
    '''
    The Final Gst Total In Words which is required for the Prints
    '''
    @api.depends('total_gst')
    def _gst_total_in_words(self):
        for order in self:
            total_gst = val1=0.0
            val1_in_words = ""
            val1 = order.total_gst
            val1_in_words = str(amount_to_text_in_without_word_rupees(round(val1),"Rupee"))
            order.update({                    
                'gst_total_in_words': val1_in_words.upper()
                })
    
    '''
    The Final Grand Total In Words which is required for the Prints
    '''
    @api.depends('grand_total_after_payments')
    def _get_total_in_words(self):
        for order in self:
            grand_total_after_payments = val1 = 0.0
            val1_in_words = ""
            val1 = order.grand_total_after_payments
            val1_in_words = str(amount_to_text_in_without_word_rupees(round(val1),"Rupee"))
            order.update({
                'grand_total_in_words': val1_in_words.upper()
                })
    '''
    It will list the Product List and will update the respected flag
    '''
    @api.one
    @api.multi
    def action_list_products(self):
        cr = self.env.cr
        uid = self.env.uid
        ids = self.ids
        context = 'context'
        for temp in self:
            cr.execute('''  SELECT  
                                product_id,
                                uom_id,
                                description,
                                quantity as recieved_qty,
                                extra_packing,
                                unit_price,
                                packing_style as no_of_packings, 
                                received_per_qty as pack_per_qty, 
                                status,
                                purchase_line_common_id,
                                actual_quantity as quantity,
                                prakruti_grn_inspection_details_line.remarks,
                                inspection_line_id,   
                                hsn_code,
                                discount_id,
                                discount_rate,
                                cgst_id,
                                cgst_rate,
                                sgst_id,
                                sgst_rate,
                                igst_id,
                                igst_rate,
                                taxable_value,
                                taxable_value_after_adding_other
                            FROM 
                                prakruti_grn_inspection_details JOIN 
                                prakruti_grn_inspection_details_line ON 
                                prakruti_grn_inspection_details.id = prakruti_grn_inspection_details_line.inspection_line_id 
                            WHERE 
                                prakruti_grn_inspection_details_line.quantity > 0 AND prakruti_grn_inspection_details_line.inspection_line_id = CAST(%s AS INTEGER)''',((temp.grn_id.id),))
            for item in cr.dictfetchall():
                product_id=item['product_id']
                description =item['description']
                uom_id=item['uom_id']
                quantity=item['quantity']
                recieved_qty=item['recieved_qty']
                no_of_packings=item['no_of_packings']
                pack_per_qty=item['pack_per_qty']
                unit_price=item['unit_price']
                extra_packing=item['extra_packing']
                purchase_line_common_id=item['purchase_line_common_id']
                status=item['status']
                remarks=item['remarks']
                hsn_code= item['hsn_code']
                discount_id=item['discount_id']
                discount_rate=item['discount_rate']
                cgst_id=item['cgst_id']
                cgst_rate=item['cgst_rate']
                sgst_id=item['sgst_id']
                sgst_rate=item['sgst_rate']
                igst_id=item['igst_id']
                igst_rate=item['igst_rate']
                taxable_value=item['taxable_value']
                taxable_value_after_adding_other=item['taxable_value_after_adding_other']
                erp_id = self.pool.get('prakruti.purchase_invoice_line').create(cr,uid, {
                    'product_id':product_id,
                    'description': description,
                    'uom_id': uom_id,
                    'actual_quantity':quantity,
                    'no_of_packings':no_of_packings,
                    'pack_per_qty':pack_per_qty,
                    'extra_packing':extra_packing,
                    'quantity':recieved_qty,              
                    'unit_price': unit_price,
                    'remarks':remarks,
                    'purchase_line_common_id':purchase_line_common_id,
                    'invoice_line_id':temp.id,
                    'hsn_code': hsn_code,
                    'discount_id':discount_id,
                    'discount_rate':discount_rate,
                    'cgst_id':cgst_id,
                    'cgst_rate':cgst_rate,
                    'sgst_id':sgst_id,
                    'sgst_rate':sgst_rate,
                    'igst_id':igst_id,
                    'igst_rate':igst_rate,
                    'taxable_value':taxable_value,
                    'taxable_value_after_adding_other':taxable_value_after_adding_other
                        })
            cr.execute("UPDATE prakruti_purchase_invoice SET flag_count_display_product = 2 WHERE prakruti_purchase_invoice.id = cast(%s as integer)",((temp.id),))
        return {}
    
    '''
    It will delete the Product List and will update the respected flag
    '''
    @api.one
    @api.multi
    def action_delete_products(self):
        cr = self.env.cr
        uid = self.env.uid
        ids = self.ids
        context = 'context'
        for temp in self:
            cr.execute('''DELETE FROM prakruti_purchase_invoice_line WHERE prakruti_purchase_invoice_line.invoice_line_id = (%s)''', ((temp.id),))
            cr.execute("UPDATE prakruti_purchase_invoice SET flag_count =1,flag_count_display_product = 0 WHERE prakruti_purchase_invoice.id = cast(%s as integer)",((temp.id),))
        return {}
    '''
    It will list the Product List and will update the respected flag
    '''
    @api.one
    @api.multi
    def action_list_products_po(self):
        cr = self.env.cr
        uid = self.env.uid
        ids = self.ids
        context = 'context'
        for temp in self:
            cr.execute(''' SELECT prakruti_purchase_line.id, 
                                product_id,
                                uom_id,
                                description,quantity,
                                unit_price,no_of_packings,pack_per_qty,status,prakruti_purchase_line.remarks,subtotal,purchase_line_id,hsn_code,discount_id,discount_rate,discount_value,
                                taxable_value,total,cgst_id,cgst_rate,cgst_value,sgst_id,sgst_rate,sgst_value,igst_id,igst_rate,igst_value,taxable_value_after_adding_other,prakruti_purchase_order.no_of_product,prakruti_purchase_order.packing_charges,prakruti_purchase_order.frieght_charges,prakruti_purchase_order.additional_charges,prakruti_purchase_order.insurance_charges 
                            FROM 
                                prakruti_purchase_order JOIN 
                                prakruti_purchase_line ON 
                                prakruti_purchase_order.id = prakruti_purchase_line.purchase_line_id 
                            WHERE 
                                prakruti_purchase_line.quantity > 0 AND prakruti_purchase_line.purchase_line_id= CAST(%s AS INTEGER)''',((temp.po_num.id),))
            for item in cr.dictfetchall():
                product_id=item['product_id']
                description =item['description']
                uom_id=item['uom_id']
                quantity=item['quantity']
                no_of_packings=item['no_of_packings']
                pack_per_qty=item['pack_per_qty']
                unit_price=item['unit_price']
                purchase_line_common_id=item['id']
                status=item['status']
                remarks=item['remarks']
                hsn_code= item['hsn_code']
                discount_id=item['discount_id']
                discount_rate=item['discount_rate']
                discount_value=item['discount_value']
                taxable_value= item['taxable_value']
                total=item['total']
                cgst_id=item['cgst_id']
                cgst_rate=item['cgst_rate']
                cgst_value= item['cgst_value']
                sgst_id=item['sgst_id']
                sgst_rate=item['sgst_rate']
                sgst_value= item['sgst_value']
                igst_id=item['igst_id']
                igst_rate=item['igst_rate']
                igst_value= item['igst_value']
                taxable_value_after_adding_other=item['taxable_value_after_adding_other']
                erp_id = self.pool.get('prakruti.purchase_invoice_line').create(cr,uid, {
                    'product_id':product_id,
                    'description': description,
                    'uom_id': uom_id,
                    'actual_quantity':quantity,
                    'no_of_packings':no_of_packings,
                    'pack_per_qty':pack_per_qty,
                    'quantity':quantity,
                    'status':status,                     
                    'unit_price': unit_price,
                    'remarks':remarks,
                    'purchase_line_common_id':purchase_line_common_id,
                    'invoice_line_id':temp.id,
                    'hsn_code': hsn_code,
                    'discount_id':discount_id,
                    'discount_rate':discount_rate,
                    'discount_value':discount_value,
                    'taxable_value': taxable_value,
                    'total':total,
                    'cgst_id':cgst_id,
                    'cgst_rate':cgst_rate,
                    'cgst_value': cgst_value,
                    'sgst_id':sgst_id,
                    'sgst_rate':sgst_rate,
                    'sgst_value': sgst_value,
                    'igst_id':igst_id,
                    'igst_rate':igst_rate,
                    'igst_value': igst_value,
                    'taxable_value_after_adding_other':taxable_value_after_adding_other
                        })
            cr.execute("UPDATE prakruti_purchase_invoice SET flag_count_display_product = 1 WHERE prakruti_purchase_invoice.id = cast(%s as integer)",((temp.id),))
        return {}
    
    '''
    It will update the Purchase Order based on the entry done here
    '''
    @api.one
    @api.multi 
    def purchase_invoice_to_purchase_order(self):
        cr = self.env.cr
        uid = self.env.uid
        ids = self.ids
        context = 'context'        
        for temp in self:
            cr = self.env.cr
            uid = self.env.uid
            ids = self.ids
            context = {}
            if temp.prepared_by:
                for line in temp.invoice_line:
                    if temp.list_in_pi_line == 2 :
                        if (line.quantity < line.actual_quantity) and line.status == 'close':
                            if line.remarks:
                                cr.execute(''' SELECT purchase_invoice_to_purchase_order_upper_po(%s,%s) ''',((temp.id),(temp.po_num.id),))
                            else:
                                raise UserError(_('Please Enter Remarks for Manual Closing'))
                        elif (line.quantity >= line.actual_quantity):
                            if line.status == 'close':
                                cr.execute(''' SELECT purchase_invoice_to_purchase_order_lower_po(%s,%s) ''',((temp.id),(temp.po_num.id),))
                            else:
                                raise UserError(_('Please Close the Status Since the Quantity is fully Received...'))
                    else:
                        if (line.quantity < line.actual_quantity) and line.status == 'close':
                            if line.remarks:
                                cr.execute(''' SELECT purchase_invoice_to_purchase_order_upper(%s,%s,%s) ''',((temp.id),(temp.po_no),(temp.grn_id.id),))
                            else:
                                raise UserError(_('Please Enter Remarks for Manual Closing'))
                        elif (line.quantity >= line.actual_quantity):
                            if line.status == 'close':
                                cr.execute(''' SELECT purchase_invoice_to_purchase_order_lower(%s,%s,%s) ''',((temp.id),(temp.po_no),(temp.grn_id.id),))
                            else:
                                raise UserError(_('Please Close the Status Since the Quantity is fully Received...'))
                        #template_id = self.pool.get('email.template').search(cr,uid,[('name','=','Purchase Invoice')],context=context)[0]
                        #email_obj = self.pool.get('email.template').send_mail(cr, uid, template_id,ids[0],force_send=True)
            else:
                raise UserError(_('Prepared By Entry Is Missing...'))
        return True
    
    
    
    '''
    It will calculate all the Values
    '''
    @api.one
    @api.multi
    def calculate_total(self):
        cr = self.env.cr
        uid = self.env.uid
        ids = self.ids
        context = 'context'
        for temp in self:
            if temp.flag_count_display_product == 1 or temp.flag_count_display_product == 2:
                cr.execute(''' SELECT calculation_purchase_invoice(%s)''',((temp.id),))
            else:
                raise except_orm(_('Error'),('Please List Out The Products..'))
        return {} 
    
class PrakrutiPurchaseInvoiceLine(models.Model):
    _name = 'prakruti.purchase_invoice_line'
    _table = 'prakruti_purchase_invoice_line'
    _description = 'Purchase Invoice Line'
    
    invoice_line_id = fields.Many2one('prakruti.purchase_invoice', ondelete='cascade')    
    product_id = fields.Many2one('product.product',string='Product',required=True, readonly=1)   
    description = fields.Text(string='Description', readonly=1)
    scheduled_date =fields.Datetime(string='Due On')
    quantity = fields.Float(string='Received Quantity',store=True ,digits=(6,3))
    actual_quantity = fields.Float(string='Quantity', readonly=1 ,digits=(6,3))
    unit_price = fields.Float(string='Unit price' ,digits=(6,3))
    uom_id = fields.Many2one('product.uom',string='UOM', readonly=1)
    prakruti_stock_id = fields.Integer('SCREEN COMMON ID')
    remarks = fields.Text('Remarks')
    no_of_packings= fields.Float(string= "No. of Packings" ,digits=(6,3))
    pack_per_qty= fields.Float(string= "Packing Per. Qty." ,digits=(6,3))
    extra_packing= fields.Float(string= "(+)Extra Packing",default=0 ,digits=(6,3))
    accepted_qty = fields.Float('Accepted Qty.', readonly=True ,digits=(6,3))
    rejected_qty = fields.Float('Rejected Qty.', readonly=True ,digits=(6,3))
    batch_no = fields.Char('Batch No.')
    purchase_line_common_id = fields.Integer(string="Purchase Line ID")
    hsn_code = fields.Char(string='HSN/SAC',readonly=1)
    discount_id = fields.Many2one('account.other.tax',string= 'Discount(%)',domain=[('select_type', '=', 'discount')])
    discount_rate = fields.Float(string= 'Discount(%)',default=0)
    discount_value = fields.Float(string= 'Discount Amount',digits=(6,3),readonly=1) 
    taxable_value = fields.Float(string= 'Taxable Value',digits=(6,3),readonly=1)
    total= fields.Float(string='Total',digits=(6,3),readonly=1)
    cgst_id = fields.Many2one('account.other.tax',string= 'CGST Rate',domain=[('select_type', '=', 'cgst')])
    cgst_rate = fields.Float(related='cgst_id.per_amount',string= 'CGST Rate',default=0,store=1)
    cgst_value = fields.Float(string= 'CGST Amount',digits=(6,3),readonly=1)
    sgst_id = fields.Many2one('account.other.tax',string= 'SGST Rate',domain=[('select_type', '=', 'sgst')])
    sgst_rate = fields.Float(related='sgst_id.per_amount',string= 'SGST Rate',default=0,store=1)
    sgst_value = fields.Float(string= 'SGST Amount',digits=(6,3),readonly=1) 
    igst_id = fields.Many2one('account.other.tax',string= 'IGST Rate',domain=[('select_type', '=', 'igst')])
    igst_rate = fields.Float(related='igst_id.per_amount',string= 'IGST Rate',default=0,store=1)
    igst_value = fields.Float(string= 'IGST Amount',digits=(6,3),readonly=1) 
    taxable_value_after_adding_other= fields.Float(string='Taxable Value After Adding Other Charges',digits=(6,3),readonly=1)
    subtotal = fields.Float(string= 'Sub Total',digits=(6,3),readonly=1)
    status = fields.Selection([
        ('open','Open'),
        ('close','Close')],default = 'open',string= 'Status')