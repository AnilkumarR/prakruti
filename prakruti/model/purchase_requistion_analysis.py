'''
Company : EBSL
Author : Karan
Module : Purchase Requisition Analysis
Class 1 : PrakrutiPurchaseRequistionAnalysis
Class 2 : PurchaseRequisitionAnalysisLine
Table 1 & Reference Id : prakruti_purchase_requistion_analysis,requistion_order_line
Table 2 & Reference Id : prakruti_purchase_requistion_analysis_line,requistion_line_id
Updated By : Karan 
Updated Date & Version : 2017/08/21 & 0.1
'''

import time
import openerp
from datetime import date, datetime
from openerp import models, fields, api
from openerp.tools import DEFAULT_SERVER_DATE_FORMAT, image_colorize, image_resize_image_big
from openerp.exceptions import except_orm, Warning as UserError
from openerp import tools
from openerp.tools.translate import _
from datetime import timedelta



class PrakrutiPurchaseRequistionAnalysis(models.Model):
    _name = 'prakruti.purchase_requistion_analysis'
    _table = 'prakruti_purchase_requistion_analysis'
    _description = 'Purchase Requisition Analysis'
    _rec_name = 'analysis_no'
    _order="id desc" 
    
    '''
    Its an unique autogenerated requisition Number which will be in the format of
    Format : PRA\PRODUCT_TYPE\NUMBER\FINANCIAL YEAR
    Example : PRA\EXFG\0001\17-18
    Updated By : Karan
    Updated On : 2017/08/21
    Version :0.1
    
    '''
    
    @api.one
    @api.multi
    def _get_auto(self):
        style_format = {}
        month_value=0
        year_value=0
        next_year=0
        dispay_year=''
        display_present_year=''
        cr = self.env.cr
        uid = self.env.uid
        ids = self.ids
        for temp in self :
            cr.execute('''SELECT 
                                CAST(EXTRACT(month FROM inquiry_date) AS INTEGER) AS month,
                                CAST(EXTRACT(year FROM inquiry_date) AS INTEGER) AS year,
                                id 
                          FROM 
                                prakruti_purchase_requistion_analysis 
                          WHERE 
                                id=%s''',((temp.id),))
            for item in cr.dictfetchall():
                month_value=int(item['month'])
                year_value=int(item['year'])
            if month_value<=3:
                year_value=year_value-1
            else:
                year_value=year_value
            next_year=year_value+1
            dispay_year=str(next_year)[-2:]
            display_present_year=str(year_value)[-2:]
            cr.execute('''SELECT autogenerate_purchase_requistion_analysis(%s)''', ((temp.id),)  ) 
            result = cr.dictfetchall()
            parent_invoice_id = 0
            for value in result: parent_invoice_id = value['autogenerate_purchase_requistion_analysis'];
            auto_gen = int(parent_invoice_id)
            if len(str(auto_gen)) < 2:
                auto_gen = '000'+ str(auto_gen)
            elif len(str(auto_gen)) < 3:
                auto_gen = '00' + str(auto_gen)
            elif len(str(auto_gen)) == 3:
                auto_gen = '0'+str(auto_gen)
            else:
                auto_gen = str(auto_gen)
            for record in self :
                if temp.purchase_type.group_code:
                    style_format[record.id] ='PRA\\'+ temp.purchase_type.group_code+'\\'+str(auto_gen)+'\\'+str(display_present_year)+'-'+str(dispay_year)
                else:                        
                    style_format[record.id] ='PRA\\'+str(auto_gen)+'\\'+str(display_present_year)+'-'+str(dispay_year)
                cr.execute('''UPDATE 
                                    prakruti_purchase_requistion_analysis 
                              SET 
                                    analysis_no = %s 
                              WHERE 
                                    id=%s ''', ((style_format[record.id]),(temp.id),)  )
        return style_format  
    
    requistion_order_line = fields.One2many('prakruti.purchase_requistion_analysis_line','requistion_line_id',string="Please Enter Some Product")
    request_date = fields.Datetime(string = "Requisition Date")
    inquiry_date = fields.Date(string = "Analysis Date", default= fields.Date.today)    
    analysis_no = fields.Char(string = "Analysis No", readonly=True)    
    request_no = fields.Char(string = "Requisition No", readonly=True)
    terms_and_conditions = fields.Text(string = "Terms and Conditions")
    prepared_by = fields.Many2one('res.users','Prepared By', readonly=True)
    approved_by = fields.Many2one('res.users','Approved By', readonly=True)
    stores_incharge = fields.Many2one('res.users',string="Stores Incharge")
    remarks = fields.Text(string="Remarks")
    purchase_type = fields.Many2one('product.group',string= 'Purchase Type')
    inq_no = fields.Char('Analysis Number', compute='_get_auto', readonly=True)
    auto_no = fields.Integer('Auto')
    req_no_control_id = fields.Integer('Auto Generating id',default= 0)    
    validate_flag = fields.Integer('CHECK FLAG',default= 0)
    to_name = fields.Many2one('res.users',string="To") 
    product_id = fields.Many2one('product.product', related='requistion_order_line.product_id', string='Product Name')
    approved_date = fields.Datetime(string = "Approve Date")
    revise_status = fields.Selection([('revise_requisition','Revise Requisition'),('revise_done','Revise Done')],string= 'Revise Status')
    revise_no = fields.Integer(string= '# Of Revision',default=0,readonly=1)
    is_revise = fields.Boolean(string= 'Is Revised',default=0,readonly=1)
    revise_remarks = fields.Text(string= 'Revise Remarks')
    revise_remarks_update = fields.Text(string= 'All Revise Updates',readonly=1,default='-')
    revise_id = fields.Many2one('res.users',string = 'Revised Done By')
    coming_from = fields.Char(string= 'Coming From',readonly=1)
    revise_flag = fields.Integer(string= 'Revise Flag',default=0,readonly=1)     
    state = fields.Selection([
                ('requisition_analysis','Requisition Analysis Draft'),
                ('partial_analysis','Requisition Partially Analyzed'),
                ('request','Purchase Price Request'),
                ('quotation','Purchase Quotation'),
                ('analysis','Purchase Quotation Analysis'),
                ('order','Purchase Order'),
                ('rejected','Purchase Order Rejected'),
                ('confirm','Purchase Order Confirmed')],default= 'requisition_analysis', string= 'Status') 
    
    #added by induja on 20170928 for categorising the products
    categorization = fields.Selection([
		('goods','Goods'),
		('services','Services'),
		('goods_services','Goods and Services')],default= 'goods')
    #added by induja on 20171011 for Other details
    
    document_no = fields.Char(string ="Document No" , default='PPPL-PUR-F-004' , readonly=1)
    revision_no = fields.Char(string = "Rev. No", default='01' , readonly=1)
    default_pr_date = fields.Char(string="Document Date" , default= fields.Date.today , readonly=1)
    plant_manager = fields.Many2one('res.users',string="Plant Manager",readonly=True)
    purchase_manager = fields.Many2one('res.users',string="Purchase Manager",readonly=True)
    company_id = fields.Many2one('res.company',string='Company',default=lambda self: self.env.user.company_id)
    
    
    
    _defaults = {
        'analysis_no':'New',
        'request_no':'Direct Request',
        'prepared_by': lambda s, cr, uid, c:uid,
        'approved_by': lambda s, cr, uid, c:uid,
        'revise_id': lambda s, cr, uid, c:uid        
        }
    
    '''
    Strictly Cannot be Deleted
    '''
    @api.multi
    def unlink(self):
        for order in self:
            raise UserError(_('Can\'t Delete'))
        return super(PrakrutiPurchaseRequistionAnalysis, self).unlink()    
    
    '''
    Pulling Data from Requisition Analysis To Price Request
    '''
    @api.one
    @api.multi
    def action_price_request(self): 
        vendor = 0
        cr = self.env.cr
        uid = self.env.uid
        ids = self.ids
        context = 'context'        
        for temp in self:
            cr = self.env.cr
            uid = self.env.uid
            ids = self.ids
            context = {}
            cr.execute(''' SELECT count(id) as status_line FROM prakruti_purchase_requistion_analysis_line WHERE (status = 'approved' OR status = 'rejected' OR status = 'hold') AND requistion_line_id = %s''',((temp.id),))
            for no_of_line in cr.dictfetchall():
                status_line = int(no_of_line['status_line'])
            if status_line == len(temp.requistion_order_line):
                if temp.state == 'requisition_analysis':
                    cr.execute('''select DISTINCT vendor_id from prakruti_purchase_requistion_analysis_line where requistion_line_id = %s and status='approved' and send_status = 0 ''', ((temp.id),))
                    for vendor in cr.dictfetchall():
                        vendor=vendor['vendor_id']
                        print '----------------------------------------------------------VENDOR NAMES ARE---------------------------------------------------------',vendor
                        
                        ebsl_id = self.pool.get('prakruti.price_request').create(cr,uid, {
                            'inquiry_no': 'From Requisition Analysis',
                            'request_date':temp.request_date,
                            'purchase_type':temp.purchase_type.id,
                            'request_no':temp.request_no,
                            'remarks':temp.remarks,
                            'terms_and_conditions':temp.terms_and_conditions,
                            'purchase_manager':temp.prepared_by.id,
                            'maintanence_manager':temp.prepared_by.id,
                            'categorization':temp.categorization,
                            'to_name':temp.to_name.id,
                            'plant_manager':temp.plant_manager.id,
                            'company_id':temp.company_id.id,
                            'stores_incharge':temp.stores_incharge.id,
                            'purchase_manager':temp.purchase_manager.id,
                            'document_no':temp.document_no,
                            'revision_no':temp.revision_no,
                            'default_pr_date':temp.default_pr_date,
                            'coming_from':'Requisition Analysis'
                            })
                        erp_id = self.pool.get('prakruti.vendor_list_line').create(cr,uid, {
                            'vendor_id':vendor,
                            'vendor_line_id': ebsl_id
                        })                    
                        for item in temp.requistion_order_line:
                            if (item.status == 'approved' and item.send_status==0 and vendor == item.vendor_id.id):
                                erp_id = self.pool.get('prakruti.price_request_line').create(cr,uid, {
                                    'product_id': item.product_id.id,
                                    'description': item.description,
                                    'quantity_req': item.quantity_req,
                                    'uom_id': item.uom_id.id,
                                    'required_date': item.required_date,
                                    'remarks': item.remarks,
                                    'last_price':item.last_price,
                                    'last_purchase_date':item.last_purchase_date,
                                    'last_purchase_vendor_id':item.last_purchase_vendor_id.id,
                                    'hsn_code':item.hsn_code,
                                    'requisition_line_id':item.requisition_line_id,
                                    'slip_id':item.slip_id.id,
                                    'request_line_id': ebsl_id
                                    })                                            
                                cr.execute("UPDATE  prakruti_purchase_requistion_analysis_line SET send_status = 1,send_to = 'Price Request',short_close_status = 'No' WHERE requistion_line_id = cast(%s as integer) and status = 'approved' AND send_status = 0",((temp.id),))
                    #When some are kept in hold
                    cr.execute("select count(id) as hold_line  from prakruti_purchase_requistion_analysis_line where requistion_line_id=%s AND status = 'hold' ",((temp.id),))
                    for line in cr.dictfetchall():
                        hold_line=line['hold_line'] 
                    if hold_line:                                            
                        cr.execute("UPDATE  prakruti_purchase_requistion_analysis SET state = 'partial_analysis' WHERE prakruti_purchase_requistion_analysis.id = cast(%s as integer)",((temp.id),))
                        cr.execute("UPDATE  prakruti_purchase_requisition SET state = 'partial_analysis' WHERE prakruti_purchase_requisition.requisition_no = %s",((temp.request_no),))
                        cr.execute("UPDATE  prakruti_purchase_requisition_approve SET state = 'partial_analysis' WHERE prakruti_purchase_requisition_approve.requisition_no = %s",((temp.request_no),))
                    else:                                            
                        cr.execute("UPDATE  prakruti_purchase_requistion_analysis SET state = 'request' WHERE prakruti_purchase_requistion_analysis.id = cast(%s as integer)",((temp.id),))
                        cr.execute("UPDATE  prakruti_purchase_requisition SET state = 'request' WHERE prakruti_purchase_requisition.requisition_no = %s",((temp.request_no),))
                        cr.execute("UPDATE  prakruti_purchase_requisition_approve SET state = 'request' WHERE prakruti_purchase_requisition_approve.requisition_no = %s",((temp.request_no),))
                    #When All are Rejected
                    cr.execute("select count(id) as no_of_rejectedline  from prakruti_purchase_requistion_analysis_line where requistion_line_id=%s AND status = 'rejected' ",((temp.id),))
                    for line in cr.dictfetchall():
                        no_of_rejectedline=line['no_of_rejectedline'] 
                    cr.execute("select count(id) as total_line  from prakruti_purchase_requistion_analysis_line where requistion_line_id=%s  ",((temp.id),))
                    for line in cr.dictfetchall():
                        total_line=line['total_line']
                    if total_line == no_of_rejectedline:                                            
                        cr.execute("UPDATE  prakruti_purchase_requistion_analysis SET state = 'rejected' WHERE prakruti_purchase_requistion_analysis.id = cast(%s as integer)",((temp.id),))
                        cr.execute("UPDATE  prakruti_purchase_requisition SET state = 'rejected' WHERE prakruti_purchase_requisition.requisition_no = %s",((temp.request_no),))
                        cr.execute("UPDATE  prakruti_purchase_requisition_approve SET state = 'rejected' WHERE prakruti_purchase_requisition_approve.requisition_no = %s",((temp.request_no),))
                elif temp.state == 'partial_analysis' or temp.state == 'partial_confirm':
                    cr.execute('''select DISTINCT vendor_id from prakruti_purchase_requistion_analysis_line where requistion_line_id = %s and status='approved' and send_status = 0 ''', ((temp.id),))
                    for vendor in cr.dictfetchall():
                        vendor=vendor['vendor_id']
                        print '----------------------------------------------------------VENDOR NAMES ARE---------------------------------------------------------',vendor
                        
                        ebsl_id = self.pool.get('prakruti.price_request').create(cr,uid, {
                            'inquiry_no': 'From Requisition Analysis',
                            'request_date':temp.request_date,
                            'purchase_type':temp.purchase_type.id,
                            'request_no':temp.request_no,
                            'remarks':temp.remarks,
                            'terms_and_conditions':temp.terms_and_conditions,
                            'purchase_manager':temp.prepared_by.id,
                            'stores_incharge':temp.stores_incharge.id,
                            'maintanence_manager':temp.prepared_by.id,
                            'categorization':temp.categorization,
                            'to_name':temp.to_name.id,
                            'plant_manager':temp.plant_manager.id,
                            'purchase_manager':temp.purchase_manager.id,
                            'document_no':temp.document_no,
                            'revision_no':temp.revision_no,
                            'company_id':temp.company_id.id,
                            'default_pr_date':temp.default_pr_date,
                            'coming_from':'Requisition Analysis'
                            })
                        erp_id = self.pool.get('prakruti.vendor_list_line').create(cr,uid, {
                            'vendor_id':vendor,
                            'vendor_line_id': ebsl_id
                        })                    
                        for item in temp.requistion_order_line:
                            if (item.status == 'approved' and item.send_status==0 and vendor == item.vendor_id.id):
                                erp_id = self.pool.get('prakruti.price_request_line').create(cr,uid, {
                                    'product_id': item.product_id.id,
                                    'description': item.description,
                                    'quantity_req': item.quantity_req,
                                    'uom_id': item.uom_id.id,
                                    'required_date': item.required_date,
                                    'remarks': item.remarks,
                                    'last_price':item.last_price,
                                    'last_purchase_date':item.last_purchase_date,
                                    'last_purchase_vendor_id':item.last_purchase_vendor_id.id,
                                    'hsn_code':item.hsn_code,
                                    'requisition_line_id':item.requisition_line_id,
                                    'slip_id':item.slip_id.id,
                                    'request_line_id': ebsl_id
                                    })                                            
                                cr.execute("UPDATE  prakruti_purchase_requistion_analysis_line SET send_status = 1,send_to= 'Price Request',short_close_status = 'No' WHERE requistion_line_id = cast(%s as integer) and status = 'approved' AND send_status = 0",((temp.id),))
                    #When some are kept in hold
                    cr.execute("select count(id) as hold_line  from prakruti_purchase_requistion_analysis_line where requistion_line_id=%s AND status = 'hold' ",((temp.id),))
                    for line in cr.dictfetchall():
                        hold_line=line['hold_line'] 
                    if hold_line:                                            
                        cr.execute("UPDATE  prakruti_purchase_requistion_analysis SET state = 'partial_analysis' WHERE prakruti_purchase_requistion_analysis.id = cast(%s as integer)",((temp.id),))
                        cr.execute("UPDATE  prakruti_purchase_requisition SET state = 'partial_analysis' WHERE prakruti_purchase_requisition.requisition_no = %s",((temp.request_no),))
                        cr.execute("UPDATE  prakruti_purchase_requisition_approve SET state = 'partial_analysis' WHERE prakruti_purchase_requisition_approve.requisition_no = %s",((temp.request_no),))
                    else:                                            
                        cr.execute("UPDATE  prakruti_purchase_requistion_analysis SET state = 'request' WHERE prakruti_purchase_requistion_analysis.id = cast(%s as integer)",((temp.id),))
                        cr.execute("UPDATE  prakruti_purchase_requisition SET state = 'request' WHERE prakruti_purchase_requisition.requisition_no = %s",((temp.request_no),))
                        cr.execute("UPDATE  prakruti_purchase_requisition_approve SET state = 'request' WHERE prakruti_purchase_requisition_approve.requisition_no = %s",((temp.request_no),))
            else:
                raise UserError(_('Please Select Status For The Products'))
            #template_id = self.pool.get('email.template').search(cr,uid,[('name','=','Purchase Analysis')],context=context)[0]
            #email_obj = self.pool.get('email.template').send_mail(cr, uid, template_id,ids[0],force_send=True) 
        return {}    
    
    '''
    Pulling Data from Requisition Analysis To Purchase Order
    '''    
    @api.one
    @api.multi
    def req_analysis_to_order(self):
        cr = self.env.cr
        uid = self.env.uid
        ids = self.ids
        context = 'context'        
        for temp in self:
            cr = self.env.cr
            uid = self.env.uid
            ids = self.ids
            context = {}
            cr.execute(''' SELECT count(id) as status_line FROM prakruti_purchase_requistion_analysis_line WHERE (status = 'approved' OR status = 'rejected' OR status = 'hold') AND requistion_line_id = %s''',((temp.id),))
            for no_of_line in cr.dictfetchall():
                status_line = int(no_of_line['status_line'])
            if status_line == len(temp.requistion_order_line):
                if temp.state == 'requisition_analysis':
                    cr.execute('''select DISTINCT vendor_id from prakruti_purchase_requistion_analysis_line where requistion_line_id = %s and status='approved' and send_status = 0 ''', ((temp.id),))
                    for vendor in cr.dictfetchall():
                        vendor=vendor['vendor_id']
                        print '----------------------------------------------------------VENDOR NAMES ARE---------------------------------------------------------',vendor
                        
                        ebsl_id = self.pool.get('prakruti.purchase_order').create(cr,uid, {
                            'pr_no':temp.request_no,
                            'po_no':'From Requisition Analysis',
                            'qa_no':'From Requisition Analysis',
                            'qo_no':'From Requisition Analysis',
                            'req_no':'From Requisition Analysis',
                            'request_date':temp.request_date,
                            'purchase_type':temp.purchase_type.id,
                            'state': 'order',
                            'vendor_id':vendor,
                            'purchase_manager':temp.prepared_by.id,
                            'stores_incharge':temp.stores_incharge.id,
                            'maintanence_manager':temp.prepared_by.id,
                            'categorization':temp.categorization,
                            'to_name':temp.to_name.id,
                            'plant_manager':temp.plant_manager.id,
                            'purchase_manager':temp.purchase_manager.id,
                            'document_no':temp.document_no,
                            'revision_no':temp.revision_no,
                            'default_pr_date':temp.default_pr_date,
                            'remarks':temp.remarks,
                            'company_address':temp.company_id.id,
                            'coming_from':'Requisition Analysis'
                            })
                        for item in temp.requistion_order_line:
                            if (item.status == 'approved' and item.send_status==0 and vendor == item.vendor_id.id) :
                                erp_id = self.pool.get('prakruti.purchase_line').create(cr,uid, {
                                    'product_id': item.product_id.id,
                                    'description': item.description,
                                    'quantity': item.quantity_req,
                                    'balance_qty': item.quantity_req,
                                    'uom_id': item.uom_id.id,
                                    'scheduled_date':item.required_date,
                                    'required_date': item.required_date,
                                    'remarks': item.remarks,
                                    'hsn_code':item.hsn_code,
                                    'requisition_line_id':item.requisition_line_id,
                                    'slip_id':item.slip_id.id,
                                    'purchase_line_id': ebsl_id
                                    })                                            
                                cr.execute("UPDATE  prakruti_purchase_requistion_analysis_line SET send_status = 1,send_to = 'Purchase Order',short_close_status = 'No' WHERE requistion_line_id = cast(%s as integer) and status = 'approved' AND send_status = 0",((temp.id),))
                    #When some are kept in hold
                    cr.execute("select count(id) as hold_line  from prakruti_purchase_requistion_analysis_line where requistion_line_id=%s AND status = 'hold' ",((temp.id),))
                    for line in cr.dictfetchall():
                        hold_line=line['hold_line'] 
                    if hold_line:                                            
                        cr.execute("UPDATE  prakruti_purchase_requistion_analysis SET state = 'partial_analysis' WHERE prakruti_purchase_requistion_analysis.id = cast(%s as integer)",((temp.id),))
                        cr.execute("UPDATE  prakruti_purchase_requisition SET state = 'partial_analysis' WHERE prakruti_purchase_requisition.requisition_no = %s",((temp.request_no),))
                        cr.execute("UPDATE  prakruti_purchase_requisition_approve SET state = 'partial_analysis' WHERE prakruti_purchase_requisition_approve.requisition_no = %s",((temp.request_no),))
                    else:                                            
                        cr.execute("UPDATE  prakruti_purchase_requistion_analysis SET state = 'order' WHERE prakruti_purchase_requistion_analysis.id = cast(%s as integer)",((temp.id),))
                        cr.execute("UPDATE  prakruti_purchase_requisition SET state = 'order' WHERE prakruti_purchase_requisition.requisition_no = %s",((temp.request_no),))
                        cr.execute("UPDATE  prakruti_purchase_requisition_approve SET state = 'order' WHERE prakruti_purchase_requisition_approve.requisition_no = %s",((temp.request_no),))
                    #When All are Rejected
                    cr.execute("select count(id) as no_of_rejectedline  from prakruti_purchase_requistion_analysis_line where requistion_line_id=%s AND status = 'rejected' ",((temp.id),))
                    for line in cr.dictfetchall():
                        no_of_rejectedline=line['no_of_rejectedline'] 
                    cr.execute("select count(id) as total_line  from prakruti_purchase_requistion_analysis_line where requistion_line_id=%s  ",((temp.id),))
                    for line in cr.dictfetchall():
                        total_line=line['total_line']
                    if total_line == no_of_rejectedline:                                            
                        cr.execute("UPDATE  prakruti_purchase_requistion_analysis SET state = 'rejected' WHERE prakruti_purchase_requistion_analysis.id = cast(%s as integer)",((temp.id),))
                        cr.execute("UPDATE  prakruti_purchase_requisition SET state = 'rejected' WHERE prakruti_purchase_requisition.requisition_no = %s",((temp.request_no),))
                        cr.execute("UPDATE  prakruti_purchase_requisition_approve SET state = 'rejected' WHERE prakruti_purchase_requisition_approve.requisition_no = %s",((temp.request_no),))
                elif temp.state == 'partial_analysis' or temp.state == 'partial_confirm':
                    cr.execute('''select DISTINCT vendor_id from prakruti_purchase_requistion_analysis_line where requistion_line_id = %s and status='approved' and send_status = 0 ''', ((temp.id),))
                    for vendor in cr.dictfetchall():
                        vendor=vendor['vendor_id']
                        print '----------------------------------------------------------VENDOR NAMES ARE---------------------------------------------------------',vendor
                        
                        ebsl_id = self.pool.get('prakruti.purchase_order').create(cr,uid, {
                            'pr_no':temp.request_no,
                            'po_no':'From Requisition Analysis',
                            'qa_no':'From Requisition Analysis',
                            'qo_no':'From Requisition Analysis',
                            'req_no':'From Requisition Analysis',
                            'request_date':temp.request_date,
                            'purchase_type':temp.purchase_type.id,
                            'state': 'order',
                            'vendor_id':vendor,
                            'purchase_manager':temp.prepared_by.id,
                            'stores_incharge':temp.stores_incharge.id,
                            'maintanence_manager':temp.prepared_by.id,
                            'categorization':temp.categorization,
                            'to_name':temp.to_name.id,
                            'plant_manager':temp.plant_manager.id,
                            'purchase_manager':temp.purchase_manager.id,
                            'document_no':temp.document_no,
                            'revision_no':temp.revision_no,
                            'default_pr_date':temp.default_pr_date,
                            'remarks':temp.remarks,
                            'company_address':temp.company_id.id,
                            'coming_from':'Requisition Analysis'
                            })
                        for item in temp.requistion_order_line:
                            if (item.status == 'approved' and item.send_status==0 and vendor == item.vendor_id.id) :
                                erp_id = self.pool.get('prakruti.purchase_line').create(cr,uid, {
                                    'product_id': item.product_id.id,
                                    'description': item.description,
                                    'quantity': item.quantity_req,
                                    'balance_qty': item.quantity_req,
                                    'uom_id': item.uom_id.id,
                                    'scheduled_date':item.required_date,
                                    'remarks': item.remarks,
                                    'hsn_code':item.hsn_code,
                                    'requisition_line_id':item.requisition_line_id,
                                    'slip_id':item.slip_id.id,
                                    'purchase_line_id': ebsl_id
                                    })                                            
                                cr.execute("UPDATE  prakruti_purchase_requistion_analysis_line SET send_status = 1,send_to = 'Purchase Order',short_close_status = 'No' WHERE requistion_line_id = cast(%s as integer) and status = 'approved' AND send_status = 0",((temp.id),))
                    #When some are kept in hold
                    cr.execute("select count(id) as hold_line  from prakruti_purchase_requistion_analysis_line where requistion_line_id=%s AND status = 'hold' ",((temp.id),))
                    for line in cr.dictfetchall():
                        hold_line=line['hold_line'] 
                    if hold_line:                                            
                        cr.execute("UPDATE  prakruti_purchase_requistion_analysis SET state = 'partial_analysis' WHERE prakruti_purchase_requistion_analysis.id = cast(%s as integer)",((temp.id),))
                        cr.execute("UPDATE  prakruti_purchase_requisition SET state = 'partial_analysis' WHERE prakruti_purchase_requisition.requisition_no = %s",((temp.request_no),))
                        cr.execute("UPDATE  prakruti_purchase_requisition_approve SET state = 'partial_analysis' WHERE prakruti_purchase_requisition_approve.requisition_no = %s",((temp.request_no),))
                    else:                                            
                        cr.execute("UPDATE  prakruti_purchase_requistion_analysis SET state = 'order' WHERE prakruti_purchase_requistion_analysis.id = cast(%s as integer)",((temp.id),))
                        cr.execute("UPDATE  prakruti_purchase_requisition SET state = 'order' WHERE prakruti_purchase_requisition.requisition_no = %s",((temp.request_no),))
                        cr.execute("UPDATE  prakruti_purchase_requisition_approve SET state = 'order' WHERE prakruti_purchase_requisition_approve.requisition_no = %s",((temp.request_no),))
            else:
                raise UserError(_('Please Select Status For The Products'))  
            #template_id = self.pool.get('email.template').search(cr,uid,[('name','=','Purchase Analysis Order')],context=context)[0]
            #email_obj = self.pool.get('email.template').send_mail(cr, uid, template_id,ids[0],force_send=True)          
        return {}
    
    '''
    Keeping a copy of the existing record whenever this button is pressed
    '''
    @api.one
    @api.multi
    def revise_requisition(self):
        cr = self.env.cr
        uid = self.env.uid
        ids = self.ids
        context = 'context'
        for temp in self:
            ebsl_id = self.pool.get('prakruti.purchase_requistion_analysis').create(cr,uid, {
                'request_date':temp.request_date,
                'inquiry_date':temp.inquiry_date,
                'analysis_no':temp.analysis_no,
                'request_no':temp.request_no,
                'terms_and_conditions':temp.terms_and_conditions,
                'prepared_by':temp.prepared_by.id,
                'approved_by':temp.approved_by.id,
                'stores_incharge':temp.stores_incharge.id,
                'remarks':temp.remarks,
                'purchase_type':temp.purchase_type.id,
                'state':temp.state,
                'validate_flag':temp.validate_flag,
                'to_name':temp.to_name.id,
                'product_id':temp.product_id.id,
                'approved_date':temp.approved_date,
                'revise_status':temp.revise_status,
                'revise_no':temp.revise_no,
                'is_revise':temp.is_revise,
                'revise_remarks':temp.revise_remarks,
                'revise_remarks_update':temp.revise_remarks_update,
                'revise_id':temp.revise_id.id,          
                'coming_from':temp.coming_from, 
                'categorization':temp.categorization, 
                'plant_manager':temp.plant_manager.id,
                'purchase_manager':temp.purchase_manager.id,
                'company_id':temp.company_id.id,
                'document_no':temp.document_no,
                'revision_no':temp.revision_no,
                'default_pr_date':temp.default_pr_date,    
                'revise_flag': 1
                })
            for item in temp.requistion_order_line:
                erp_id = self.pool.get('prakruti.purchase_requistion_analysis_line').create(cr,uid, {
                    'product_id': item.product_id.id,
                    'description': item.description,
                    'quantity_req': item.quantity_req,
                    'uom_id': item.uom_id.id,
                    'required_date': item.required_date,
                    'remarks': item.remarks,
                    'vendor_id': item.vendor_id.id,
                    'requisition_grid_id': item.requisition_grid_id,
                    'status': item.status,
                    'send_status': item.send_status,
                    'request_no': item.request_no,
                    'last_price': item.last_price,
                    'last_purchase_vendor_id': item.last_purchase_vendor_id.id,
                    'last_purchase_date': item.last_purchase_date,
                    'hsn_code': item.hsn_code,
                    'requisition_line_id': item.requisition_line_id,
                    'send_to': item.send_to,
                    'revise_req_analysis_line':item.revise_req_analysis_line,
                    'slip_id':item.slip_id.id,
                    'requistion_line_id': ebsl_id
                    })
            cr.execute("UPDATE prakruti_purchase_requistion_analysis SET revise_status = 'revise_requisition',is_revise = 'True' WHERE id = %s",((temp.id),))
            cr.execute("UPDATE prakruti_purchase_requistion_analysis_line SET revise_req_analysis_line = 1 WHERE requistion_line_id = %s",((temp.id),))
        return {} 
    
    '''
    After doing changes in prakruti_purchase_requistion_analysis_line click this to visible Revise button and to update the changes in the screen
    '''
    @api.one
    @api.multi
    def revise_done(self):
        cr = self.env.cr
        uid = self.env.uid
        ids = self.ids
        context = 'context' 
        revise_done_by = False
        error_message = ''
        for temp in self:
            if temp.revise_remarks:
                if temp.revise_id:
                    cr.execute("UPDATE prakruti_purchase_requistion_analysis_line SET revise_req_analysis_line = 2 WHERE requistion_line_id = %s",((temp.id),))
                    cr.execute('''SELECT revise_purchase_requisition_analysis AS error_message FROM revise_purchase_requisition_analysis(%s,%s)''',((temp.id),(temp.request_no),))
                    for line in cr.dictfetchall():
                        error_message = line['error_message']
                    if error_message == 'Record Cannot Be Revised':
                        raise UserError(_('Record...Can\'t Be Revised...\nPlease Contact Your Administrator...!!!'))
                else:
                    raise UserError(_('Please enter Revised Person...'))
            else:
                raise UserError(_('Please enter Revise Remarks...'))
        return {}
    
class PurchaseRequisitionAnalysisLine(models.Model):
    _name = 'prakruti.purchase_requistion_analysis_line'
    _table = 'prakruti_purchase_requistion_analysis_line'
    _description = 'Purchase Requisition Analysis Line'  
    
    requistion_line_id = fields.Many2one('prakruti.purchase_requistion_analysis', ondelete='cascade')
    product_id = fields.Many2one('product.product',string="Product Name", required=True)
    description = fields.Text(string = "Description")
    quantity_req = fields.Float(string = "Qty. Req", required=True ,digits=(6,3))
    uom_id = fields.Many2one('product.uom',string="UOM",required= True)
    required_date = fields.Date(string="Req. Date")
    remarks = fields.Text(string="Remarks")
    vendor_id = fields.Many2one('res.partner',string="Vendor Name")
    requisition_grid_id = fields.Integer(string= 'Requisition Grid ID')
    send_status = fields.Integer(default= 0, string= 'Send Status',readonly=1)    
    request_no = fields.Char(string = "Requisition No", readonly=True)
    last_price = fields.Float(string = "Last Purchase Price", readonly=True,digits=(6,3))
    last_purchase_vendor_id= fields.Many2one('res.partner',string="Last Purchase Vendor Name",readonly=True)
    last_purchase_date= fields.Date(string="Last Purchase Date",store=True,readonly=True)
    hsn_code = fields.Char(string='HSN/SAC')
    requisition_line_id = fields.Integer(string= 'Requisition Line ID',readonly=1)
    send_to = fields.Char(string= 'Send To',readonly=1)
    reject_status = fields.Char(string= 'Is Rejected?',readonly=1)
    status= fields.Selection([
            ('approved','Approved'),
            ('hold','Hold'),
            ('rejected', 'Rejected')],default='approved',string= 'Status')   
    '''
    Whenever shortclose will happen in the PO it will reflect here Product Wise and also the status will become hold that means it will release that Particular Line and also send_status and send_to will assign their default values
    
    Updated By : Karan
    Updated On : 2017/08/21
    '''
    short_close_status = fields.Char(string= 'Is Short Close?',readonly=1)
    #Added as per requirement for reserving the product based on the Planning Request
    slip_id = fields.Many2one('prakruti.production_slip',string = 'Slip ID',readonly=1)
    #Updated by Induja On 20170928
    
    revise_req_analysis_line = fields.Integer(string= 'Revised Flag',default=0)
    
    def onchange_product_id(self, cr, uid, ids, product_id, context=None):
        available_stock = 0.0
        uom_id = 0
        description = ''
        uom_name = ''
        hsn_code = ''
        cr.execute('''SELECT 
                            product_uom.id AS uom_id, 
                            product_uom.name AS uom_name, 
                            product_template.name AS description,
                            product_template.hsn_code AS hsn_code 
                      FROM 
                            product_uom JOIN 
                            product_template ON 
                            product_uom.id=product_template.uom_id JOIN 
                            product_product ON 
                            product_template.id=product_product.product_tmpl_id 
                      WHERE 
                            product_product.id = cast(%s as integer)''', ((product_id),))
        for line in cr.dictfetchall():
            uom_id = line['uom_id']
            description = line['description']
            hsn_code = line['hsn_code']
        return {'value' :{
                    'uom_id':uom_id,
                    'description':description,
                    'hsn_code':hsn_code
    
                }}
    
    '''
    The Qty should not be less than Zero
    '''    
    
    def _check_qty(self, cr, uid, ids):
         lines = self.browse(cr, uid, ids)
         for line in lines:
             if line.quantity_req <= 0:
                 return False
         return True
     
    _constraints = [
         (_check_qty, 'Order quantity cannot be negative or zero !', ['quantity_req']),
    ]