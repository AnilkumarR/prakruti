'''
Company : EBSL
Author : Karan
Module : Purchase Request
Class 1 : PrakrutiPriceRequest
Class 2 : PurchaseRequisitionLine
Class 3 : VendorRequisitionLine
Table 1 & Reference Id : prakruti_price_request,request_order_line,vendor_list_line
Table 2 & Reference Id : prakruti_price_request_line,request_line_id
Table 3 & Reference Id : prakruti_vendor_list_line,vendor_line_id
Updated By : Karan 
Updated Date & Version : 2017/08/21 & 0.1
'''

import time
import openerp
from datetime import date, datetime
from openerp import models, fields, api
from openerp.tools import DEFAULT_SERVER_DATE_FORMAT, image_colorize, image_resize_image_big
from openerp.exceptions import except_orm, Warning as UserError
from openerp import tools
from openerp.tools.translate import _
from datetime import timedelta 
from openerp.exceptions import ValidationError



class PrakrutiPriceRequest(models.Model):
    _name = 'prakruti.price_request'
    _table = 'prakruti_price_request'
    _description = 'Purchase Price Request'
    _rec_name = 'inquiry_no'
    _order="id desc" 
    
    '''
    Its an unique autogenerated Request Number which will be in the format of
    Format : PREQ\PRODUCT_TYPE\NUMBER\FINANCIAL YEAR
    Example : PREQ\EXFG\0001\17-18
    Updated By : Karan
    Updated On : 2017/08/21
    Version :0.1
    
    '''
    
    @api.one
    @api.multi
    def _get_auto(self):
        style_format = {}
        month_value=0
        year_value=0
        next_year=0
        dispay_year=''
        display_present_year=''
        cr = self.env.cr
        uid = self.env.uid
        ids = self.ids
        for temp in self :
            cr.execute('''SELECT 
                                CAST(EXTRACT(month FROM inquiry_date) AS INTEGER) AS month,
                                CAST(EXTRACT(year FROM inquiry_date) AS INTEGER) AS year,
                                id 
                          FROM 
                                prakruti_price_request 
                          WHERE 
                                id=%s''',((temp.id),))
            for item in cr.dictfetchall():
                month_value=int(item['month'])
                year_value=int(item['year'])
            if month_value<=3:
                year_value=year_value-1
            else:
                year_value=year_value
            next_year=year_value+1
            dispay_year=str(next_year)[-2:]
            display_present_year=str(year_value)[-2:]
            cr.execute('''SELECT autogenerate_purchase_price_request(%s)''', ((temp.id),)  ) 
            result = cr.dictfetchall()
            parent_invoice_id = 0
            for value in result: parent_invoice_id = value['autogenerate_purchase_price_request'];
            auto_gen = int(parent_invoice_id)
            if len(str(auto_gen)) < 2:
                auto_gen = '000'+ str(auto_gen)
            elif len(str(auto_gen)) < 3:
                auto_gen = '00' + str(auto_gen)
            elif len(str(auto_gen)) == 3:
                auto_gen = '0'+str(auto_gen)
            else:
                auto_gen = str(auto_gen)
            for record in self :
                if temp.purchase_type.group_code:
                    style_format[record.id] ='PREQ\\'+ temp.purchase_type.group_code+'\\'+str(auto_gen)+'\\'+str(display_present_year)+'-'+str(dispay_year)
                else:                        
                    style_format[record.id] ='PREQ\\'+str(auto_gen)+'\\'+str(display_present_year)+'-'+str(dispay_year)
                cr.execute('''UPDATE 
                                    prakruti_price_request 
                              SET 
                                    inquiry_no = %s 
                              WHERE 
                                    id=%s ''', ((style_format[record.id]),(temp.id),)  )
        return style_format
    
    request_order_line = fields.One2many('prakruti.price_request_line','request_line_id',string="Please Enter Some Product")
    vendor_list_line = fields.One2many('prakruti.vendor_list_line','vendor_line_id', string="Please Enter Some Vendor",)
    request_date = fields.Date(string = "Requisition Date", default= fields.Date.today)
    inquiry_date = fields.Date(string = "Request Date", default= fields.Date.today )
    inquiry_no = fields.Char(string = "Request No", readonly=True)
    request_no = fields.Char(string = "Requisition No", readonly=True)
    terms_and_conditions = fields.Text()
    prepared_by = fields.Many2one('res.users','Prepared By',readonly=True)
    approved_by = fields.Many2one('res.users','Approved By', readonly=True)
    stores_incharge = fields.Many2one('res.users',string="Stores Incharge")
    remarks = fields.Text(string="Remarks")
    purchase_type = fields.Many2one('product.group',string= 'Purchase Type')
    inq_no = fields.Char('Price Request Number', compute='_get_auto', readonly=True)
    auto_no = fields.Integer('Auto')
    req_no_control_id = fields.Integer('Auto Generating id',default= 0) 
    product_id = fields.Many2one('product.product', related='request_order_line.product_id', string='Product Name')
    revise_status = fields.Selection([('revise_request','Revise Request'),('revise_done','Revise Done')],string= 'Revise Status')
    revise_no = fields.Integer(string= '# Of Revision',default=0,readonly=1)
    is_revise = fields.Boolean(string= 'Is Revised',default=0,readonly=1)
    revise_remarks = fields.Text(string= 'Revise Remarks')
    revise_remarks_update = fields.Text(string= 'All Revise Updates',readonly=1,default='-')
    revise_id = fields.Many2one('res.users',string = 'Revised Done By')
    send_to = fields.Char(string = 'Send To',readonly=1)
    coming_from = fields.Char(string = 'Coming From',readonly=1)
    revise_flag = fields.Integer(string= 'Revise Flag',default=0,readonly=1)    
    state = fields.Selection([
                ('request','Purchase Price Request Draft'),
                ('quotation','Purchase Quotation'),
                ('analysis','Purchase Quotation Analysis'),
                ('order','Purchase Order'),
                ('confirm','Purchase Order Confirmed'),
                ('reject','Purchase Order Rejected'),
                ('short_close','Purchase Order Short Closed')],default= 'request', string= 'Status') 
    
    #added by induja on 20170928 for categorising the products
    categorization = fields.Selection([
		('goods','Goods'),
		('services','Services'),
		('goods_services','Goods and Services')],default= 'goods') 
    #added by induja on 20171011 for Other details
    
    document_no = fields.Char(string ="Document No" , default='PPPL-PUR-F-004' , readonly=1)
    revision_no = fields.Char(string = "Rev. No", default='01' , readonly=1)
    default_pr_date = fields.Char(string="Document Date" , default= fields.Date.today , readonly=1)
    plant_manager = fields.Many2one('res.users',string="Plant Manager",readonly=True)
    purchase_manager = fields.Many2one('res.users',string="Purchase Manager",readonly=True)
    to_name = fields.Many2one('res.users',string="Name") 
    company_id = fields.Many2one('res.company',string='Company',default=lambda self: self.env.user.company_id)
    
    '''
    means that automatically shows this fields while creating this record.
    '''
    _defaults = {
        'inquiry_no':'New',
        'request_no':'Direct Request',
        'prepared_by': lambda s, cr, uid, c:uid,
        'approved_by': lambda s, cr, uid, c:uid,
        'revise_id': lambda s, cr, uid, c:uid           
        }
    
    '''
    Strictly Cannot be Deleted 
    '''
    @api.multi
    def unlink(self):
        for order in self:
            raise UserError(_('Can\'t Delete...'))
        return super(PrakrutiPriceRequest, self).unlink()
    
    '''
    Pushing Data to Purchase Quotation
    '''    
    @api.one
    @api.multi
    def action_quotation(self):
        cr = self.env.cr
        uid = self.env.uid
        ids = self.ids
        context = 'context'
        for temp in self:
            cr = self.env.cr
            uid = self.env.uid
            ids = self.ids
            context = {}
            if len(temp.vendor_list_line) == 0:
                print '-------------------------vendor_list_line--------------------------------',len(temp.vendor_list_line)
                raise UserError(_('Please Enter atleast 1 Vendor'))
            else:
                for vendor_grid in temp.vendor_list_line:
                    ebsl_id = self.pool.get('prakruti.purchase_order_quotation').create(cr,uid, {
                            'qo_no':   'From Request',
                            'vendor_id': vendor_grid.vendor_id.id,
                            'order_date':temp.request_date,
                            'pr_request_common_id':temp.id,
                            'purchase_type':temp.purchase_type.id,
                            'maintanence_manager':temp.prepared_by.id,
                            'purchase_manager':temp.prepared_by.id,
                            'stores_incharge':temp.stores_incharge.id,
                            'quotation_status':'hold',
                            'inq_no':temp.inquiry_no,
                            'pr_no':temp.request_no,
                            'remarks':temp.remarks,
                            'request_date':temp.request_date,
                            'categorization':temp.categorization,
                            'vendor_grid_id': vendor_grid.id,
                            'to_name':temp.to_name.id,
                            'plant_manager':temp.plant_manager.id,
                            'purchase_manager':temp.purchase_manager.id,
                            'company_address':temp.company_id.id,
                            'document_no':temp.document_no,
                            'revision_no':temp.revision_no,
                            'default_pr_date':temp.default_pr_date,
                            'coming_from':'Price Request'
                            })
                    
                    for line in temp.request_order_line:
                            erp_id = self.pool.get('prakruti.purchase_quotation_line').create(cr,uid, {
                                'product_id': line.product_id.id,
                                'description':line.description,
                                'uom_id':line.uom_id.id,
                                'quantity':line.quantity_req,
                                'required_date':line.required_date,
                                'hsn_code':line.hsn_code,
                                'requisition_line_id':line.requisition_line_id,
                                'slip_id':line.slip_id.id,
                                'purchase_line_id': ebsl_id                            
                                })
                            
                    cr.execute("UPDATE  prakruti_price_request SET state = 'quotation',send_to= 'Purchase Quotation' WHERE prakruti_price_request.id = cast(%s as integer)",((temp.id),))
                    cr.execute("UPDATE  prakruti_purchase_requisition SET state = 'quotation' WHERE prakruti_purchase_requisition.requisition_no = %s ", ((temp.request_no),))
                    cr.execute("UPDATE  prakruti_purchase_requistion_analysis SET state = 'quotation' WHERE prakruti_purchase_requistion_analysis.request_no = %s ", ((temp.request_no),))
                    cr.execute("UPDATE  prakruti_purchase_requisition_approve SET state = 'quotation' WHERE prakruti_purchase_requisition_approve.requisition_no = %s",((temp.request_no),))
        return True
    '''
    This Button helps for Revision(If any changes need to be done in prakruti_price_request_line click this button and enter)
    ''' 
    @api.one
    @api.multi
    def revise_request(self):
        cr = self.env.cr
        uid = self.env.uid
        ids = self.ids
        context = 'context'
        for temp in self:
            ebsl_id = self.pool.get('prakruti.price_request').create(cr,uid, {
                'request_date':temp.request_date,
                'inquiry_date':temp.inquiry_date,
                'inquiry_no':temp.inquiry_no,
                'request_no':temp.request_no,
                'terms_and_conditions':temp.terms_and_conditions,
                'prepared_by':temp.prepared_by.id,
                'approved_by':temp.approved_by.id,
                'stores_incharge':temp.stores_incharge.id,
                'remarks':temp.remarks,
                'purchase_type':temp.purchase_type.id,
                'state':temp.state,
                'product_id':temp.product_id.id,
                'revise_status':temp.revise_status,
                'revise_no':temp.revise_no,
                'is_revise':temp.is_revise,
                'revise_remarks':temp.revise_remarks,
                'revise_remarks_update':temp.revise_remarks_update,
                'revise_id':temp.revise_id.id,  
                'send_to': temp.send_to,        
                'coming_from':temp.coming_from, 
                'to_name':temp.to_name.id,
                'plant_manager':temp.plant_manager.id,
                'purchase_manager':temp.purchase_manager.id,
                'document_no':temp.document_no,
                'revision_no':temp.revision_no,
                'company_id':temp.company_id.id,
                'default_pr_date':temp.default_pr_date,
                'categorization':temp.categorization,     
                'revise_flag': 1
                })
            for item in temp.request_order_line:
                erp_id = self.pool.get('prakruti.price_request_line').create(cr,uid, {
                    'product_id': item.product_id.id,
                    'description': item.description,
                    'quantity_req': item.quantity_req,
                    'uom_id': item.uom_id.id,
                    'required_date': item.required_date,
                    'remarks': item.remarks,
                    'last_price': item.last_price,
                    'last_purchase_vendor_id': item.last_purchase_vendor_id.id,
                    'last_purchase_date': item.last_purchase_date,
                    'hsn_code': item.hsn_code,
                    'requisition_line_id': item.requisition_line_id,
                    'slip_id':item.slip_id.id,
                    'revise_price_req_line':item.revise_price_req_line,
                    'request_line_id': ebsl_id
                    })
            for item in temp.vendor_list_line:
                erp_id = self.pool.get('prakruti.vendor_list_line').create(cr,uid, {
                    'vendor_id': item.vendor_id.id,
                    'address_type': item.address_type,
                    'address': item.address,
                    'remarks': item.remarks,
                    'vendor_line_id': ebsl_id
                    })
            cr.execute("UPDATE prakruti_price_request SET revise_status = 'revise_request',is_revise = 'True' WHERE id = %s",((temp.id),))
            cr.execute("UPDATE prakruti_price_request_line SET revise_price_req_line = 1 WHERE request_line_id = %s",((temp.id),))
        return {} 
    '''
    After doing changes in prakruti_price_request_line click this to visible Revise button and to update the changes in the screen
    '''
    @api.one
    @api.multi
    def revise_done(self):
        cr = self.env.cr
        uid = self.env.uid
        ids = self.ids
        context = 'context' 
        revise_done_by = False
        error_message = ''
        for temp in self:
            if temp.revise_remarks:
                if temp.revise_id:
                    cr.execute("UPDATE prakruti_price_request_line SET revise_price_req_line = 2 WHERE request_line_id = %s",((temp.id),))
                    cr.execute('''SELECT revise_purchase_price_request AS error_message FROM revise_purchase_price_request(%s,%s)''',((temp.id),(temp.request_no),))
                    for line in cr.dictfetchall():
                        error_message = line['error_message']
                    if error_message == 'Record Cannot Be Revised':
                        raise UserError(_('Record...Can\'t Be Revised...\nPlease Contact Your Administrator...!!!'))
                else:
                    raise UserError(_('Please enter Revised Person...'))
            else:
                raise UserError(_('Please enter Revise Remarks...'))
        return {}

class PurchaseRequisitionLine(models.Model):
    _name = 'prakruti.price_request_line'
    _table = 'prakruti_price_request_line'
    _description = 'Purchase Price Request Line'  
    
    request_line_id = fields.Many2one('prakruti.price_request', ondelete='cascade')    
    product_id = fields.Many2one('product.product',string="Product Name", required=1)
    description = fields.Text(string = "Description")
    quantity_req = fields.Float(string = "Qty. Req.", required=1 ,digits=(6,3))
    uom_id = fields.Many2one('product.uom',string="UOM",required= 1)
    required_date = fields.Date(string="Req. Date")
    remarks = fields.Text(string="Remarks")
    last_price = fields.Float(string = "Last Purchase Price", readonly=1 ,digits=(6,3))
    last_purchase_vendor_id= fields.Many2one('res.partner',string="Last Purchase Vendor Name",readonly=1)
    last_purchase_date= fields.Date(string="Last Purchase Date",readonly=1)
    hsn_code = fields.Char(string='HSN/SAC')
    requisition_line_id = fields.Integer(string= 'Requisition Line ID',readonly=1)
    #Added as per requirement for reserving the product based on the Planning Request
    slip_id = fields.Many2one('prakruti.production_slip',string = 'Slip ID',readonly=1)
    #Updated by Induja On 20170928
    
    revise_price_req_line = fields.Integer(string= 'Revised Flag',default=0)
    
    def onchange_product_id(self, cr, uid, ids, product_id, context=None):
        available_stock = 0.0
        uom_id = 0
        description = ''
        uom_name = ''
        hsn_code = ''
        cr.execute('''SELECT 
                            product_uom.id AS uom_id, 
                            product_uom.name AS uom_name, 
                            product_template.name AS description,
                            product_template.hsn_code AS hsn_code 
                      FROM 
                            product_uom JOIN 
                            product_template ON 
                            product_uom.id=product_template.uom_id JOIN 
                            product_product ON 
                            product_template.id=product_product.product_tmpl_id 
                      WHERE 
                            product_product.id = cast(%s as integer)''', ((product_id),))
        for line in cr.dictfetchall():
            uom_id = line['uom_id']
            description = line['description']
            hsn_code = line['hsn_code']
        return {'value' :{
                    'uom_id':uom_id,
                    'description':description,
                    'hsn_code':hsn_code
    
                }}


class VendorRequisitionLine(models.Model):
    _name = 'prakruti.vendor_list_line'
    _table = 'prakruti_vendor_list_line'
    _description = 'Purchase Price Request Vendor Line'  
    
    vendor_line_id = fields.Many2one('prakruti.price_request', ondelete='cascade')    
    vendor_id = fields.Many2one('res.partner',string="Vendor Name")    
    address_type = fields.Char(string="Type of Address", related='vendor_id.type_of_address')
    address = fields.Char(string="Address", related='vendor_id.street') 
    remarks = fields.Text(string="Remarks")
    
    '''
    Validation for the vendor
    '''
    @api.one
    @api.constrains('vendor_id')
    def _check_vendor_id(self):
        if not self.vendor_id:
            raise ValidationError(
                "Please Check the Vendor")