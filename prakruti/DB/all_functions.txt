-- Function: public.calculation_update_sales_invoice_gst(integer)

-- DROP FUNCTION public.calculation_update_sales_invoice_gst(integer);

CREATE OR REPLACE FUNCTION public.calculation_update_sales_invoice_gst(integer)
  RETURNS integer AS
$BODY$
DECLARE qty   integer;
BEGIN

qty = 0;


--TOTAL AMOUNT FOR THE GRID

UPDATE 
    prakruti_sales_invoice_line 
SET  
    amount = quantity * unit_price
WHERE
    prakruti_sales_invoice_line.main_id = $1;


--TAXABLE VALUE FOR THE GRID

UPDATE 
    prakruti_sales_invoice_line 
SET  
    taxable_value = amount - (amount*(discount/100)) 
WHERE
    prakruti_sales_invoice_line.main_id = $1;
    
--ADDITIONAL CHARGES

UPDATE
        prakruti_sales_invoice
SET
        all_additional_charges = freight_charges + loading_and_packing_charges + insurance_charges + other_charges
WHERE
        prakruti_sales_invoice.id = $1;
        
--TOTAL NO OF PRODUCTS

UPDATE 
    prakruti_sales_invoice AS b 
SET 
    total_no_of_products = a.total_no_of_products
FROM(SELECT 
        SUM(prakruti_sales_invoice_line.quantity) AS total_no_of_products,
        prakruti_sales_invoice.id
    FROM 
        prakruti_sales_invoice_line JOIN
        prakruti_sales_invoice ON
        prakruti_sales_invoice.id = prakruti_sales_invoice_line.main_id
    WHERE 
        prakruti_sales_invoice_line.main_id= $1 AND prakruti_sales_invoice.id = $1 
    GROUP BY 
        prakruti_sales_invoice.id
        ) AS a 
WHERE 
    a.id = b.id;



-- TOTAL TAXBLE VALUE
 UPDATE prakruti_sales_invoice SET 
                                total_taxable_value = b.taxable_value
    FROM(

    SELECT
        sum(prakruti_sales_invoice_line.taxable_value) as taxable_value,
        prakruti_sales_invoice.id
    FROM
        prakruti_sales_invoice_line INNER JOIN
        prakruti_sales_invoice ON
        prakruti_sales_invoice_line.main_id = prakruti_sales_invoice.id
     WHERE
        prakruti_sales_invoice.id = $1 and prakruti_sales_invoice_line.main_id = $1
        GROUP BY 
        prakruti_sales_invoice.id
        
    )as b     
        WHERE 
             prakruti_sales_invoice.id = b.id;
        
-- PROPORTIONATE AMOUNT TO PRODUCTS

UPDATE
        prakruti_sales_invoice
SET
        proportionate_amount_to_products = all_additional_charges/total_taxable_value
WHERE
        prakruti_sales_invoice.id = $1;

    
    
-- TAXABLE AMOUNT WITH CHARGES

UPDATE prakruti_sales_invoice_line SET 
                                taxable_value_with_charges = b.total_quantity
    FROM(

    SELECT
        (sum(prakruti_sales_invoice_line.taxable_value) + (sum(prakruti_sales_invoice_line.taxable_value) * sum(prakruti_sales_invoice.proportionate_amount_to_products))) as total_quantity,
        prakruti_sales_invoice_line.id
    FROM
        prakruti_sales_invoice_line INNER JOIN
        prakruti_sales_invoice ON
        prakruti_sales_invoice_line.main_id = prakruti_sales_invoice.id
     WHERE
        prakruti_sales_invoice.id = $1 and prakruti_sales_invoice_line.main_id = $1
        GROUP BY 
        prakruti_sales_invoice_line.id
        
    )as b     
        WHERE 
             prakruti_sales_invoice_line.id = b.id;

   
    
-- CGST VALUE FOR THE GRID

UPDATE 
    prakruti_sales_invoice_line
    SET
        cgst_amount = taxable_value_with_charges * (cgst_value/100)
    WHERE
        main_id=$1;
    
    
-- SGST VALUE FOR THE GRID

UPDATE 
    prakruti_sales_invoice_line
    SET
        sgst_amount = taxable_value_with_charges * (sgst_value/100)
    WHERE
        main_id=$1;
    
    
-- IGST VALUE FOR THE GRID

UPDATE 
    prakruti_sales_invoice_line
    SET
        igst_amount = taxable_value_with_charges * (igst_value/100)
    WHERE
        main_id=$1;
    
    
-- GST VALUE FOR THE GRID

UPDATE 
    prakruti_sales_invoice_line
    SET
        gst_rate = cgst_value + sgst_value + igst_value
    WHERE
        main_id=$1;
        
        
-- TOTAL VALUE FOR THE GRID

UPDATE 
    prakruti_sales_invoice_line
SET
    total = COALESCE(prakruti_sales_invoice_line.taxable_value_with_charges,0) + COALESCE(prakruti_sales_invoice_line.cgst_amount,0) + COALESCE(prakruti_sales_invoice_line.sgst_amount,0) + COALESCE(prakruti_sales_invoice_line.igst_amount,0)
WHERE
    main_id=$1;
    
    
    

--TOTAL AMOUNT BEFORE TAX

UPDATE prakruti_sales_invoice SET 
                                total_amount_before_tax = b.total_quantity
    FROM(

    SELECT
        sum(prakruti_sales_invoice_line.taxable_value_with_charges) as total_quantity,
        prakruti_sales_invoice.id
    FROM
        prakruti_sales_invoice_line INNER JOIN
        prakruti_sales_invoice ON
        prakruti_sales_invoice_line.main_id = prakruti_sales_invoice.id
     WHERE
        prakruti_sales_invoice.id = $1 and prakruti_sales_invoice_line.main_id = $1
        GROUP BY 
        prakruti_sales_invoice.id
        
    )as b     
        WHERE 
             prakruti_sales_invoice.id = b.id;
    
    
    

--TOTAL CGST

UPDATE prakruti_sales_invoice SET 
                                total_cgst_amount = b.total_quantity
    FROM(

    SELECT
        sum(prakruti_sales_invoice_line.cgst_amount) as total_quantity,
        prakruti_sales_invoice.id
    FROM
        prakruti_sales_invoice_line INNER JOIN
        prakruti_sales_invoice ON
        prakruti_sales_invoice_line.main_id = prakruti_sales_invoice.id
     WHERE
        prakruti_sales_invoice.id = $1 and prakruti_sales_invoice_line.main_id = $1
        GROUP BY 
        prakruti_sales_invoice.id
        
    )as b     
        WHERE 
             prakruti_sales_invoice.id = b.id;
    
    
    

--TOTAL SGST

UPDATE prakruti_sales_invoice SET 
                                total_sgst_amount = b.total_quantity
    FROM(

    SELECT
        sum(prakruti_sales_invoice_line.sgst_amount) as total_quantity,
        prakruti_sales_invoice.id
    FROM
        prakruti_sales_invoice_line INNER JOIN
        prakruti_sales_invoice ON
        prakruti_sales_invoice_line.main_id = prakruti_sales_invoice.id
     WHERE
        prakruti_sales_invoice.id = $1 and prakruti_sales_invoice_line.main_id = $1
        GROUP BY 
        prakruti_sales_invoice.id
        
    )as b     
        WHERE 
             prakruti_sales_invoice.id = b.id;
    
    
    

--TOTAL IGST

UPDATE prakruti_sales_invoice SET 
                                total_igst_amount = b.total_quantity
    FROM(

    SELECT
        sum(prakruti_sales_invoice_line.igst_amount) as total_quantity,
        prakruti_sales_invoice.id
    FROM
        prakruti_sales_invoice_line INNER JOIN
        prakruti_sales_invoice ON
        prakruti_sales_invoice_line.main_id = prakruti_sales_invoice.id
     WHERE
        prakruti_sales_invoice.id = $1 and prakruti_sales_invoice_line.main_id = $1
        GROUP BY 
        prakruti_sales_invoice.id
        
    )as b     
        WHERE 
             prakruti_sales_invoice.id = b.id;
             
             
             
-- TOTAL GST AMOUNT

UPDATE
        prakruti_sales_invoice
SET
        total_gst_amount = COALESCE(prakruti_sales_invoice.total_cgst_amount,0) + COALESCE(prakruti_sales_invoice.total_sgst_amount,0) + COALESCE(prakruti_sales_invoice.total_igst_amount,0)
WHERE
        prakruti_sales_invoice.id = $1;
    
    
    

--GRAND TOTAL AFTER TAX

UPDATE prakruti_sales_invoice SET 
                                total_amount_after_tax = b.total_quantity
    FROM(

    SELECT
        sum(prakruti_sales_invoice_line.total) as total_quantity,
        prakruti_sales_invoice.id
    FROM
        prakruti_sales_invoice_line INNER JOIN
        prakruti_sales_invoice ON
        prakruti_sales_invoice_line.main_id = prakruti_sales_invoice.id
     WHERE
        prakruti_sales_invoice.id = $1 and prakruti_sales_invoice_line.main_id = $1
        GROUP BY 
        prakruti_sales_invoice.id
        
    )as b     
        WHERE 
             prakruti_sales_invoice.id = b.id;
    
    
    

--TOTAL AMOUNT

UPDATE prakruti_sales_invoice SET 
                                total_amount = b.line_amount
    FROM(

    SELECT
        sum(prakruti_sales_invoice_line.amount) as line_amount,
        prakruti_sales_invoice.id
    FROM
        prakruti_sales_invoice_line INNER JOIN
        prakruti_sales_invoice ON
        prakruti_sales_invoice_line.main_id = prakruti_sales_invoice.id
     WHERE
        prakruti_sales_invoice.id = $1 and prakruti_sales_invoice_line.main_id = $1
        GROUP BY 
        prakruti_sales_invoice.id
        
    )as b     
        WHERE 
             prakruti_sales_invoice.id = b.id;


             
--GRAND TOTAL AFTER TAX

UPDATE prakruti_sales_invoice SET  grand_total = (taat - cash - cheque - draft) FROM
                                (
                                SELECT 
                                        COALESCE(prakruti_sales_invoice.total_amount_after_tax,0) AS taat,
                                        COALESCE(prakruti_sales_invoice.cash_amount,0) AS cash,
                                        COALESCE(prakruti_sales_invoice.cheque_amount,0) AS cheque,
                                        COALESCE(prakruti_sales_invoice.draft_amount,0) AS draft,
                                        prakruti_sales_invoice.id
                                FROM
                                        prakruti_sales_invoice
                                WHERE
                                        prakruti_sales_invoice.id = $1)AS b WHERE prakruti_sales_invoice.id = b.id;

RETURN qty;
                                
END;
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION public.calculation_update_sales_invoice_gst(integer)
  OWNER TO odoo;


CREATE OR REPLACE FUNCTION public.autogenerate_bmr_requisition(integer)
  RETURNS integer AS
$BODY$
DECLARE max_number INTEGER;
DECLARE year_added INTEGER;
DECLARE month_added INTEGER;
DECLARE serial_disable_id1 INTEGER;

BEGIN

max_number=0;

-- year_added = Year from entry date.

SELECT  
    CAST(EXTRACT(YEAR FROM start_date) AS INTEGER) INTO year_added 
FROM 
    prakruti_bmr_requisition 
WHERE 
    id =$1;
    
-- month_added = Month from entry date.

SELECT  
    CAST(EXTRACT(MONTH FROM start_date) AS INTEGER) INTO month_added 
FROM 
    prakruti_bmr_requisition 
WHERE 
    id =$1;

SELECT 
    CASE 
        WHEN month_added > 3 
            THEN year_added 
        ELSE 
            (year_added - 1 ) END 
        INTO year_added ;
SELECT 
    req_no_control_id INTO serial_disable_id1 
FROM 
    prakruti_bmr_requisition 
WHERE 
    prakruti_bmr_requisition.id =$1;

-- serial_disable_id1 is 0 for the first time only.

IF(serial_disable_id1 = 0) THEN
    
    SELECT  
        MAX(COALESCE(a.auto_no,0)+1) INTO max_number
    FROM  
        prakruti_bmr_requisition AS a
    WHERE 
        start_date 
    BETWEEN 
        CAST(year_added||'-04-'||'01' AS date) 
    AND 
        CAST(year_added + 1||'-03-'||'31' AS date);
    
    IF LENGTH(CAST(max_number AS text)) < 2 THEN 
        max_number = '00'|| CAST(max_number AS text);
        
    ELSIF LENGTH(CAST(max_number AS text)) < 3 THEN 
        max_number = '0' || CAST(max_number AS text);
        
    ELSE
        max_number = CAST(max_number AS text);
        
    END IF;
    
    UPDATE 
        prakruti_bmr_requisition 
    SET 
        req_no_control_id = 1,
        auto_no = max_number 
    WHERE
        prakruti_bmr_requisition.id = $1;

ELSE
    SELECT  
        a.auto_no INTO max_number
    FROM  
        prakruti_bmr_requisition AS a
    WHERE
        a.id =$1;
    
    IF LENGTH(CAST(max_number AS text)) < 2 THEN 
        max_number = '00'|| CAST(max_number AS text);
        
    ELSIF LENGTH(CAST(max_number AS text)) < 3 THEN 
        max_number = '0' || CAST(max_number AS text);
        
    ELSE
        max_number = CAST(max_number AS text);
        
    END IF;
    
    UPDATE 
        prakruti_bmr_requisition 
    SET 
        auto_no = max_number 
    WHERE
        prakruti_bmr_requisition.id = $1;
        
END IF;

RETURN max_number;
  END;
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION public.autogenerate_bmr_requisition(integer)
  OWNER TO odoo;

  
  CREATE OR REPLACE FUNCTION public.autogenerate_credit_note(integer)
  RETURNS integer AS
$BODY$
DECLARE max_number INTEGER;
DECLARE year_added INTEGER;
DECLARE month_added INTEGER;
DECLARE serial_disable_id1 INTEGER;

BEGIN

max_number=0;

-- year_added = Year from entry date.

SELECT  
    CAST(EXTRACT(YEAR FROM credit_date) AS INTEGER) INTO year_added 
FROM 
    prakruti_credit_note 
WHERE 
    id =$1;
    
-- month_added = Month from entry date.

SELECT  
    CAST(EXTRACT(MONTH FROM credit_date) AS INTEGER) INTO month_added 
FROM 
    prakruti_credit_note 
WHERE 
    id =$1;

SELECT 
    CASE 
        WHEN month_added > 3 
            THEN year_added 
        ELSE 
            (year_added - 1 ) END 
        INTO year_added ;
SELECT 
    req_no_control_id INTO serial_disable_id1 
FROM 
    prakruti_credit_note 
WHERE 
    prakruti_credit_note.id =$1;

-- serial_disable_id1 is 0 for the first time only.

IF(serial_disable_id1 = 0) THEN
    
    SELECT  
        MAX(COALESCE(a.auto_no,0)+1) INTO max_number
    FROM  
        prakruti_credit_note AS a
    WHERE 
        credit_date 
    BETWEEN 
        CAST(year_added||'-04-'||'01' AS date) 
    AND 
        CAST(year_added + 1||'-03-'||'31' AS date);
    
    IF LENGTH(CAST(max_number AS text)) < 2 THEN 
        max_number = '00'|| CAST(max_number AS text);
        
    ELSIF LENGTH(CAST(max_number AS text)) < 3 THEN 
        max_number = '0' || CAST(max_number AS text);
        
    ELSE
        max_number = CAST(max_number AS text);
        
    END IF;
    
    UPDATE 
        prakruti_credit_note 
    SET 
        req_no_control_id = 1,
        auto_no = max_number 
    WHERE
        prakruti_credit_note.id = $1;

ELSE
    SELECT  
        a.auto_no INTO max_number
    FROM  
        prakruti_credit_note AS a
    WHERE
        a.id =$1;
    
    IF LENGTH(CAST(max_number AS text)) < 2 THEN 
        max_number = '00'|| CAST(max_number AS text);
        
    ELSIF LENGTH(CAST(max_number AS text)) < 3 THEN 
        max_number = '0' || CAST(max_number AS text);
        
    ELSE
        max_number = CAST(max_number AS text);
        
    END IF;
    
    UPDATE 
        prakruti_credit_note 
    SET 
        auto_no = max_number 
    WHERE
        prakruti_credit_note.id = $1;
        
END IF;

RETURN max_number;
  END;
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION public.autogenerate_credit_note(integer)
  OWNER TO odoo;

  
  CREATE OR REPLACE FUNCTION public.autogenerate_debit_note(integer)
  RETURNS integer AS
$BODY$
DECLARE max_number INTEGER;
DECLARE year_added INTEGER;
DECLARE month_added INTEGER;
DECLARE serial_disable_id1 INTEGER;

BEGIN

max_number=0;

-- year_added = Year from entry date.

SELECT  
    CAST(EXTRACT(YEAR FROM debit_date) AS INTEGER) INTO year_added 
FROM 
    prakruti_debit_note 
WHERE 
    id =$1;
    
-- month_added = Month from entry date.

SELECT  
    CAST(EXTRACT(MONTH FROM debit_date) AS INTEGER) INTO month_added 
FROM 
    prakruti_debit_note 
WHERE 
    id =$1;

SELECT 
    CASE 
        WHEN month_added > 3 
            THEN year_added 
        ELSE 
            (year_added - 1 ) END 
        INTO year_added ;
SELECT 
    req_no_control_id INTO serial_disable_id1 
FROM 
    prakruti_debit_note 
WHERE 
    prakruti_debit_note.id =$1;

-- serial_disable_id1 is 0 for the first time only.

IF(serial_disable_id1 = 0) THEN
    
    SELECT  
        MAX(COALESCE(a.auto_no,0)+1) INTO max_number
    FROM  
        prakruti_debit_note AS a
    WHERE 
        debit_date 
    BETWEEN 
        CAST(year_added||'-04-'||'01' AS date) 
    AND 
        CAST(year_added + 1||'-03-'||'31' AS date);
    
    IF LENGTH(CAST(max_number AS text)) < 2 THEN 
        max_number = '00'|| CAST(max_number AS text);
        
    ELSIF LENGTH(CAST(max_number AS text)) < 3 THEN 
        max_number = '0' || CAST(max_number AS text);
        
    ELSE
        max_number = CAST(max_number AS text);
        
    END IF;
    
    UPDATE 
        prakruti_debit_note 
    SET 
        req_no_control_id = 1,
        auto_no = max_number 
    WHERE
        prakruti_debit_note.id = $1;

ELSE
    SELECT  
        a.auto_no INTO max_number
    FROM  
        prakruti_debit_note AS a
    WHERE
        a.id =$1;
    
    IF LENGTH(CAST(max_number AS text)) < 2 THEN 
        max_number = '00'|| CAST(max_number AS text);
        
    ELSIF LENGTH(CAST(max_number AS text)) < 3 THEN 
        max_number = '0' || CAST(max_number AS text);
        
    ELSE
        max_number = CAST(max_number AS text);
        
    END IF;
    
    UPDATE 
        prakruti_debit_note 
    SET 
        auto_no = max_number 
    WHERE
        prakruti_debit_note.id = $1;
        
END IF;

RETURN max_number;
  END;
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION public.autogenerate_debit_note(integer)
  OWNER TO odoo;

  
  CREATE OR REPLACE FUNCTION public.autogenerate_dispatch(integer)
  RETURNS integer AS
$BODY$
DECLARE max_number INTEGER;
DECLARE year_added INTEGER;
DECLARE month_added INTEGER;
DECLARE serial_disable_id1 INTEGER;

BEGIN

max_number=0;

-- year_added = Year from entry date.

SELECT  
    CAST(EXTRACT(YEAR FROM dispatch_date) AS INTEGER) INTO year_added 
FROM 
    prakruti_dispatch 
WHERE 
    id =$1;
    
-- month_added = Month from entry date.

SELECT  
    CAST(EXTRACT(MONTH FROM dispatch_date) AS INTEGER) INTO month_added 
FROM 
    prakruti_dispatch 
WHERE 
    id =$1;

SELECT 
    CASE 
        WHEN month_added > 3 
            THEN year_added 
        ELSE 
            (year_added - 1 ) END 
        INTO year_added ;
SELECT 
    req_no_control_id1 INTO serial_disable_id1 
FROM 
    prakruti_dispatch 
WHERE 
    prakruti_dispatch.id =$1;

-- serial_disable_id1 is 0 for the first time only.

IF(serial_disable_id1 = 0) THEN
    
    SELECT  
        MAX(COALESCE(a.auto_no,0)+1) INTO max_number
    FROM  
        prakruti_dispatch AS a
    WHERE 
        dispatch_date 
    BETWEEN 
        CAST(year_added||'-04-'||'01' AS date) 
    AND 
        CAST(year_added + 1||'-03-'||'31' AS date);
    
    IF LENGTH(CAST(max_number AS text)) < 2 THEN 
        max_number = '00'|| CAST(max_number AS text);
        
    ELSIF LENGTH(CAST(max_number AS text)) < 3 THEN 
        max_number = '0' || CAST(max_number AS text);
        
    ELSE
        max_number = CAST(max_number AS text);
        
    END IF;
    
    UPDATE 
        prakruti_dispatch 
    SET 
        req_no_control_id1 = 1,
        auto_no = max_number 
    WHERE
        prakruti_dispatch.id = $1;

ELSE
    SELECT  
        a.auto_no INTO max_number
    FROM  
        prakruti_dispatch AS a
    WHERE
        a.id =$1;
    
    IF LENGTH(CAST(max_number AS text)) < 2 THEN 
        max_number = '00'|| CAST(max_number AS text);
        
    ELSIF LENGTH(CAST(max_number AS text)) < 3 THEN 
        max_number = '0' || CAST(max_number AS text);
        
    ELSE
        max_number = CAST(max_number AS text);
        
    END IF;
    
    UPDATE 
        prakruti_dispatch 
    SET 
        auto_no = max_number 
    WHERE
        prakruti_dispatch.id = $1;
        
END IF;

RETURN max_number;
  END;
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION public.autogenerate_dispatch(integer)
  OWNER TO odoo;

  
  CREATE OR REPLACE FUNCTION public.autogenerate_gate_pass_no(integer)
  RETURNS integer AS
$BODY$
DECLARE max_number INTEGER;
DECLARE year_added INTEGER;
DECLARE month_added INTEGER;
DECLARE serial_disable_id1 INTEGER;

BEGIN

max_number=0;

-- year_added = Year from entry date.

SELECT  
    CAST(EXTRACT(YEAR FROM pass_date) AS INTEGER) INTO year_added 
FROM 
    prakruti_gate_pass 
WHERE 
    id =$1;
    
-- month_added = Month from entry date.

SELECT  
    CAST(EXTRACT(MONTH FROM pass_date) AS INTEGER) INTO month_added 
FROM 
    prakruti_gate_pass 
WHERE 
    id =$1;

SELECT 
    CASE 
        WHEN month_added > 3 
            THEN year_added 
        ELSE 
            (year_added - 1 ) END 
        INTO year_added ;
SELECT 
    req_no_control_id INTO serial_disable_id1 
FROM 
    prakruti_gate_pass 
WHERE 
    prakruti_gate_pass.id =$1;

-- serial_disable_id1 is 0 for the first time only.

IF(serial_disable_id1 = 0) THEN
    
    SELECT  
        MAX(COALESCE(a.auto_no,0)+1) INTO max_number
    FROM  
        prakruti_gate_pass AS a
    WHERE 
        pass_date 
    BETWEEN 
        CAST(year_added||'-04-'||'01' AS date) 
    AND 
        CAST(year_added + 1||'-03-'||'31' AS date);
    
    IF LENGTH(CAST(max_number AS text)) < 2 THEN 
        max_number = '00'|| CAST(max_number AS text);
        
    ELSIF LENGTH(CAST(max_number AS text)) < 3 THEN 
        max_number = '0' || CAST(max_number AS text);
        
    ELSE
        max_number = CAST(max_number AS text);
        
    END IF;
    
    UPDATE 
        prakruti_gate_pass 
    SET 
        req_no_control_id = 1,
        auto_no = max_number 
    WHERE
        prakruti_gate_pass.id = $1;

ELSE
    SELECT  
        a.auto_no INTO max_number
    FROM  
        prakruti_gate_pass AS a
    WHERE
        a.id =$1;
    
    IF LENGTH(CAST(max_number AS text)) < 2 THEN 
        max_number = '00'|| CAST(max_number AS text);
        
    ELSIF LENGTH(CAST(max_number AS text)) < 3 THEN 
        max_number = '0' || CAST(max_number AS text);
        
    ELSE
        max_number = CAST(max_number AS text);
        
    END IF;
    
    UPDATE 
        prakruti_gate_pass 
    SET 
        auto_no = max_number 
    WHERE
        prakruti_gate_pass.id = $1;
        
END IF;

RETURN max_number;
  END;
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION public.autogenerate_gate_pass_no(integer)
  OWNER TO odoo;

  
  CREATE OR REPLACE FUNCTION public.autogenerate_manual_gate_pass_no(integer)
  RETURNS integer AS
$BODY$
DECLARE max_number INTEGER;
DECLARE year_added INTEGER;
DECLARE month_added INTEGER;
DECLARE serial_disable_id1 INTEGER;

BEGIN

max_number=0;

-- year_added = Year from entry date.

SELECT  
    CAST(EXTRACT(YEAR FROM pass_date) AS INTEGER) INTO year_added 
FROM 
    prakruti_gate_pass_manual 
WHERE 
    id =$1;
    
-- month_added = Month from entry date.

SELECT  
    CAST(EXTRACT(MONTH FROM pass_date) AS INTEGER) INTO month_added 
FROM 
    prakruti_gate_pass_manual 
WHERE 
    id =$1;

SELECT 
    CASE 
        WHEN month_added > 3 
            THEN year_added 
        ELSE 
            (year_added - 1 ) END 
        INTO year_added ;
SELECT 
    req_no_control_id INTO serial_disable_id1 
FROM 
    prakruti_gate_pass_manual 
WHERE 
    prakruti_gate_pass_manual.id =$1;

-- serial_disable_id1 is 0 for the first time only.

IF(serial_disable_id1 = 0) THEN
    
    SELECT  
        MAX(COALESCE(a.auto_no,0)+1) INTO max_number
    FROM  
        prakruti_gate_pass_manual AS a
    WHERE 
        pass_date 
    BETWEEN 
        CAST(year_added||'-04-'||'01' AS date) 
    AND 
        CAST(year_added + 1||'-03-'||'31' AS date);
    
    IF LENGTH(CAST(max_number AS text)) < 2 THEN 
        max_number = '00'|| CAST(max_number AS text);
        
    ELSIF LENGTH(CAST(max_number AS text)) < 3 THEN 
        max_number = '0' || CAST(max_number AS text);
        
    ELSE
        max_number = CAST(max_number AS text);
        
    END IF;
    
    UPDATE 
        prakruti_gate_pass_manual 
    SET 
        req_no_control_id = 1,
        auto_no = max_number 
    WHERE
        prakruti_gate_pass_manual.id = $1;

ELSE
    SELECT  
        a.auto_no INTO max_number
    FROM  
        prakruti_gate_pass_manual AS a
    WHERE
        a.id =$1;
    
    IF LENGTH(CAST(max_number AS text)) < 2 THEN 
        max_number = '00'|| CAST(max_number AS text);
        
    ELSIF LENGTH(CAST(max_number AS text)) < 3 THEN 
        max_number = '0' || CAST(max_number AS text);
        
    ELSE
        max_number = CAST(max_number AS text);
        
    END IF;
    
    UPDATE 
        prakruti_gate_pass_manual 
    SET 
        auto_no = max_number 
    WHERE
        prakruti_gate_pass_manual.id = $1;
        
END IF;

RETURN max_number;
  END;
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION public.autogenerate_manual_gate_pass_no(integer)
  OWNER TO odoo;

  
  CREATE OR REPLACE FUNCTION public.autogenerate_material_rejection_note(integer)
  RETURNS integer AS
$BODY$
DECLARE max_number INTEGER;
DECLARE year_added INTEGER;
DECLARE month_added INTEGER;
DECLARE serial_disable_id1 INTEGER;

BEGIN

max_number=0;

-- year_added = Year from entry date.

SELECT  
    CAST(EXTRACT(YEAR FROM mrn_date) AS INTEGER) INTO year_added 
FROM 
    prakruti_return_items 
WHERE 
    id =$1;
    
-- month_added = Month from entry date.

SELECT  
    CAST(EXTRACT(MONTH FROM mrn_date) AS INTEGER) INTO month_added 
FROM 
    prakruti_return_items 
WHERE 
    id =$1;

SELECT 
    CASE 
        WHEN month_added > 3 
            THEN year_added 
        ELSE 
            (year_added - 1 ) END 
        INTO year_added ;
SELECT 
    req_no_control_id INTO serial_disable_id1 
FROM 
    prakruti_return_items 
WHERE 
    prakruti_return_items.id =$1;

-- serial_disable_id1 is 0 for the first time only.

IF(serial_disable_id1 = 0) THEN
    
    SELECT  
        MAX(COALESCE(a.auto_no,0)+1) INTO max_number
    FROM  
        prakruti_return_items AS a
    WHERE 
        mrn_date 
    BETWEEN 
        CAST(year_added||'-04-'||'01' AS date) 
    AND 
        CAST(year_added + 1||'-03-'||'31' AS date);
    
    IF LENGTH(CAST(max_number AS text)) < 2 THEN 
        max_number = '00'|| CAST(max_number AS text);
        
    ELSIF LENGTH(CAST(max_number AS text)) < 3 THEN 
        max_number = '0' || CAST(max_number AS text);
        
    ELSE
        max_number = CAST(max_number AS text);
        
    END IF;
    
    UPDATE 
        prakruti_return_items 
    SET 
        req_no_control_id = 1,
        auto_no = max_number 
    WHERE
        prakruti_return_items.id = $1;

ELSE
    SELECT  
        a.auto_no INTO max_number
    FROM  
        prakruti_return_items AS a
    WHERE
        a.id =$1;
    
    IF LENGTH(CAST(max_number AS text)) < 2 THEN 
        max_number = '00'|| CAST(max_number AS text);
        
    ELSIF LENGTH(CAST(max_number AS text)) < 3 THEN 
        max_number = '0' || CAST(max_number AS text);
        
    ELSE
        max_number = CAST(max_number AS text);
        
    END IF;
    
    UPDATE 
        prakruti_return_items 
    SET 
        auto_no = max_number 
    WHERE
        prakruti_return_items.id = $1;
        
END IF;

RETURN max_number;
  END;
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION public.autogenerate_material_rejection_note(integer)
  OWNER TO odoo;

  
CREATE OR REPLACE FUNCTION public.autogenerate_prakruti_production_transfer_note(integer)
  RETURNS integer AS
$BODY$
DECLARE max_number INTEGER;
DECLARE year_added INTEGER;
DECLARE month_added INTEGER;
DECLARE serial_disable_id1 INTEGER;

BEGIN

max_number=0;

-- year_added = Year from entry date.

SELECT  
    CAST(EXTRACT(YEAR FROM date) AS INTEGER) INTO year_added 
FROM 
    prakruti_production_transfer_note 
WHERE 
    id =$1;
    
-- month_added = Month from entry date.

SELECT  
    CAST(EXTRACT(MONTH FROM date) AS INTEGER) INTO month_added 
FROM 
    prakruti_production_transfer_note 
WHERE 
    id =$1;

SELECT 
    CASE 
        WHEN month_added > 3 
            THEN year_added 
        ELSE 
            (year_added - 1 ) END 
        INTO year_added ;
SELECT 
    req_no_control_id INTO serial_disable_id1 
FROM 
    prakruti_production_transfer_note 
WHERE 
    prakruti_production_transfer_note.id =$1;

-- serial_disable_id1 is 0 for the first time only.

IF(serial_disable_id1 = 0) THEN
    
    SELECT  
        MAX(COALESCE(a.auto_no,0)+1) INTO max_number
    FROM  
        prakruti_production_transfer_note AS a
    WHERE 
        date 
    BETWEEN 
        CAST(year_added||'-04-'||'01' AS date) 
    AND 
        CAST(year_added + 1||'-03-'||'31' AS date);
    
    IF LENGTH(CAST(max_number AS text)) < 2 THEN 
        max_number = '00'|| CAST(max_number AS text);
        
    ELSIF LENGTH(CAST(max_number AS text)) < 3 THEN 
        max_number = '0' || CAST(max_number AS text);
        
    ELSE
        max_number = CAST(max_number AS text);
        
    END IF;
    
    UPDATE 
        prakruti_production_transfer_note 
    SET 
        req_no_control_id = 1,
        auto_no = max_number 
    WHERE
        prakruti_production_transfer_note.id = $1;

ELSE
    SELECT  
        a.auto_no INTO max_number
    FROM  
        prakruti_production_transfer_note AS a
    WHERE
        a.id =$1;
    
    IF LENGTH(CAST(max_number AS text)) < 2 THEN 
        max_number = '00'|| CAST(max_number AS text);
        
    ELSIF LENGTH(CAST(max_number AS text)) < 3 THEN 
        max_number = '0' || CAST(max_number AS text);
        
    ELSE
        max_number = CAST(max_number AS text);
        
    END IF;
    
    UPDATE 
        prakruti_production_transfer_note 
    SET 
        auto_no = max_number 
    WHERE
        prakruti_production_transfer_note.id = $1;
        
END IF;

RETURN max_number;
  END;
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION public.autogenerate_prakruti_production_transfer_note(integer)
  OWNER TO odoo;

  
CREATE OR REPLACE FUNCTION public.autogenerate_purchase_order(integer)
  RETURNS integer AS
$BODY$
DECLARE max_number INTEGER;
DECLARE year_added INTEGER;
DECLARE month_added INTEGER;
DECLARE serial_disable_id1 INTEGER;

BEGIN

max_number=0;

-- year_added = Year from entry date.

SELECT  
    CAST(EXTRACT(YEAR FROM order_date) AS INTEGER) INTO year_added 
FROM 
    prakruti_purchase_order 
WHERE 
    id =$1;
    
-- month_added = Month from entry date.

SELECT  
    CAST(EXTRACT(MONTH FROM order_date) AS INTEGER) INTO month_added 
FROM 
    prakruti_purchase_order 
WHERE 
    id =$1;

SELECT 
    CASE 
        WHEN month_added > 3 
            THEN year_added 
        ELSE 
            (year_added - 1 ) END 
        INTO year_added ;
SELECT 
    req_no_control_id INTO serial_disable_id1 
FROM 
    prakruti_purchase_order 
WHERE 
    prakruti_purchase_order.id =$1;

-- serial_disable_id1 is 0 for the first time only.

IF(serial_disable_id1 = 0) THEN
    
    SELECT  
        MAX(COALESCE(a.auto_no,0)+1) INTO max_number
    FROM  
        prakruti_purchase_order AS a
    WHERE 
        order_date 
    BETWEEN 
        CAST(year_added||'-04-'||'01' AS date) 
    AND 
        CAST(year_added + 1||'-03-'||'31' AS date);
    
    IF LENGTH(CAST(max_number AS text)) < 2 THEN 
        max_number = '00'|| CAST(max_number AS text);
        
    ELSIF LENGTH(CAST(max_number AS text)) < 3 THEN 
        max_number = '0' || CAST(max_number AS text);
        
    ELSE
        max_number = CAST(max_number AS text);
        
    END IF;
    
    UPDATE 
        prakruti_purchase_order 
    SET 
        req_no_control_id = 1,
        auto_no = max_number 
    WHERE
        prakruti_purchase_order.id = $1;

ELSE
    SELECT  
        a.auto_no INTO max_number
    FROM  
        prakruti_purchase_order AS a
    WHERE
        a.id =$1;
    
    IF LENGTH(CAST(max_number AS text)) < 2 THEN 
        max_number = '00'|| CAST(max_number AS text);
        
    ELSIF LENGTH(CAST(max_number AS text)) < 3 THEN 
        max_number = '0' || CAST(max_number AS text);
        
    ELSE
        max_number = CAST(max_number AS text);
        
    END IF;
    
    UPDATE 
        prakruti_purchase_order 
    SET 
        auto_no = max_number 
    WHERE
        prakruti_purchase_order.id = $1;
        
END IF;

RETURN max_number;
  END;
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION public.autogenerate_purchase_order(integer)
  OWNER TO odoo;

  
CREATE OR REPLACE FUNCTION public.autogenerate_product_template(integer)
  RETURNS integer AS
$BODY$
DECLARE max_number INTEGER;
DECLARE year_added INTEGER;
DECLARE month_added INTEGER;
DECLARE serial_disable_id1 INTEGER;

BEGIN

max_number=0;

-- year_added = Year from entry date.

SELECT  
    CAST(EXTRACT(YEAR FROM code_date) AS INTEGER) INTO year_added 
FROM 
    product_template 
WHERE 
    id =$1;
    
-- month_added = Month from entry date.

SELECT  
    CAST(EXTRACT(MONTH FROM code_date) AS INTEGER) INTO month_added 
FROM 
    product_template 
WHERE 
    id =$1;

SELECT 
    CASE 
        WHEN month_added > 3 
            THEN year_added 
        ELSE 
            (year_added - 1 ) END 
        INTO year_added ;
SELECT 
    req_no_control_id1 INTO serial_disable_id1 
FROM 
    product_template 
WHERE 
    product_template.id =$1;

-- serial_disable_id1 is 0 for the first time only.

IF(serial_disable_id1 = 0) THEN
    
    SELECT  
        MAX(COALESCE(a.auto_no,0)+1) INTO max_number
    FROM  
        product_template AS a
    WHERE 
        code_date 
    BETWEEN 
        CAST(year_added||'-04-'||'01' AS date) 
    AND 
        CAST(year_added + 1||'-03-'||'31' AS date);
    
    IF LENGTH(CAST(max_number AS text)) < 2 THEN 
        max_number = '00'|| CAST(max_number AS text);
        
    ELSIF LENGTH(CAST(max_number AS text)) < 3 THEN 
        max_number = '0' || CAST(max_number AS text);
        
    ELSE
        max_number = CAST(max_number AS text);
        
    END IF;
    
    UPDATE 
        product_template 
    SET 
        req_no_control_id1 = 1,
        auto_no = max_number 
    WHERE
        product_template.id = $1;

ELSE
    SELECT  
        a.auto_no INTO max_number
    FROM  
        product_template AS a
    WHERE
        a.id =$1;
    
    IF LENGTH(CAST(max_number AS text)) < 2 THEN 
        max_number = '00'|| CAST(max_number AS text);
        
    ELSIF LENGTH(CAST(max_number AS text)) < 3 THEN 
        max_number = '0' || CAST(max_number AS text);
        
    ELSE
        max_number = CAST(max_number AS text);
        
    END IF;
    
    UPDATE 
        product_template 
    SET 
        auto_no = max_number 
    WHERE
        product_template.id = $1;
        
END IF;

RETURN max_number;
  END;
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION public.autogenerate_product_template(integer)
  OWNER TO odoo;

  
CREATE OR REPLACE FUNCTION public.autogenerate_purchase_grn(integer)
  RETURNS integer AS
$BODY$
DECLARE max_number INTEGER;
DECLARE year_added INTEGER;
DECLARE month_added INTEGER;
DECLARE serial_disable_id1 INTEGER;

BEGIN

max_number=0;

-- year_added = Year from entry date.

SELECT  
    CAST(EXTRACT(YEAR FROM grn_date) AS INTEGER) INTO year_added 
FROM 
    prakruti_grn_inspection_details 
WHERE 
    id =$1;
    
-- month_added = Month from entry date.

SELECT  
    CAST(EXTRACT(MONTH FROM grn_date) AS INTEGER) INTO month_added 
FROM 
    prakruti_grn_inspection_details 
WHERE 
    id =$1;

SELECT 
    CASE 
        WHEN month_added > 3 
            THEN year_added 
        ELSE 
            (year_added - 1 ) END 
        INTO year_added ;
SELECT 
    req_no_control_id INTO serial_disable_id1 
FROM 
    prakruti_grn_inspection_details 
WHERE 
    prakruti_grn_inspection_details.id =$1;

-- serial_disable_id1 is 0 for the first time only.

IF(serial_disable_id1 = 0) THEN
    
    SELECT  
        MAX(COALESCE(a.auto_no,0)+1) INTO max_number
    FROM  
        prakruti_grn_inspection_details AS a
    WHERE 
        grn_date 
    BETWEEN 
        CAST(year_added||'-04-'||'01' AS date) 
    AND 
        CAST(year_added + 1||'-03-'||'31' AS date);
    
    IF LENGTH(CAST(max_number AS text)) < 2 THEN 
        max_number = '00'|| CAST(max_number AS text);
        
    ELSIF LENGTH(CAST(max_number AS text)) < 3 THEN 
        max_number = '0' || CAST(max_number AS text);
        
    ELSE
        max_number = CAST(max_number AS text);
        
    END IF;
    
    UPDATE 
        prakruti_grn_inspection_details 
    SET 
        req_no_control_id = 1,
        auto_no = max_number 
    WHERE
        prakruti_grn_inspection_details.id = $1;

ELSE
    SELECT  
        a.auto_no INTO max_number
    FROM  
        prakruti_grn_inspection_details AS a
    WHERE
        a.id =$1;
    
    IF LENGTH(CAST(max_number AS text)) < 2 THEN 
        max_number = '00'|| CAST(max_number AS text);
        
    ELSIF LENGTH(CAST(max_number AS text)) < 3 THEN 
        max_number = '0' || CAST(max_number AS text);
        
    ELSE
        max_number = CAST(max_number AS text);
        
    END IF;
    
    UPDATE 
        prakruti_grn_inspection_details 
    SET 
        auto_no = max_number 
    WHERE
        prakruti_grn_inspection_details.id = $1;
        
END IF;

RETURN max_number;
  END;
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION public.autogenerate_purchase_grn(integer)
  OWNER TO odoo;

CREATE OR REPLACE FUNCTION public.autogenerate_purchase_grn_analysis(integer)
  RETURNS integer AS
$BODY$
DECLARE max_number INTEGER;
DECLARE year_added INTEGER;
DECLARE month_added INTEGER;
DECLARE serial_disable_id1 INTEGER;

BEGIN

max_number=0;

-- year_added = Year from entry date.

SELECT  
    CAST(EXTRACT(YEAR FROM analysis_date) AS INTEGER) INTO year_added 
FROM 
    prakruti_grn_analysis 
WHERE 
    id =$1;
    
-- month_added = Month from entry date.

SELECT  
    CAST(EXTRACT(MONTH FROM analysis_date) AS INTEGER) INTO month_added 
FROM 
    prakruti_grn_analysis 
WHERE 
    id =$1;

SELECT 
    CASE 
        WHEN month_added > 3 
            THEN year_added 
        ELSE 
            (year_added - 1 ) END 
        INTO year_added ;
SELECT 
    req_no_control_id INTO serial_disable_id1 
FROM 
    prakruti_grn_analysis 
WHERE 
    prakruti_grn_analysis.id =$1;

-- serial_disable_id1 is 0 for the first time only.

IF(serial_disable_id1 = 0) THEN
    
    SELECT  
        MAX(COALESCE(a.auto_no,0)+1) INTO max_number
    FROM  
        prakruti_grn_analysis AS a
    WHERE 
        analysis_date 
    BETWEEN 
        CAST(year_added||'-04-'||'01' AS date) 
    AND 
        CAST(year_added + 1||'-03-'||'31' AS date);
    
    IF LENGTH(CAST(max_number AS text)) < 2 THEN 
        max_number = '00'|| CAST(max_number AS text);
        
    ELSIF LENGTH(CAST(max_number AS text)) < 3 THEN 
        max_number = '0' || CAST(max_number AS text);
        
    ELSE
        max_number = CAST(max_number AS text);
        
    END IF;
    
    UPDATE 
        prakruti_grn_analysis 
    SET 
        req_no_control_id = 1,
        auto_no = max_number 
    WHERE
        prakruti_grn_analysis.id = $1;

ELSE
    SELECT  
        a.auto_no INTO max_number
    FROM  
        prakruti_grn_analysis AS a
    WHERE
        a.id =$1;
    
    IF LENGTH(CAST(max_number AS text)) < 2 THEN 
        max_number = '00'|| CAST(max_number AS text);
        
    ELSIF LENGTH(CAST(max_number AS text)) < 3 THEN 
        max_number = '0' || CAST(max_number AS text);
        
    ELSE
        max_number = CAST(max_number AS text);
        
    END IF;
    
    UPDATE 
        prakruti_grn_analysis 
    SET 
        auto_no = max_number 
    WHERE
        prakruti_grn_analysis.id = $1;
        
END IF;

RETURN max_number;
  END;
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION public.autogenerate_purchase_grn_analysis(integer)
  OWNER TO odoo;

  
CREATE OR REPLACE FUNCTION public.autogenerate_purchase_invoice(integer)
  RETURNS integer AS
$BODY$
DECLARE max_number INTEGER;
DECLARE year_added INTEGER;
DECLARE month_added INTEGER;
DECLARE serial_disable_id1 INTEGER;

BEGIN

max_number=0;

-- year_added = Year from entry date.

SELECT  
    CAST(EXTRACT(YEAR FROM purchase_invoice_date) AS INTEGER) INTO year_added 
FROM 
    prakruti_purchase_invoice 
WHERE 
    id =$1;
    
-- month_added = Month from entry date.

SELECT  
    CAST(EXTRACT(MONTH FROM purchase_invoice_date) AS INTEGER) INTO month_added 
FROM 
    prakruti_purchase_invoice 
WHERE 
    id =$1;

SELECT 
    CASE 
        WHEN month_added > 3 
            THEN year_added 
        ELSE 
            (year_added - 1 ) END 
        INTO year_added ;
SELECT 
    req_no_control_id2 INTO serial_disable_id1 
FROM 
    prakruti_purchase_invoice 
WHERE 
    prakruti_purchase_invoice.id =$1;

-- serial_disable_id1 is 0 for the first time only.

IF(serial_disable_id1 = 0) THEN
    
    SELECT  
        MAX(COALESCE(a.auto_no2,0)+1) INTO max_number
    FROM  
        prakruti_purchase_invoice AS a
    WHERE 
        purchase_invoice_date 
    BETWEEN 
        CAST(year_added||'-04-'||'01' AS date) 
    AND 
        CAST(year_added + 1||'-03-'||'31' AS date);
    
    IF LENGTH(CAST(max_number AS text)) < 2 THEN 
        max_number = '00'|| CAST(max_number AS text);
        
    ELSIF LENGTH(CAST(max_number AS text)) < 3 THEN 
        max_number = '0' || CAST(max_number AS text);
        
    ELSE
        max_number = CAST(max_number AS text);
        
    END IF;
    
    UPDATE 
        prakruti_purchase_invoice 
    SET 
        req_no_control_id2 = 1,
        auto_no2 = max_number 
    WHERE
        prakruti_purchase_invoice.id = $1;

ELSE
    SELECT  
        a.auto_no2 INTO max_number
    FROM  
        prakruti_purchase_invoice AS a
    WHERE
        a.id =$1;
    
    IF LENGTH(CAST(max_number AS text)) < 2 THEN 
        max_number = '00'|| CAST(max_number AS text);
        
    ELSIF LENGTH(CAST(max_number AS text)) < 3 THEN 
        max_number = '0' || CAST(max_number AS text);
        
    ELSE
        max_number = CAST(max_number AS text);
        
    END IF;
    
    UPDATE 
        prakruti_purchase_invoice 
    SET 
        auto_no2 = max_number 
    WHERE
        prakruti_purchase_invoice.id = $1;
        
END IF;

RETURN max_number;
  END;
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION public.autogenerate_purchase_invoice(integer)
  OWNER TO odoo;

  
  
CREATE OR REPLACE FUNCTION public.autogenerate_purchase_price_request(integer)
  RETURNS integer AS
$BODY$
DECLARE max_number INTEGER;
DECLARE year_added INTEGER;
DECLARE month_added INTEGER;
DECLARE serial_disable_id1 INTEGER;

BEGIN

max_number=0;

-- year_added = Year from entry date.

SELECT  
    CAST(EXTRACT(YEAR FROM inquiry_date) AS INTEGER) INTO year_added 
FROM 
    prakruti_price_request 
WHERE 
    id =$1;
    
-- month_added = Month from entry date.

SELECT  
    CAST(EXTRACT(MONTH FROM inquiry_date) AS INTEGER) INTO month_added 
FROM 
    prakruti_price_request 
WHERE 
    id =$1;

SELECT 
    CASE 
        WHEN month_added > 3 
            THEN year_added 
        ELSE 
            (year_added - 1 ) END 
        INTO year_added ;
SELECT 
    req_no_control_id INTO serial_disable_id1 
FROM 
    prakruti_price_request 
WHERE 
    prakruti_price_request.id =$1;

-- serial_disable_id1 is 0 for the first time only.

IF(serial_disable_id1 = 0) THEN
    
    SELECT  
        MAX(COALESCE(a.auto_no,0)+1) INTO max_number
    FROM  
        prakruti_price_request AS a
    WHERE 
        inquiry_date 
    BETWEEN 
        CAST(year_added||'-04-'||'01' AS date) 
    AND 
        CAST(year_added + 1||'-03-'||'31' AS date);
    
    IF LENGTH(CAST(max_number AS text)) < 2 THEN 
        max_number = '00'|| CAST(max_number AS text);
        
    ELSIF LENGTH(CAST(max_number AS text)) < 3 THEN 
        max_number = '0' || CAST(max_number AS text);
        
    ELSE
        max_number = CAST(max_number AS text);
        
    END IF;
    
    UPDATE 
        prakruti_price_request 
    SET 
        req_no_control_id = 1,
        auto_no = max_number 
    WHERE
        prakruti_price_request.id = $1;

ELSE
    SELECT  
        a.auto_no INTO max_number
    FROM  
        prakruti_price_request AS a
    WHERE
        a.id =$1;
    
    IF LENGTH(CAST(max_number AS text)) < 2 THEN 
        max_number = '00'|| CAST(max_number AS text);
        
    ELSIF LENGTH(CAST(max_number AS text)) < 3 THEN 
        max_number = '0' || CAST(max_number AS text);
        
    ELSE
        max_number = CAST(max_number AS text);
        
    END IF;
    
    UPDATE 
        prakruti_price_request 
    SET 
        auto_no = max_number 
    WHERE
        prakruti_price_request.id = $1;
        
END IF;

RETURN max_number;
  END;
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION public.autogenerate_purchase_price_request(integer)
  OWNER TO odoo;


CREATE OR REPLACE FUNCTION public.autogenerate_purchase_quotation(integer)
  RETURNS integer AS
$BODY$
DECLARE max_number INTEGER;
DECLARE year_added INTEGER;
DECLARE month_added INTEGER;
DECLARE serial_disable_id1 INTEGER;

BEGIN

max_number=0;

-- year_added = Year from entry date.

SELECT  
    CAST(EXTRACT(YEAR FROM order_date) AS INTEGER) INTO year_added 
FROM 
    prakruti_purchase_order_quotation 
WHERE 
    id =$1;
    
-- month_added = Month from entry date.

SELECT  
    CAST(EXTRACT(MONTH FROM order_date) AS INTEGER) INTO month_added 
FROM 
    prakruti_purchase_order_quotation 
WHERE 
    id =$1;

SELECT 
    CASE 
        WHEN month_added > 3 
            THEN year_added 
        ELSE 
            (year_added - 1 ) END 
        INTO year_added ;
SELECT 
    req_no_control_id INTO serial_disable_id1 
FROM 
    prakruti_purchase_order_quotation 
WHERE 
    prakruti_purchase_order_quotation.id =$1;

-- serial_disable_id1 is 0 for the first time only.

IF(serial_disable_id1 = 0) THEN
    
    SELECT  
        MAX(COALESCE(a.auto_no,0)+1) INTO max_number
    FROM  
        prakruti_purchase_order_quotation AS a
    WHERE 
        order_date 
    BETWEEN 
        CAST(year_added||'-04-'||'01' AS date) 
    AND 
        CAST(year_added + 1||'-03-'||'31' AS date);
    
    IF LENGTH(CAST(max_number AS text)) < 2 THEN 
        max_number = '00'|| CAST(max_number AS text);
        
    ELSIF LENGTH(CAST(max_number AS text)) < 3 THEN 
        max_number = '0' || CAST(max_number AS text);
        
    ELSE
        max_number = CAST(max_number AS text);
        
    END IF;
    
    UPDATE 
        prakruti_purchase_order_quotation 
    SET 
        req_no_control_id = 1,
        auto_no = max_number 
    WHERE
        prakruti_purchase_order_quotation.id = $1;

ELSE
    SELECT  
        a.auto_no INTO max_number
    FROM  
        prakruti_purchase_order_quotation AS a
    WHERE
        a.id =$1;
    
    IF LENGTH(CAST(max_number AS text)) < 2 THEN 
        max_number = '00'|| CAST(max_number AS text);
        
    ELSIF LENGTH(CAST(max_number AS text)) < 3 THEN 
        max_number = '0' || CAST(max_number AS text);
        
    ELSE
        max_number = CAST(max_number AS text);
        
    END IF;
    
    UPDATE 
        prakruti_purchase_order_quotation 
    SET 
        auto_no = max_number 
    WHERE
        prakruti_purchase_order_quotation.id = $1;
        
END IF;

RETURN max_number;
  END;
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION public.autogenerate_purchase_quotation(integer)
  OWNER TO odoo;

  
CREATE OR REPLACE FUNCTION public.autogenerate_purchase_quotation_analysis(integer)
  RETURNS integer AS
$BODY$
DECLARE max_number INTEGER;
DECLARE year_added INTEGER;
DECLARE month_added INTEGER;
DECLARE serial_disable_id1 INTEGER;

BEGIN

max_number=0;

-- year_added = Year from entry date.

SELECT  
    CAST(EXTRACT(YEAR FROM order_date) AS INTEGER) INTO year_added 
FROM 
    prakruti_purchase_order_quotation_analysis 
WHERE 
    id =$1;
    
-- month_added = Month from entry date.

SELECT  
    CAST(EXTRACT(MONTH FROM order_date) AS INTEGER) INTO month_added 
FROM 
    prakruti_purchase_order_quotation_analysis 
WHERE 
    id =$1;

SELECT 
    CASE 
        WHEN month_added > 3 
            THEN year_added 
        ELSE 
            (year_added - 1 ) END 
        INTO year_added ;
SELECT 
    req_no_control_id INTO serial_disable_id1 
FROM 
    prakruti_purchase_order_quotation_analysis 
WHERE 
    prakruti_purchase_order_quotation_analysis.id =$1;

-- serial_disable_id1 is 0 for the first time only.

IF(serial_disable_id1 = 0) THEN
    
    SELECT  
        MAX(COALESCE(a.auto_no,0)+1) INTO max_number
    FROM  
        prakruti_purchase_order_quotation_analysis AS a
    WHERE 
        order_date 
    BETWEEN 
        CAST(year_added||'-04-'||'01' AS date) 
    AND 
        CAST(year_added + 1||'-03-'||'31' AS date);
    
    IF LENGTH(CAST(max_number AS text)) < 2 THEN 
        max_number = '00'|| CAST(max_number AS text);
        
    ELSIF LENGTH(CAST(max_number AS text)) < 3 THEN 
        max_number = '0' || CAST(max_number AS text);
        
    ELSE
        max_number = CAST(max_number AS text);
        
    END IF;
    
    UPDATE 
        prakruti_purchase_order_quotation_analysis 
    SET 
        req_no_control_id = 1,
        auto_no = max_number 
    WHERE
        prakruti_purchase_order_quotation_analysis.id = $1;

ELSE
    SELECT  
        a.auto_no INTO max_number
    FROM  
        prakruti_purchase_order_quotation_analysis AS a
    WHERE
        a.id =$1;
    
    IF LENGTH(CAST(max_number AS text)) < 2 THEN 
        max_number = '00'|| CAST(max_number AS text);
        
    ELSIF LENGTH(CAST(max_number AS text)) < 3 THEN 
        max_number = '0' || CAST(max_number AS text);
        
    ELSE
        max_number = CAST(max_number AS text);
        
    END IF;
    
    UPDATE 
        prakruti_purchase_order_quotation_analysis 
    SET 
        auto_no = max_number 
    WHERE
        prakruti_purchase_order_quotation_analysis.id = $1;
        
END IF;

RETURN max_number;
  END;
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION public.autogenerate_purchase_quotation_analysis(integer)
  OWNER TO odoo;

  
CREATE OR REPLACE FUNCTION public.autogenerate_purchase_requistion(integer)
  RETURNS integer AS
$BODY$
DECLARE max_number INTEGER;
DECLARE year_added INTEGER;
DECLARE month_added INTEGER;
DECLARE serial_disable_id1 INTEGER;

BEGIN

max_number=0;

-- year_added = Year from entry date.

SELECT  
    CAST(EXTRACT(YEAR FROM requisition_date) AS INTEGER) INTO year_added 
FROM 
    prakruti_purchase_requisition 
WHERE 
    id =$1;
    
-- month_added = Month from entry date.

SELECT  
    CAST(EXTRACT(MONTH FROM requisition_date) AS INTEGER) INTO month_added 
FROM 
    prakruti_purchase_requisition 
WHERE 
    id =$1;

SELECT 
    CASE 
        WHEN month_added > 3 
            THEN year_added 
        ELSE 
            (year_added - 1 ) END 
        INTO year_added ;
SELECT 
    req_no_control_id INTO serial_disable_id1 
FROM 
    prakruti_purchase_requisition 
WHERE 
    prakruti_purchase_requisition.id =$1;

-- serial_disable_id1 is 0 for the first time only.

IF(serial_disable_id1 = 0) THEN
    
    SELECT  
        MAX(COALESCE(a.auto_no,0)+1) INTO max_number
    FROM  
        prakruti_purchase_requisition AS a
    WHERE 
        requisition_date 
    BETWEEN 
        CAST(year_added||'-04-'||'01' AS date) 
    AND 
        CAST(year_added + 1||'-03-'||'31' AS date);
    
    IF LENGTH(CAST(max_number AS text)) < 2 THEN 
        max_number = '00'|| CAST(max_number AS text);
        
    ELSIF LENGTH(CAST(max_number AS text)) < 3 THEN 
        max_number = '0' || CAST(max_number AS text);
        
    ELSE
        max_number = CAST(max_number AS text);
        
    END IF;
    
    UPDATE 
        prakruti_purchase_requisition 
    SET 
        req_no_control_id = 1,
        auto_no = max_number 
    WHERE
        prakruti_purchase_requisition.id = $1;

ELSE
    SELECT  
        a.auto_no INTO max_number
    FROM  
        prakruti_purchase_requisition AS a
    WHERE
        a.id =$1;
    
    IF LENGTH(CAST(max_number AS text)) < 2 THEN 
        max_number = '00'|| CAST(max_number AS text);
        
    ELSIF LENGTH(CAST(max_number AS text)) < 3 THEN 
        max_number = '0' || CAST(max_number AS text);
        
    ELSE
        max_number = CAST(max_number AS text);
        
    END IF;
    
    UPDATE 
        prakruti_purchase_requisition 
    SET 
        auto_no = max_number 
    WHERE
        prakruti_purchase_requisition.id = $1;
        
END IF;

RETURN max_number;
  END;
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION public.autogenerate_purchase_requistion(integer)
  OWNER TO odoo;
  
  
  
CREATE OR REPLACE FUNCTION public.autogenerate_purchase_requistion_analysis(integer)
  RETURNS integer AS
$BODY$
DECLARE max_number INTEGER;
DECLARE year_added INTEGER;
DECLARE month_added INTEGER;
DECLARE serial_disable_id1 INTEGER;

BEGIN

max_number=0;

-- year_added = Year from entry date.

SELECT  
    CAST(EXTRACT(YEAR FROM inquiry_date) AS INTEGER) INTO year_added 
FROM 
    prakruti_purchase_requistion_analysis 
WHERE 
    id =$1;
    
-- month_added = Month from entry date.

SELECT  
    CAST(EXTRACT(MONTH FROM inquiry_date) AS INTEGER) INTO month_added 
FROM 
    prakruti_purchase_requistion_analysis 
WHERE 
    id =$1;

SELECT 
    CASE 
        WHEN month_added > 3 
            THEN year_added 
        ELSE 
            (year_added - 1 ) END 
        INTO year_added ;
SELECT 
    req_no_control_id INTO serial_disable_id1 
FROM 
    prakruti_purchase_requistion_analysis 
WHERE 
    prakruti_purchase_requistion_analysis.id =$1;

-- serial_disable_id1 is 0 for the first time only.

IF(serial_disable_id1 = 0) THEN
    
    SELECT  
        MAX(COALESCE(a.auto_no,0)+1) INTO max_number
    FROM  
        prakruti_purchase_requistion_analysis AS a
    WHERE 
        inquiry_date 
    BETWEEN 
        CAST(year_added||'-04-'||'01' AS date) 
    AND 
        CAST(year_added + 1||'-03-'||'31' AS date);
    
    IF LENGTH(CAST(max_number AS text)) < 2 THEN 
        max_number = '00'|| CAST(max_number AS text);
        
    ELSIF LENGTH(CAST(max_number AS text)) < 3 THEN 
        max_number = '0' || CAST(max_number AS text);
        
    ELSE
        max_number = CAST(max_number AS text);
        
    END IF;
    
    UPDATE 
        prakruti_purchase_requistion_analysis 
    SET 
        req_no_control_id = 1,
        auto_no = max_number 
    WHERE
        prakruti_purchase_requistion_analysis.id = $1;

ELSE
    SELECT  
        a.auto_no INTO max_number
    FROM  
        prakruti_purchase_requistion_analysis AS a
    WHERE
        a.id =$1;
    
    IF LENGTH(CAST(max_number AS text)) < 2 THEN 
        max_number = '00'|| CAST(max_number AS text);
        
    ELSIF LENGTH(CAST(max_number AS text)) < 3 THEN 
        max_number = '0' || CAST(max_number AS text);
        
    ELSE
        max_number = CAST(max_number AS text);
        
    END IF;
    
    UPDATE 
        prakruti_purchase_requistion_analysis 
    SET 
        auto_no = max_number 
    WHERE
        prakruti_purchase_requistion_analysis.id = $1;
        
END IF;

RETURN max_number;
  END;
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION public.autogenerate_purchase_requistion_analysis(integer)
  OWNER TO odoo;

CREATE OR REPLACE FUNCTION public.autogenerate_sales_grn_no(integer)
  RETURNS integer AS
$BODY$
DECLARE max_number INTEGER;
DECLARE year_added INTEGER;
DECLARE month_added INTEGER;
DECLARE serial_disable_id1 INTEGER;

BEGIN

max_number=0;

-- year_added = Year from entry date.

SELECT  
    CAST(EXTRACT(YEAR FROM grn_date) AS INTEGER) INTO year_added 
FROM 
    prakruti_sales_return_grn 
WHERE 
    id =$1;
    
-- month_added = Month from entry date.

SELECT  
    CAST(EXTRACT(MONTH FROM grn_date) AS INTEGER) INTO month_added 
FROM 
    prakruti_sales_return_grn 
WHERE 
    id =$1;

SELECT 
    CASE 
        WHEN month_added > 3 
            THEN year_added 
        ELSE 
            (year_added - 1 ) END 
        INTO year_added ;
SELECT 
    req_no_control_id INTO serial_disable_id1 
FROM 
    prakruti_sales_return_grn 
WHERE 
    prakruti_sales_return_grn.id =$1;

-- serial_disable_id1 is 0 for the first time only.

IF(serial_disable_id1 = 0) THEN
    
    SELECT  
        MAX(COALESCE(a.auto_no,0)+1) INTO max_number
    FROM  
        prakruti_sales_return_grn AS a
    WHERE 
        grn_date 
    BETWEEN 
        CAST(year_added||'-04-'||'01' AS date) 
    AND 
        CAST(year_added + 1||'-03-'||'31' AS date);
    
    IF LENGTH(CAST(max_number AS text)) < 2 THEN 
        max_number = '00'|| CAST(max_number AS text);
        
    ELSIF LENGTH(CAST(max_number AS text)) < 3 THEN 
        max_number = '0' || CAST(max_number AS text);
        
    ELSE
        max_number = CAST(max_number AS text);
        
    END IF;
    
    UPDATE 
        prakruti_sales_return_grn 
    SET 
        req_no_control_id = 1,
        auto_no = max_number 
    WHERE
        prakruti_sales_return_grn.id = $1;

ELSE
    SELECT  
        a.auto_no INTO max_number
    FROM  
        prakruti_sales_return_grn AS a
    WHERE
        a.id =$1;
    
    IF LENGTH(CAST(max_number AS text)) < 2 THEN 
        max_number = '00'|| CAST(max_number AS text);
        
    ELSIF LENGTH(CAST(max_number AS text)) < 3 THEN 
        max_number = '0' || CAST(max_number AS text);
        
    ELSE
        max_number = CAST(max_number AS text);
        
    END IF;
    
    UPDATE 
        prakruti_sales_return_grn 
    SET 
        auto_no = max_number 
    WHERE
        prakruti_sales_return_grn.id = $1;
        
END IF;

RETURN max_number;
  END;
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION public.autogenerate_sales_grn_no(integer)
  OWNER TO odoo;

  
  
CREATE OR REPLACE FUNCTION public.autogenerate_sales_inquiry(integer)
  RETURNS integer AS
$BODY$
DECLARE max_number INTEGER;
DECLARE year_added INTEGER;
DECLARE month_added INTEGER;
DECLARE serial_disable_id1 INTEGER;

BEGIN

max_number=0;

-- year_added = Year from entry date.

SELECT  
    CAST(EXTRACT(YEAR FROM inquiry_date) AS INTEGER) INTO year_added 
FROM 
    prakruti_sales_inquiry 
WHERE 
    id =$1;
    
-- month_added = Month from entry date.

SELECT  
    CAST(EXTRACT(MONTH FROM inquiry_date) AS INTEGER) INTO month_added 
FROM 
    prakruti_sales_inquiry 
WHERE 
    id =$1;

SELECT 
    CASE 
        WHEN month_added > 3 
            THEN year_added 
        ELSE 
            (year_added - 1 ) END 
        INTO year_added ;
SELECT 
    req_no_control_id1 INTO serial_disable_id1 
FROM 
    prakruti_sales_inquiry 
WHERE 
    prakruti_sales_inquiry.id =$1;

-- serial_disable_id1 is 0 for the first time only.

IF(serial_disable_id1 = 0) THEN
    
    SELECT  
        MAX(COALESCE(a.auto_no,0)+1) INTO max_number
    FROM  
        prakruti_sales_inquiry AS a
    WHERE 
        inquiry_date 
    BETWEEN 
        CAST(year_added||'-04-'||'01' AS date) 
    AND 
        CAST(year_added + 1||'-03-'||'31' AS date);
    
    IF LENGTH(CAST(max_number AS text)) < 2 THEN 
        max_number = '00'|| CAST(max_number AS text);
        
    ELSIF LENGTH(CAST(max_number AS text)) < 3 THEN 
        max_number = '0' || CAST(max_number AS text);
        
    ELSE
        max_number = CAST(max_number AS text);
        
    END IF;
    
    UPDATE 
        prakruti_sales_inquiry 
    SET 
        req_no_control_id1 = 1,
        auto_no = max_number 
    WHERE
        prakruti_sales_inquiry.id = $1;

ELSE
    SELECT  
        a.auto_no INTO max_number
    FROM  
        prakruti_sales_inquiry AS a
    WHERE
        a.id =$1;
    
    IF LENGTH(CAST(max_number AS text)) < 2 THEN 
        max_number = '00'|| CAST(max_number AS text);
        
    ELSIF LENGTH(CAST(max_number AS text)) < 3 THEN 
        max_number = '0' || CAST(max_number AS text);
        
    ELSE
        max_number = CAST(max_number AS text);
        
    END IF;
    
    UPDATE 
        prakruti_sales_inquiry 
    SET 
        auto_no = max_number 
    WHERE
        prakruti_sales_inquiry.id = $1;
        
END IF;

RETURN max_number;
  END;
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION public.autogenerate_sales_inquiry(integer)
  OWNER TO odoo;

  
CREATE OR REPLACE FUNCTION public.autogenerate_sales_invoice(integer)
  RETURNS integer AS
$BODY$
DECLARE max_number INTEGER;
DECLARE year_added INTEGER;
DECLARE month_added INTEGER;
DECLARE serial_disable_id1 INTEGER;

BEGIN

max_number=0;

-- year_added = Year from entry date.

SELECT  
    CAST(EXTRACT(YEAR FROM invoice_date) AS INTEGER) INTO year_added 
FROM 
    prakruti_sales_invoice 
WHERE 
    id =$1;
    
-- month_added = Month from entry date.

SELECT  
    CAST(EXTRACT(MONTH FROM invoice_date) AS INTEGER) INTO month_added 
FROM 
    prakruti_sales_invoice 
WHERE 
    id =$1;

SELECT 
    CASE 
        WHEN month_added > 3 
            THEN year_added 
        ELSE 
            (year_added - 1 ) END 
        INTO year_added ;
SELECT 
    req_no_control_id INTO serial_disable_id1 
FROM 
    prakruti_sales_invoice 
WHERE 
    prakruti_sales_invoice.id =$1;

-- serial_disable_id1 is 0 for the first time only.

IF(serial_disable_id1 = 0) THEN
    
    SELECT  
        MAX(COALESCE(a.auto_no,0)+1) INTO max_number
    FROM  
        prakruti_sales_invoice AS a
    WHERE 
        invoice_date 
    BETWEEN 
        CAST(year_added||'-04-'||'01' AS date) 
    AND 
        CAST(year_added + 1||'-03-'||'31' AS date);
    
    IF LENGTH(CAST(max_number AS text)) < 2 THEN 
        max_number = '00'|| CAST(max_number AS text);
        
    ELSIF LENGTH(CAST(max_number AS text)) < 3 THEN 
        max_number = '0' || CAST(max_number AS text);
        
    ELSE
        max_number = CAST(max_number AS text);
        
    END IF;
    
    UPDATE 
        prakruti_sales_invoice 
    SET 
        req_no_control_id = 1,
        auto_no = max_number 
    WHERE
        prakruti_sales_invoice.id = $1;

ELSE
    SELECT  
        a.auto_no INTO max_number
    FROM  
        prakruti_sales_invoice AS a
    WHERE
        a.id =$1;
    
    IF LENGTH(CAST(max_number AS text)) < 2 THEN 
        max_number = '00'|| CAST(max_number AS text);
        
    ELSIF LENGTH(CAST(max_number AS text)) < 3 THEN 
        max_number = '0' || CAST(max_number AS text);
        
    ELSE
        max_number = CAST(max_number AS text);
        
    END IF;
    
    UPDATE 
        prakruti_sales_invoice 
    SET 
        auto_no = max_number 
    WHERE
        prakruti_sales_invoice.id = $1;
        
END IF;

RETURN max_number;
  END;
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION public.autogenerate_sales_invoice(integer)
  OWNER TO odoo;

  
CREATE OR REPLACE FUNCTION public.autogenerate_sales_order(integer)
  RETURNS integer AS
$BODY$
DECLARE max_number INTEGER;
DECLARE year_added INTEGER;
DECLARE month_added INTEGER;
DECLARE serial_disable_id1 INTEGER;

BEGIN

max_number=0;

-- year_added = Year from entry date.

SELECT  
    CAST(EXTRACT(YEAR FROM order_date) AS INTEGER) INTO year_added 
FROM 
    prakruti_sales_order 
WHERE 
    id =$1;
    
-- month_added = Month from entry date.

SELECT  
    CAST(EXTRACT(MONTH FROM order_date) AS INTEGER) INTO month_added 
FROM 
    prakruti_sales_order 
WHERE 
    id =$1;

SELECT 
    CASE 
        WHEN month_added > 3 
            THEN year_added 
        ELSE 
            (year_added - 1 ) END 
        INTO year_added ;
SELECT 
    req_no_control_id1 INTO serial_disable_id1 
FROM 
    prakruti_sales_order 
WHERE 
    prakruti_sales_order.id =$1;

-- serial_disable_id1 is 0 for the first time only.

IF(serial_disable_id1 = 0) THEN
    
    SELECT  
        MAX(COALESCE(a.auto_no,0)+1) INTO max_number
    FROM  
        prakruti_sales_order AS a
    WHERE 
        order_date 
    BETWEEN 
        CAST(year_added||'-04-'||'01' AS date) 
    AND 
        CAST(year_added + 1||'-03-'||'31' AS date);
    
    IF LENGTH(CAST(max_number AS text)) < 2 THEN 
        max_number = '00'|| CAST(max_number AS text);
        
    ELSIF LENGTH(CAST(max_number AS text)) < 3 THEN 
        max_number = '0' || CAST(max_number AS text);
        
    ELSE
        max_number = CAST(max_number AS text);
        
    END IF;
    
    UPDATE 
        prakruti_sales_order 
    SET 
        req_no_control_id1 = 1,
        auto_no = max_number 
    WHERE
        prakruti_sales_order.id = $1;

ELSE
    SELECT  
        a.auto_no INTO max_number
    FROM  
        prakruti_sales_order AS a
    WHERE
        a.id =$1;
    
    IF LENGTH(CAST(max_number AS text)) < 2 THEN 
        max_number = '00'|| CAST(max_number AS text);
        
    ELSIF LENGTH(CAST(max_number AS text)) < 3 THEN 
        max_number = '0' || CAST(max_number AS text);
        
    ELSE
        max_number = CAST(max_number AS text);
        
    END IF;
    
    UPDATE 
        prakruti_sales_order 
    SET 
        auto_no = max_number 
    WHERE
        prakruti_sales_order.id = $1;
        
END IF;

RETURN max_number;
  END;
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION public.autogenerate_sales_order(integer)
  OWNER TO odoo;

  
CREATE OR REPLACE FUNCTION public.autogenerate_sales_proforma_invoice(integer)
  RETURNS integer AS
$BODY$
DECLARE max_number INTEGER;
DECLARE year_added INTEGER;
DECLARE month_added INTEGER;
DECLARE serial_disable_id1 INTEGER;

BEGIN

max_number=0;

-- year_added = Year from entry date.

SELECT  
    CAST(EXTRACT(YEAR FROM proforma_invoice_date) AS INTEGER) INTO year_added 
FROM 
    prakruti_sales_proforma_invoice 
WHERE 
    id =$1;
    
-- month_added = Month from entry date.

SELECT  
    CAST(EXTRACT(MONTH FROM proforma_invoice_date) AS INTEGER) INTO month_added 
FROM 
    prakruti_sales_proforma_invoice 
WHERE 
    id =$1;

SELECT 
    CASE 
        WHEN month_added > 3 
            THEN year_added 
        ELSE 
            (year_added - 1 ) END 
        INTO year_added ;
SELECT 
    req_no_control_id1 INTO serial_disable_id1 
FROM 
    prakruti_sales_proforma_invoice 
WHERE 
    prakruti_sales_proforma_invoice.id =$1;

-- serial_disable_id1 is 0 for the first time only.

IF(serial_disable_id1 = 0) THEN
    
    SELECT  
        MAX(COALESCE(a.auto_no,0)+1) INTO max_number
    FROM  
        prakruti_sales_proforma_invoice AS a
    WHERE 
        proforma_invoice_date 
    BETWEEN 
        CAST(year_added||'-04-'||'01' AS date) 
    AND 
        CAST(year_added + 1||'-03-'||'31' AS date);
    
    IF LENGTH(CAST(max_number AS text)) < 2 THEN 
        max_number = '00'|| CAST(max_number AS text);
        
    ELSIF LENGTH(CAST(max_number AS text)) < 3 THEN 
        max_number = '0' || CAST(max_number AS text);
        
    ELSE
        max_number = CAST(max_number AS text);
        
    END IF;
    
    UPDATE 
        prakruti_sales_proforma_invoice 
    SET 
        req_no_control_id1 = 1,
        auto_no = max_number 
    WHERE
        prakruti_sales_proforma_invoice.id = $1;

ELSE
    SELECT  
        a.auto_no INTO max_number
    FROM  
        prakruti_sales_proforma_invoice AS a
    WHERE
        a.id =$1;
    
    IF LENGTH(CAST(max_number AS text)) < 2 THEN 
        max_number = '00'|| CAST(max_number AS text);
        
    ELSIF LENGTH(CAST(max_number AS text)) < 3 THEN 
        max_number = '0' || CAST(max_number AS text);
        
    ELSE
        max_number = CAST(max_number AS text);
        
    END IF;
    
    UPDATE 
        prakruti_sales_proforma_invoice 
    SET 
        auto_no = max_number 
    WHERE
        prakruti_sales_proforma_invoice.id = $1;
        
END IF;

RETURN max_number;
  END;
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION public.autogenerate_sales_proforma_invoice(integer)
  OWNER TO odoo;

CREATE OR REPLACE FUNCTION public.autogenerate_sales_quotation(integer)
  RETURNS integer AS
$BODY$
DECLARE max_number INTEGER;
DECLARE year_added INTEGER;
DECLARE month_added INTEGER;
DECLARE serial_disable_id1 INTEGER;

BEGIN

max_number=0;

-- year_added = Year from entry date.

SELECT  
    CAST(EXTRACT(YEAR FROM quotation_date) AS INTEGER) INTO year_added 
FROM 
    prakruti_sales_quotation 
WHERE 
    id =$1;
    
-- month_added = Month from entry date.

SELECT  
    CAST(EXTRACT(MONTH FROM quotation_date) AS INTEGER) INTO month_added 
FROM 
    prakruti_sales_quotation 
WHERE 
    id =$1;

SELECT 
    CASE 
        WHEN month_added > 3 
            THEN year_added 
        ELSE 
            (year_added - 1 ) END 
        INTO year_added ;
SELECT 
    req_no_control_id INTO serial_disable_id1 
FROM 
    prakruti_sales_quotation 
WHERE 
    prakruti_sales_quotation.id =$1;

-- serial_disable_id1 is 0 for the first time only.

IF(serial_disable_id1 = 0) THEN
    
    SELECT  
        MAX(COALESCE(a.auto_no,0)+1) INTO max_number
    FROM  
        prakruti_sales_quotation AS a
    WHERE 
        quotation_date 
    BETWEEN 
        CAST(year_added||'-04-'||'01' AS date) 
    AND 
        CAST(year_added + 1||'-03-'||'31' AS date);
    
    IF LENGTH(CAST(max_number AS text)) < 2 THEN 
        max_number = '00'|| CAST(max_number AS text);
        
    ELSIF LENGTH(CAST(max_number AS text)) < 3 THEN 
        max_number = '0' || CAST(max_number AS text);
        
    ELSE
        max_number = CAST(max_number AS text);
        
    END IF;
    
    UPDATE 
        prakruti_sales_quotation 
    SET 
        req_no_control_id = 1,
        auto_no = max_number 
    WHERE
        prakruti_sales_quotation.id = $1;

ELSE
    SELECT  
        a.auto_no INTO max_number
    FROM  
        prakruti_sales_quotation AS a
    WHERE
        a.id =$1;
    
    IF LENGTH(CAST(max_number AS text)) < 2 THEN 
        max_number = '00'|| CAST(max_number AS text);
        
    ELSIF LENGTH(CAST(max_number AS text)) < 3 THEN 
        max_number = '0' || CAST(max_number AS text);
        
    ELSE
        max_number = CAST(max_number AS text);
        
    END IF;
    
    UPDATE 
        prakruti_sales_quotation 
    SET 
        auto_no = max_number 
    WHERE
        prakruti_sales_quotation.id = $1;
        
END IF;

RETURN max_number;
  END;
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION public.autogenerate_sales_quotation(integer)
  OWNER TO odoo;

  
CREATE OR REPLACE FUNCTION public.autogenerate_sales_return(integer)
  RETURNS integer AS
$BODY$
DECLARE max_number INTEGER;
DECLARE year_added INTEGER;
DECLARE month_added INTEGER;
DECLARE serial_disable_id1 INTEGER;

BEGIN

max_number=0;

-- year_added = Year from entry date.

SELECT  
    CAST(EXTRACT(YEAR FROM return_date) AS INTEGER) INTO year_added 
FROM 
    prakruti_sales_return 
WHERE 
    id =$1;
    
-- month_added = Month from entry date.

SELECT  
    CAST(EXTRACT(MONTH FROM return_date) AS INTEGER) INTO month_added 
FROM 
    prakruti_sales_return 
WHERE 
    id =$1;

SELECT 
    CASE 
        WHEN month_added > 3 
            THEN year_added 
        ELSE 
            (year_added - 1 ) END 
        INTO year_added ;
SELECT 
    req_no_control_id1 INTO serial_disable_id1 
FROM 
    prakruti_sales_return 
WHERE 
    prakruti_sales_return.id =$1;

-- serial_disable_id1 is 0 for the first time only.

IF(serial_disable_id1 = 0) THEN
    
    SELECT  
        MAX(COALESCE(a.auto_no,0)+1) INTO max_number
    FROM  
        prakruti_sales_return AS a
    WHERE 
        return_date 
    BETWEEN 
        CAST(year_added||'-04-'||'01' AS date) 
    AND 
        CAST(year_added + 1||'-03-'||'31' AS date);
    
    IF LENGTH(CAST(max_number AS text)) < 2 THEN 
        max_number = '00'|| CAST(max_number AS text);
        
    ELSIF LENGTH(CAST(max_number AS text)) < 3 THEN 
        max_number = '0' || CAST(max_number AS text);
        
    ELSE
        max_number = CAST(max_number AS text);
        
    END IF;
    
    UPDATE 
        prakruti_sales_return 
    SET 
        req_no_control_id1 = 1,
        auto_no = max_number 
    WHERE
        prakruti_sales_return.id = $1;

ELSE
    SELECT  
        a.auto_no INTO max_number
    FROM  
        prakruti_sales_return AS a
    WHERE
        a.id =$1;
    
    IF LENGTH(CAST(max_number AS text)) < 2 THEN 
        max_number = '00'|| CAST(max_number AS text);
        
    ELSIF LENGTH(CAST(max_number AS text)) < 3 THEN 
        max_number = '0' || CAST(max_number AS text);
        
    ELSE
        max_number = CAST(max_number AS text);
        
    END IF;
    
    UPDATE 
        prakruti_sales_return 
    SET 
        auto_no = max_number 
    WHERE
        prakruti_sales_return.id = $1;
        
END IF;

RETURN max_number;
  END;
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION public.autogenerate_sales_return(integer)
  OWNER TO odoo;

CREATE OR REPLACE FUNCTION public.autogenerate_slip_no(integer)
  RETURNS integer AS
$BODY$
DECLARE max_number INTEGER;
DECLARE year_added INTEGER;
DECLARE month_added INTEGER;
DECLARE serial_disable_id1 INTEGER;

BEGIN

max_number=0;

-- year_added = Year from entry date.

SELECT  
    CAST(EXTRACT(YEAR FROM slip_date) AS INTEGER) INTO year_added 
FROM 
    prakruti_production_slip 
WHERE 
    id =$1;
    
-- month_added = Month from entry date.

SELECT  
    CAST(EXTRACT(MONTH FROM slip_date) AS INTEGER) INTO month_added 
FROM 
    prakruti_production_slip 
WHERE 
    id =$1;

SELECT 
    CASE 
        WHEN month_added > 3 
            THEN year_added 
        ELSE 
            (year_added - 1 ) END 
        INTO year_added ;
SELECT 
    req_no_control_id INTO serial_disable_id1 
FROM 
    prakruti_production_slip 
WHERE 
    prakruti_production_slip.id =$1;

-- serial_disable_id1 is 0 for the first time only.

IF(serial_disable_id1 = 0) THEN
    
    SELECT  
        MAX(COALESCE(a.auto_no,0)+1) INTO max_number
    FROM  
        prakruti_production_slip AS a
    WHERE 
        slip_date 
    BETWEEN 
        CAST(year_added||'-04-'||'01' AS date) 
    AND 
        CAST(year_added + 1||'-03-'||'31' AS date);
    
    IF LENGTH(CAST(max_number AS text)) < 2 THEN 
        max_number = '00'|| CAST(max_number AS text);
        
    ELSIF LENGTH(CAST(max_number AS text)) < 3 THEN 
        max_number = '0' || CAST(max_number AS text);
        
    ELSE
        max_number = CAST(max_number AS text);
        
    END IF;
    
    UPDATE 
        prakruti_production_slip 
    SET 
        req_no_control_id = 1,
        auto_no = max_number 
    WHERE
        prakruti_production_slip.id = $1;

ELSE
    SELECT  
        a.auto_no INTO max_number
    FROM  
        prakruti_production_slip AS a
    WHERE
        a.id =$1;
    
    IF LENGTH(CAST(max_number AS text)) < 2 THEN 
        max_number = '00'|| CAST(max_number AS text);
        
    ELSIF LENGTH(CAST(max_number AS text)) < 3 THEN 
        max_number = '0' || CAST(max_number AS text);
        
    ELSE
        max_number = CAST(max_number AS text);
        
    END IF;
    
    UPDATE 
        prakruti_production_slip 
    SET 
        auto_no = max_number 
    WHERE
        prakruti_production_slip.id = $1;
        
END IF;

RETURN max_number;
  END;
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION public.autogenerate_slip_no(integer)
  OWNER TO odoo;

  
-- Function: public.autogenerate_store_issue(integer)

-- DROP FUNCTION public.autogenerate_store_issue(integer);

CREATE OR REPLACE FUNCTION public.autogenerate_store_issue(integer)
  RETURNS integer AS
$BODY$
DECLARE max_number INTEGER;
DECLARE year_added INTEGER;
DECLARE month_added INTEGER;
DECLARE serial_disable_id1 INTEGER;

BEGIN

max_number=0;

-- year_added = Year from entry date.

SELECT  
    CAST(EXTRACT(YEAR FROM issue_date) AS INTEGER) INTO year_added 
FROM 
    prakruti_store_issue 
WHERE 
    id =$1;
    
-- month_added = Month from entry date.

SELECT  
    CAST(EXTRACT(MONTH FROM issue_date) AS INTEGER) INTO month_added 
FROM 
    prakruti_store_issue 
WHERE 
    id =$1;

SELECT 
    CASE 
        WHEN month_added > 3 
            THEN year_added 
        ELSE 
            (year_added - 1 ) END 
        INTO year_added ;
SELECT 
    req_no_control_id INTO serial_disable_id1 
FROM 
    prakruti_store_issue 
WHERE 
    prakruti_store_issue.id =$1;

-- serial_disable_id1 is 0 for the first time only.

IF(serial_disable_id1 = 0) THEN
    
    SELECT  
        MAX(COALESCE(a.auto_no,0)+1) INTO max_number
    FROM  
        prakruti_store_issue AS a
    WHERE 
        issue_date 
    BETWEEN 
        CAST(year_added||'-04-'||'01' AS date) 
    AND 
        CAST(year_added + 1||'-03-'||'31' AS date);
    
    IF LENGTH(CAST(max_number AS text)) < 2 THEN 
        max_number = '00'|| CAST(max_number AS text);
        
    ELSIF LENGTH(CAST(max_number AS text)) < 3 THEN 
        max_number = '0' || CAST(max_number AS text);
        
    ELSE
        max_number = CAST(max_number AS text);
        
    END IF;
    
    UPDATE 
        prakruti_store_issue 
    SET 
        req_no_control_id = 1,
        auto_no = max_number 
    WHERE
        prakruti_store_issue.id = $1;

ELSE
    SELECT  
        a.auto_no INTO max_number
    FROM  
        prakruti_store_issue AS a
    WHERE
        a.id =$1;
    
    IF LENGTH(CAST(max_number AS text)) < 2 THEN 
        max_number = '00'|| CAST(max_number AS text);
        
    ELSIF LENGTH(CAST(max_number AS text)) < 3 THEN 
        max_number = '0' || CAST(max_number AS text);
        
    ELSE
        max_number = CAST(max_number AS text);
        
    END IF;
    
    UPDATE 
        prakruti_store_issue 
    SET 
        auto_no = max_number 
    WHERE
        prakruti_store_issue.id = $1;
        
END IF;

RETURN max_number;
  END;
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION public.autogenerate_store_issue(integer)
  OWNER TO odoo;

  
CREATE OR REPLACE FUNCTION public.autogenerate_store_request_no(integer)
  RETURNS integer AS
$BODY$
DECLARE max_number INTEGER;
DECLARE year_added INTEGER;
DECLARE month_added INTEGER;
DECLARE serial_disable_id1 INTEGER;

BEGIN

max_number=0;

-- year_added = Year from entry date.

SELECT  
    CAST(EXTRACT(YEAR FROM request_date) AS INTEGER) INTO year_added 
FROM 
    prakruti_store_request 
WHERE 
    id =$1;
    
-- month_added = Month from entry date.

SELECT  
    CAST(EXTRACT(MONTH FROM request_date) AS INTEGER) INTO month_added 
FROM 
    prakruti_store_request 
WHERE 
    id =$1;

SELECT 
    CASE 
        WHEN month_added > 3 
            THEN year_added 
        ELSE 
            (year_added - 1 ) END 
        INTO year_added ;
SELECT 
    req_no_control_id INTO serial_disable_id1 
FROM 
    prakruti_store_request 
WHERE 
    prakruti_store_request.id =$1;

-- serial_disable_id1 is 0 for the first time only.

IF(serial_disable_id1 = 0) THEN
    
    SELECT  
        MAX(COALESCE(a.auto_no,0)+1) INTO max_number
    FROM  
        prakruti_store_request AS a
    WHERE 
        request_date 
    BETWEEN 
        CAST(year_added||'-04-'||'01' AS date) 
    AND 
        CAST(year_added + 1||'-03-'||'31' AS date);
    
    IF LENGTH(CAST(max_number AS text)) < 2 THEN 
        max_number = '00'|| CAST(max_number AS text);
        
    ELSIF LENGTH(CAST(max_number AS text)) < 3 THEN 
        max_number = '0' || CAST(max_number AS text);
        
    ELSE
        max_number = CAST(max_number AS text);
        
    END IF;
    
    UPDATE 
        prakruti_store_request 
    SET 
        req_no_control_id = 1,
        auto_no = max_number 
    WHERE
        prakruti_store_request.id = $1;

ELSE
    SELECT  
        a.auto_no INTO max_number
    FROM  
        prakruti_store_request AS a
    WHERE
        a.id =$1;
    
    IF LENGTH(CAST(max_number AS text)) < 2 THEN 
        max_number = '00'|| CAST(max_number AS text);
        
    ELSIF LENGTH(CAST(max_number AS text)) < 3 THEN 
        max_number = '0' || CAST(max_number AS text);
        
    ELSE
        max_number = CAST(max_number AS text);
        
    END IF;
    
    UPDATE 
        prakruti_store_request 
    SET 
        auto_no = max_number 
    WHERE
        prakruti_store_request.id = $1;
        
END IF;

RETURN max_number;
  END;
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION public.autogenerate_store_request_no(integer)
  OWNER TO odoo;



--DROP FUNCTION dispatch_qa_to_ha(integer,character varying)
CREATE OR REPLACE FUNCTION public.dispatch_qa_to_ha(integer,character varying)
  RETURNS character varying AS
$BODY$
DECLARE qty   integer;
qi integer;
cb integer;
BEGIN
qty = 0;


SELECT 
	prakruti_process_quality_control_qa.quality_incharge INTO qi
FROM
	prakruti_process_quality_control_qa
WHERE
	prakruti_process_quality_control_qa.id = $1;
    
SELECT 
	prakruti_process_quality_control_qa.checked_by INTO cb
FROM
	prakruti_process_quality_control_qa
WHERE
	prakruti_process_quality_control_qa.id =$1;
IF (qi>0) AND (cb>0)
THEN
UPDATE 
	prakruti_process_quality_control_qa 
SET 
	state ='process_qa_ha' 
WHERE 
	id=$1;

	INSERT INTO prakruti_process_quality_check_qa_ha(
			create_uid,
			write_uid,
			create_date,
			write_date,
			qc_date,
			dispatch_no,
			dispatch_date,
			checked_by,
			order_no,
			order_date,
			dispatch_to,
			store_incharge,
			quality_incharge,
			requested_id,
			order_id,
			quotation_id,
			dispatch_id,
			qc_check_flag,
			reference_no,
			state, 
			terms,
			revision_no,
			remarks,
			company_id,
			reference_date 
			)
	SELECT
		create_uid,
		write_uid,
		create_date,
		write_date,
		qc_date,
		dispatch_no,
		dispatch_date,
		checked_by,
		order_no,
		order_date,
		dispatch_to,
		store_incharge,
		quality_incharge,
		requested_id,
		order_id,
		quotation_id,
		dispatch_id,
		qc_check_flag,
		reference_no,
		'draft' as state,
                terms,
                revision_no,
                remarks,
                company_id,
                reference_date 
	FROM(
		SELECT
			prakruti_process_quality_control_qa.create_uid,
			prakruti_process_quality_control_qa.write_uid,
			prakruti_process_quality_control_qa.create_date,
			prakruti_process_quality_control_qa.write_date,
			prakruti_process_quality_control_qa.qc_date,
			prakruti_process_quality_control_qa.dispatch_no,
			prakruti_process_quality_control_qa.dispatch_date,
			prakruti_process_quality_control_qa.checked_by,
			prakruti_process_quality_control_qa.order_no,
			prakruti_process_quality_control_qa.order_date,
			prakruti_process_quality_control_qa.dispatch_to,
			prakruti_process_quality_control_qa.store_incharge,
			prakruti_process_quality_control_qa.quality_incharge,
			prakruti_process_quality_control_qa.state,
			prakruti_process_quality_control_qa.requested_id,
			prakruti_process_quality_control_qa.order_id,
			prakruti_process_quality_control_qa.quotation_id,
			prakruti_process_quality_control_qa.dispatch_id,
			prakruti_process_quality_control_qa.qc_check_flag,
			prakruti_process_quality_control_qa.reference_no,
			prakruti_process_quality_control_qa.terms,
			prakruti_process_quality_control_qa.revision_no,
			prakruti_process_quality_control_qa.remarks,
			prakruti_process_quality_control_qa.company_id,
			prakruti_process_quality_control_qa.reference_date 
		FROM
			prakruti_process_quality_control_qa
		WHERE
			prakruti_process_quality_control_qa.id=$1
		)
		AS A;
	INSERT INTO prakruti_process_quality_check_line_qa_ha(
					create_uid,
					write_uid,
					create_date,
					write_date,
					product_id,
					uom_id,
					specification_id,
					description,
					ordered_qty,
					dispatched_qty,
					accepted_qty,
					rejected_qty,
					status,
					test_result,
					remarks,
					scheduled_qty,
					dispatch_line_grid_id,
					qc_check_line_id,
					state,
					batch_list,
					ar_no
					)
		SELECT
			create_uid,
			write_uid,
			create_date,
			write_date,
			product_id,
			uom_id,
			specification_id,
			description,
			ordered_qty,
			dispatched_qty,
			accepted_qty,
			dispatched_qty AS rejected_qty,
			status,
			test_result,
			remarks,
			scheduled_qty,
			dispatch_line_grid_id,
			qc_check_line_id,
			'draft' as state,
                        batch_list,
                        ar_no
		FROM(
			
SELECT 
			prakruti_process_quality_control_line_qa.create_uid,
			prakruti_process_quality_control_line_qa.write_uid,
			prakruti_process_quality_control_line_qa.create_date,
			prakruti_process_quality_control_line_qa.write_date,
			prakruti_process_quality_control_line_qa.product_id,
			prakruti_process_quality_control_line_qa.uom_id,
			prakruti_process_quality_control_line_qa.specification_id,
			prakruti_process_quality_control_line_qa.description,
			prakruti_process_quality_control_line_qa.ordered_qty,
			prakruti_process_quality_control_line_qa.dispatched_qty,
			COALESCE(prakruti_process_quality_control_line_qa.accepted_qty,0) as accepted_qty,
			COALESCE(prakruti_process_quality_control_line_qa.rejected_qty,0) as rejected_qty,
			prakruti_process_quality_control_line_qa.status,
			prakruti_process_quality_control_line_qa.test_result,
			prakruti_process_quality_control_line_qa.remarks,
			prakruti_process_quality_control_line_qa.scheduled_qty,
			prakruti_process_quality_control_line_qa.dispatch_line_grid_id,
			prakruti_process_quality_control_line_qa.state,
                        prakruti_process_quality_control_line_qa.batch_list,
                        prakruti_process_quality_control_line_qa.ar_no,
			prakruti_process_quality_check_qa_ha.id as qc_check_line_id
		FROM
			prakruti_process_quality_control_line_qa
                INNER JOIN
                        prakruti_process_quality_control_qa
		ON
			prakruti_process_quality_control_line_qa.qc_check_line_id=prakruti_process_quality_control_qa.id 
                INNER JOIN
                        prakruti_process_quality_check_qa_ha
                ON
                        prakruti_process_quality_check_qa_ha.dispatch_no = prakruti_process_quality_control_qa.dispatch_no
                        
		WHERE 
			prakruti_process_quality_control_line_qa.qc_check_line_id=$1
			AND prakruti_process_quality_control_qa.dispatch_no=$2)
				AS B;
				
				
                INSERT INTO prakruti_dispatch_qa_ha_batch_list_line
                    (
                    create_uid,
                    write_uid,
                    create_date,
                    write_date,            
                    dispatch_qa_ha_id,            
                    product_id,
                    uom_id,
                    dispatched_qty,
                    batch_no,
                    packing_details,
                    batch_size,
                    batch_qty,
                    remarks,
                    specification_id,
                    ar_id,
                    dispatch_batch_line_id
                    )
                SELECT
                    create_uid,
                    write_uid,
                    create_date,
                    write_date,            
                    dispatch_qa_ha_id,            
                    product_id,
                    uom_id,
                    dispatched_qty,
                    batch_no,
                    packing_details,
                    batch_size,
                    batch_qty,
                    remarks,
                    specification_id,
                    ar_id,
                    dispatch_batch_line_id
                FROM(
                    SELECT 
                        prakruti_dispatch_qa_batch_list_line.create_uid,
                        prakruti_dispatch_qa_batch_list_line.write_uid,
                        prakruti_dispatch_qa_batch_list_line.create_date,
                        prakruti_dispatch_qa_batch_list_line.write_date,                
                        prakruti_dispatch_qa_batch_list_line.product_id,
                        prakruti_dispatch_qa_batch_list_line.uom_id,
                        prakruti_dispatch_qa_batch_list_line.dispatched_qty,
                        prakruti_dispatch_qa_batch_list_line.batch_no,                
                        prakruti_dispatch_qa_batch_list_line.packing_details,                
                        prakruti_dispatch_qa_batch_list_line.batch_size,
                        prakruti_dispatch_qa_batch_list_line.batch_qty,
                        prakruti_dispatch_qa_batch_list_line.remarks,
                        prakruti_dispatch_qa_batch_list_line.specification_id,
                        prakruti_dispatch_qa_batch_list_line.ar_id,
                        prakruti_dispatch_qa_batch_list_line.dispatch_batch_line_id,
                        prakruti_process_quality_control_qa.dispatch_no
                    FROM 
                        prakruti_dispatch_qa_batch_list_line JOIN
                        prakruti_process_quality_control_qa ON 
                        prakruti_dispatch_qa_batch_list_line.dispatch_qa_id = prakruti_process_quality_control_qa.id 
                    WHERE 
                        prakruti_dispatch_qa_batch_list_line.dispatch_qa_id = $1 AND
                        prakruti_process_quality_control_qa.dispatch_no = $2
                        ) AS a JOIN (
                        SELECT 
                            prakruti_process_quality_check_qa_ha.id AS dispatch_qa_ha_id,
                            prakruti_process_quality_check_qa_ha.dispatch_no
                        FROM  
                            prakruti_process_quality_check_qa_ha
                        WHERE
                            prakruti_process_quality_check_qa_ha.dispatch_no = $2 
                        ORDER BY id desc limit 1
                                    ) AS b ON a.dispatch_no = b.dispatch_no;
ELSE
	RETURN
		'Please Select the Quality Incharge and Checked By Person';
END IF;
UPDATE 
    prakruti_process_quality_control_qa 
SET 
    flag_rejected_count =3 
WHERE 
    id=$1;
			

UPDATE 
    prakruti_dispatch 
set 
    qa_status ='process_qa_ha' 
where 
    dispatch_no=$2;			
			
		
	
RETURN qty;
                                
END;
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION public.dispatch_qa_to_ha(integer,character varying)
  OWNER TO odoo;


--DROP FUNCTION dispatch_qa_to_dispatch(integer,character varying)
CREATE OR REPLACE FUNCTION public.dispatch_qa_to_dispatch(integer,character varying)
  RETURNS character varying AS
$BODY$
DECLARE qty   integer;
no_of_products_in_dispatch integer;
no_of_products_in_qaha integer;
qa_state text;
no_of_products_in_qa integer;
qc_check_flag integer;
come_from character varying;
quality_incharged integer;
check_by integer;
BEGIN
qty = 0;
qc_check_flag=0;
come_from=NULL;
quality_incharged=NULL;
check_by=Null;
SELECT 
    prakruti_process_quality_control_qa.qc_check_flag INTO qc_check_flag
FROM
    prakruti_process_quality_control_qa
WHERE
    prakruti_process_quality_control_qa.id = $1;

SELECT 
    prakruti_process_quality_control_qa.coming_from INTO come_from
FROM
    prakruti_process_quality_control_qa
WHERE
    prakruti_process_quality_control_qa.id = $1;
IF (qc_check_flag = 2 OR qc_check_flag=3) AND (come_from ='qc_check')
THEN
	SELECT 
		quality_incharge INTO quality_incharged
	FROM
            prakruti_process_quality_control_qa
        WHERE
            prakruti_process_quality_control_qa.id = $1;
            
        SELECT 
            checked_by INTO check_by
        FROM
            prakruti_process_quality_control_qa
        WHERE
            prakruti_process_quality_control_qa.id =$1;
	IF quality_incharged>0 AND check_by>0
	THEN
		SELECT 
			count(prakruti_dispatch_line.id) INTO no_of_products_in_dispatch 
		FROM
			prakruti_dispatch_line INNER JOIN 
			prakruti_dispatch ON 
			prakruti_dispatch.id=prakruti_dispatch_line.main_id JOIN
			prakruti_process_quality_control_qa ON
			prakruti_process_quality_control_qa.dispatch_no=prakruti_dispatch.dispatch_no
		WHERE
			prakruti_process_quality_control_qa.dispatch_no=$2 AND
			prakruti_process_quality_control_qa.id=$1;
		SELECT 
			count(prakruti_process_quality_control_line_qa.id) INTO no_of_products_in_qaha
		FROM
			prakruti_process_quality_control_line_qa INNER JOIN 
			prakruti_process_quality_control_qa ON 
			prakruti_process_quality_control_line_qa.qc_check_line_id=prakruti_process_quality_control_qa.id JOIN 
			prakruti_dispatch ON 
			prakruti_dispatch.dispatch_no=prakruti_process_quality_control_qa.dispatch_no JOIN 
			prakruti_process_quality_check_qa_ha ON 
			prakruti_process_quality_check_qa_ha.dispatch_no=prakruti_dispatch.dispatch_no 
		WHERE
			prakruti_process_quality_control_qa.dispatch_no=$2;
		SELECT 
			count(prakruti_process_quality_control_line_qa.id) INTO no_of_products_in_qa 
		FROM 
			prakruti_process_quality_control_line_qa INNER JOIN 
			prakruti_process_quality_control_qa ON 
			prakruti_process_quality_control_line_qa.qc_check_line_id=prakruti_process_quality_control_qa.id JOIN 
			prakruti_dispatch ON prakruti_dispatch.dispatch_no=prakruti_process_quality_control_qa.dispatch_no 
		WHERE
			prakruti_process_quality_control_qa.dispatch_no=$2;
		SELECT 
			prakruti_process_quality_control_qa.state INTO qa_state
		FROM 
			prakruti_process_quality_control_qa 
		WHERE 
			prakruti_process_quality_control_qa.dispatch_no=$2 AND
			prakruti_process_quality_control_qa.id=$1;
		IF no_of_products_in_dispatch=no_of_products_in_qa
		THEN
			UPDATE prakruti_dispatch_line set qc_flag=2  WHERE prakruti_dispatch_line.main_id=$1 AND send_status = 'dispatch';
                        UPDATE prakruti_dispatch set state ='quality_check_done',qa_check_flag=2  WHERE dispatch_no=$2;
                        UPDATE prakruti_dispatch set qa_status ='process_qa_done'  WHERE dispatch_no=$2;
                        
		ELSIF (qa_state ='process_qa_ha')AND ( no_of_products_in_dispatch=no_of_products_in_qaha)
		THEN
                        UPDATE prakruti_dispatch set state ='quality_check_done',qa_check_flag=2 WHERE dispatch_no=$2;
                        UPDATE prakruti_dispatch set qa_status ='process_qa_done'  WHERE dispatch_no=$2;
                        UPDATE prakruti_dispatch_line set qc_flag=2  WHERE prakruti_dispatch_line.main_id=$1 AND send_status = 'dispatch';
		ELSE
                        UPDATE prakruti_dispatch set state ='quality_check_done',qa_check_flag=3  WHERE dispatch_no=$2;
                        UPDATE prakruti_dispatch set qa_status ='process_qa_done'  WHERE dispatch_no=$2;
                        UPDATE prakruti_dispatch_line set qc_flag=2  WHERE prakruti_dispatch_line.main_id=$1 AND send_status = 'dispatch';
                END IF;
                
                UPDATE 
			prakruti_dispatch_line AS b 
			SET 
				accepted_qty =a.accepted_qty,
				rejected_qty=a.rejected_qty,
				specification_id=a.specification_id,
				state = a.state,status = a.status,
				dispatched_qty = a.accepted_qty 
			FROM(
				SELECT 
					qc_check_line_id,
					dispatch_line_grid_id,
					product_id,
					accepted_qty,
					specification_id,
					rejected_qty,
					state,
					status,
					scheduled_qty
				 FROM 
					prakruti_process_quality_control_line_qa 
				WHERE 
					qc_check_line_id= $1
			) AS a 
		WHERE 
			a.dispatch_line_grid_id = b.id AND 
			a.product_id = b.product_id;
		
		UPDATE 
                        prakruti_dispatch_batch_list_line AS b 
                SET 
                        specification_id =a.specification_id,
                        ar_id=a.ar_id
                FROM(
                        SELECT 
                                product_id,
                                specification_id,
                                ar_id,
                                dispatch_batch_line_id
                        FROM 
                                prakruti_dispatch_qa_batch_list_line 
                        WHERE 
                                dispatch_qa_id= $1 
                        ) AS a 
                WHERE 
                        a.dispatch_batch_line_id = b.id AND 
                        a.product_id = b.product_id;
		
		
		UPDATE
			prakruti_process_quality_control_qa 
		SET 
			state = 'process_qa_done' 
		WHERE 
			prakruti_process_quality_control_qa.dispatch_no =$2;
        
        ELSE
            RETURN 'Please Select the Quality Incharge and Checked By Person';
        END IF;
ELSE
    RETURN 'Quality Check Is Not Done Yet Still If You want to Dispatch The Material Please Go for the HA';
END IF;

RETURN qty;
                                
END;
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION public.dispatch_qa_to_dispatch(integer,character varying)
  OWNER TO odoo;


  
  
--DROP FUNCTION public.dispatch_qaha_to_dispatch(integer,character varying))
CREATE OR REPLACE FUNCTION public.dispatch_qaha_to_dispatch(integer,character varying)
  RETURNS integer AS
$BODY$
DECLARE qty   integer;
no_of_products_in_dispatch integer;
no_of_products_in_qa_ha integer;
no_of_products_in_qaha integer;
qaha_state character varying;
BEGIN
qty = 0;
SELECT 
	count(prakruti_dispatch_line.id) INTO no_of_products_in_dispatch 
FROM 
	prakruti_dispatch_line INNER JOIN 
	prakruti_dispatch ON 
	prakruti_dispatch.id=prakruti_dispatch_line.main_id JOIN 
	prakruti_process_quality_check_qa_ha ON 
	prakruti_process_quality_check_qa_ha.dispatch_no=prakruti_dispatch.dispatch_no
WHERE 
	prakruti_process_quality_check_qa_ha.dispatch_no=$2 AND
	prakruti_process_quality_check_qa_ha.id=$1;
SELECT 
	count(DISTINCT prakruti_process_quality_check_line_qa_ha.id) INTO no_of_products_in_qa_ha 
FROM 
	prakruti_process_quality_check_line_qa_ha INNER JOIN 
	prakruti_process_quality_check_qa_ha ON 
	prakruti_process_quality_check_line_qa_ha.qc_check_line_id=prakruti_process_quality_check_qa_ha.id JOIN 
	prakruti_dispatch ON prakruti_dispatch.dispatch_no=prakruti_process_quality_check_qa_ha.dispatch_no JOIN 
	prakruti_process_quality_control_qa ON 
	prakruti_process_quality_control_qa.dispatch_no=prakruti_dispatch.dispatch_no 
WHERE 
	prakruti_process_quality_check_qa_ha.dispatch_no=$2;
SELECT 
	count(prakruti_process_quality_check_line_qa_ha.id) INTO no_of_products_in_qaha 
FROM 
	prakruti_process_quality_check_line_qa_ha INNER JOIN 
	prakruti_process_quality_check_qa_ha ON 
	prakruti_process_quality_check_line_qa_ha.qc_check_line_id=prakruti_process_quality_check_qa_ha.id JOIN 
	prakruti_dispatch ON 
	prakruti_dispatch.dispatch_no=prakruti_process_quality_check_qa_ha.dispatch_no 
WHERE 
	prakruti_process_quality_check_qa_ha.dispatch_no=$2;

SELECT 
	prakruti_process_quality_check_qa_ha.state INTO qaha_state 
FROM 
	prakruti_process_quality_check_qa_ha 
WHERE 
	prakruti_process_quality_check_qa_ha.dispatch_no= $2 AND 
	prakruti_process_quality_check_qa_ha.id=$1;
IF no_of_products_in_dispatch=no_of_products_in_qaha THEN
	UPDATE prakruti_dispatch_line set qc_flag=2  WHERE prakruti_dispatch_line.main_id=$1 AND send_status = 'dispatch';
        UPDATE prakruti_dispatch set state ='quality_check_done',qa_check_flag=2  WHERE dispatch_no=$2;
        UPDATE prakruti_dispatch set qa_status ='process_qaha_done'  WHERE dispatch_no=$2;
ELSIF (qaha_state ='draft')AND ( no_of_products_in_dispatch=no_of_products_in_qa_ha) THEN
	UPDATE prakruti_dispatch set state ='quality_check_done',qa_check_flag=2 WHERE dispatch_no=$2;
        UPDATE prakruti_dispatch set qa_status ='process_qaha_done'  WHERE dispatch_no=$2;
        UPDATE prakruti_dispatch_line set qc_flag=2  WHERE prakruti_dispatch_line.main_id=$1 AND send_status = 'dispatch';
ELSE
	UPDATE prakruti_dispatch set state ='quality_check_done',qa_check_flag=3  WHERE dispatch_no=$2;
        UPDATE prakruti_dispatch set qa_status ='process_qaha_done'  WHERE dispatch_no=$2;
        UPDATE prakruti_dispatch_line set qc_flag=2  WHERE prakruti_dispatch_line.main_id=$1 AND send_status = 'dispatch';
END IF;
UPDATE 
	prakruti_dispatch_line AS b
SET 
	accepted_qty =a.accepted_qty,
	rejected_qty=a.rejected_qty,
	specification_id=a.specification_id,
	state = a.state,
	status = a.status,
	dispatched_qty = a.accepted_qty 
FROM(
	SELECT 
		qc_check_line_id,
		dispatch_line_grid_id,
		product_id,
		accepted_qty,
		specification_id,
		rejected_qty,
		state,
		status,
		scheduled_qty 
	FROM 
		prakruti_process_quality_check_line_qa_ha 
	WHERE
		qc_check_line_id= $1 
	) AS a
 WHERE 
	a.dispatch_line_grid_id = b.id AND
	a.product_id = b.product_id;
		
UPDATE 
        prakruti_dispatch_batch_list_line AS b 
SET 
        specification_id =a.specification_id,
        ar_id=a.ar_id
FROM(
        SELECT 
                product_id,
                specification_id,
                ar_id,
                dispatch_batch_line_id
        FROM 
                prakruti_dispatch_qa_ha_batch_list_line 
        WHERE 
                dispatch_qa_ha_id= $1 
        ) AS a 
WHERE 
        a.dispatch_batch_line_id = b.id AND 
        a.product_id = b.product_id;
UPDATE
	prakruti_process_quality_check_qa_ha 
SET 
	state = 'done' 
WHERE 
	prakruti_process_quality_check_qa_ha.dispatch_no = $2;

RETURN qty;
                                
END;
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION public.dispatch_qaha_to_dispatch(integer,character varying)
  OWNER TO odoo;

  
-- Function: public.calculation_update_sales_order_gst(integer)

-- DROP FUNCTION public.calculation_update_sales_order_gst(integer);

CREATE OR REPLACE FUNCTION public.calculation_update_sales_order_gst(integer)
  RETURNS integer AS
$BODY$
DECLARE qty   integer;
BEGIN

qty = 0;


--TOTAL AMOUNT FOR THE GRID

UPDATE 
    prakruti_sales_order_item 
SET  
    amount= total_scheduled_qty * unit_price
WHERE
    prakruti_sales_order_item.main_id = $1;


--TAXABLE VALUE FOR THE GRID

UPDATE 
    prakruti_sales_order_item 
SET  
    taxable_value= amount - (amount*(discount/100)) 
WHERE
    prakruti_sales_order_item.main_id = $1;
    
--ADDITIONAL CHARGES

UPDATE
        prakruti_sales_order
SET
        all_additional_charges = freight_charges + loading_and_packing_charges + insurance_charges + other_charges
WHERE
        prakruti_sales_order.id = $1;
        
--TOTAL NO OF PRODUCTS

UPDATE 
    prakruti_sales_order AS b 
SET 
    total_no_of_products =a.total_no_of_products
FROM(SELECT 
        SUM(prakruti_sales_order_item.total_scheduled_qty) AS total_no_of_products,
        prakruti_sales_order.id
    FROM 
        prakruti_sales_order_item JOIN
        prakruti_sales_order ON
        prakruti_sales_order.id = prakruti_sales_order_item.main_id
    WHERE 
        prakruti_sales_order_item.main_id= $1 AND prakruti_sales_order.id = $1 
    GROUP BY 
        prakruti_sales_order.id
        ) AS a 
WHERE 
    a.id = b.id;



-- TOTAL TAXBLE VALUE
 UPDATE prakruti_sales_order SET 
                                total_taxable_value = b.taxable_value
    FROM(

    SELECT
        sum(prakruti_sales_order_item.taxable_value) as taxable_value,
        prakruti_sales_order.id
    FROM
        prakruti_sales_order_item INNER JOIN
        prakruti_sales_order ON
        prakruti_sales_order_item.main_id = prakruti_sales_order.id
     WHERE
        prakruti_sales_order.id = $1 and prakruti_sales_order_item.main_id = $1
        GROUP BY 
        prakruti_sales_order.id
        
    )as b     
        WHERE 
             prakruti_sales_order.id = b.id;
        
-- PROPORTIONATE AMOUNT TO PRODUCTS

UPDATE
        prakruti_sales_order
SET
        proportionate_amount_to_products = all_additional_charges/total_taxable_value
WHERE
        prakruti_sales_order.id = $1;

    
    
-- TAXABLE AMOUNT WITH CHARGES

UPDATE prakruti_sales_order_item SET 
                                taxable_value_with_charges = b.total_quantity
    FROM(

    SELECT
        (sum(prakruti_sales_order_item.taxable_value) + (sum(prakruti_sales_order_item.taxable_value) * sum(prakruti_sales_order.proportionate_amount_to_products))) as total_quantity,
        prakruti_sales_order_item.id
    FROM
        prakruti_sales_order_item INNER JOIN
        prakruti_sales_order ON
        prakruti_sales_order_item.main_id = prakruti_sales_order.id
     WHERE
        prakruti_sales_order.id = $1 and prakruti_sales_order_item.main_id = $1
        GROUP BY 
        prakruti_sales_order_item.id
        
    )as b     
        WHERE 
             prakruti_sales_order_item.id = b.id;

   
    
-- CGST VALUE FOR THE GRID

UPDATE 
    prakruti_sales_order_item
    SET
        cgst_amount = taxable_value_with_charges * (cgst_value/100)
    WHERE
        main_id=$1;
    
    
-- SGST VALUE FOR THE GRID

UPDATE 
    prakruti_sales_order_item
    SET
        sgst_amount = taxable_value_with_charges * (sgst_value/100)
    WHERE
        main_id=$1;
    
    
-- IGST VALUE FOR THE GRID

UPDATE 
    prakruti_sales_order_item
    SET
        igst_amount = taxable_value_with_charges * (igst_value/100)
    WHERE
        main_id=$1;
    
    
-- GST VALUE FOR THE GRID

UPDATE 
    prakruti_sales_order_item
    SET
        gst_rate = cgst_value + sgst_value + igst_value
    WHERE
        main_id=$1;
        
        
-- TOTAL VALUE FOR THE GRID

UPDATE 
    prakruti_sales_order_item
    SET
        total = taxable_value_with_charges + cgst_amount + sgst_amount + igst_amount
    WHERE
        main_id=$1;
    
    
    

--TOTAL AMOUNT BEFORE TAX

UPDATE prakruti_sales_order SET 
                                total_amount_before_tax = b.total_quantity
    FROM(

    SELECT
        sum(prakruti_sales_order_item.taxable_value_with_charges) as total_quantity,
        prakruti_sales_order.id
    FROM
        prakruti_sales_order_item INNER JOIN
        prakruti_sales_order ON
        prakruti_sales_order_item.main_id = prakruti_sales_order.id
     WHERE
        prakruti_sales_order.id = $1 and prakruti_sales_order_item.main_id = $1
        GROUP BY 
        prakruti_sales_order.id
        
    )as b     
        WHERE 
             prakruti_sales_order.id = b.id;
    
    
    

--TOTAL CGST

UPDATE prakruti_sales_order SET 
                                total_cgst_amount = b.total_quantity
    FROM(

    SELECT
        sum(prakruti_sales_order_item.cgst_amount) as total_quantity,
        prakruti_sales_order.id
    FROM
        prakruti_sales_order_item INNER JOIN
        prakruti_sales_order ON
        prakruti_sales_order_item.main_id = prakruti_sales_order.id
     WHERE
        prakruti_sales_order.id = $1 and prakruti_sales_order_item.main_id = $1
        GROUP BY 
        prakruti_sales_order.id
        
    )as b     
        WHERE 
             prakruti_sales_order.id = b.id;
    
    
    

--TOTAL SGST

UPDATE prakruti_sales_order SET 
                                total_sgst_amount = b.total_quantity
    FROM(

    SELECT
        sum(prakruti_sales_order_item.sgst_amount) as total_quantity,
        prakruti_sales_order.id
    FROM
        prakruti_sales_order_item INNER JOIN
        prakruti_sales_order ON
        prakruti_sales_order_item.main_id = prakruti_sales_order.id
     WHERE
        prakruti_sales_order.id = $1 and prakruti_sales_order_item.main_id = $1
        GROUP BY 
        prakruti_sales_order.id
        
    )as b     
        WHERE 
             prakruti_sales_order.id = b.id;
    
    
    

--TOTAL IGST

UPDATE prakruti_sales_order SET 
                                total_igst_amount = b.total_quantity
    FROM(

    SELECT
        sum(prakruti_sales_order_item.igst_amount) as total_quantity,
        prakruti_sales_order.id
    FROM
        prakruti_sales_order_item INNER JOIN
        prakruti_sales_order ON
        prakruti_sales_order_item.main_id = prakruti_sales_order.id
     WHERE
        prakruti_sales_order.id = $1 and prakruti_sales_order_item.main_id = $1
        GROUP BY 
        prakruti_sales_order.id
        
    )as b     
        WHERE 
             prakruti_sales_order.id = b.id;
             
             
             
-- TOTAL GST AMOUNT

UPDATE
        prakruti_sales_order
SET
        total_gst_amount = total_cgst_amount + total_sgst_amount + total_igst_amount
WHERE
        prakruti_sales_order.id = $1;
    
    
    

--GRAND TOTAL AFTER TAX

UPDATE prakruti_sales_order SET 
                                total_amount_after_tax = b.total_quantity
    FROM(

    SELECT
        sum(prakruti_sales_order_item.total) as total_quantity,
        prakruti_sales_order.id
    FROM
        prakruti_sales_order_item INNER JOIN
        prakruti_sales_order ON
        prakruti_sales_order_item.main_id = prakruti_sales_order.id
     WHERE
        prakruti_sales_order.id = $1 and prakruti_sales_order_item.main_id = $1
        GROUP BY 
        prakruti_sales_order.id
        
    )as b     
        WHERE 
             prakruti_sales_order.id = b.id;


             
--GRAND TOTAL AFTER TAX

UPDATE prakruti_sales_order SET  grand_total = (taat - cash - cheque - draft) FROM
                                (
                                SELECT 
                                        COALESCE(prakruti_sales_order.total_amount_after_tax,0) AS taat,
                                        COALESCE(prakruti_sales_order.cash_amount,0) AS cash,
                                        COALESCE(prakruti_sales_order.cheque_amount,0) AS cheque,
                                        COALESCE(prakruti_sales_order.draft_amount,0) AS draft,
                                        prakruti_sales_order.id
                                FROM
                                        prakruti_sales_order
                                WHERE
                                        prakruti_sales_order.id = $1)AS b WHERE prakruti_sales_order.id = b.id;

RETURN qty;
                                
END;
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION public.calculation_update_sales_order_gst(integer)
  OWNER TO odoo;

  
  -- Function: public.calculation_purchase_order(integer)

-- DROP FUNCTION public.calculation_purchase_order(integer);

CREATE OR REPLACE FUNCTION public.calculation_purchase_order(integer)
  RETURNS integer AS
$BODY$
DECLARE qty   integer;
BEGIN

qty = 0;

--GRID CALCULATION
--compute= '_compute_price_total'
--compute= '_compute_line_discount'
--compute='_compute_taxable_value' 
--compute= '_compute_taxable_value_after_adding_others'
--compute= '_compute_cgst_value'
--compute= '_compute_igst_value'
--compute= '_compute_sgst_value'
--compute= '_compute_subtotal'

--PARENT CALCULATION
--compute='_total_no_of_product'
--compute= '_compute_taxed_amount'


--compute= '_compute_total_igst'
--compute= '_compute_total_sgst'
--compute= '_compute_total_cgst'
--compute= '_compute_total_gst' 
--compute= '_compute_grand_total'


-- compute= '_compute_total_amount'
-- compute= '_compute_all_additional_charges'
-- compute= '_compute_proportionate_amount_to_products'
-- compute= '_compute_total_taxable'

--TOTAL AMOUNT FOR THE GRID

UPDATE 
    prakruti_purchase_line 
SET  
    total= quantity * unit_price
WHERE
    prakruti_purchase_line.purchase_line_id = $1 AND prakruti_purchase_line.status = 'open';


--TAXABLE VALUE FOR THE GRID

UPDATE 
    prakruti_purchase_line 
SET  
    taxable_value = total - (total*(discount_rate/100)) 
WHERE
    prakruti_purchase_line.purchase_line_id = $1 AND prakruti_purchase_line.status = 'open';
    
--ADDITIONAL CHARGES

UPDATE
        prakruti_purchase_order
SET
        all_additional_charges = a.frieght_charges + a.packing_charges + a.insurance_charges + a.additional_charges
        FROM(SELECT
                COALESCE(prakruti_purchase_order.frieght_charges,0) AS frieght_charges,
                COALESCE(prakruti_purchase_order.packing_charges,0) AS packing_charges,
                COALESCE(prakruti_purchase_order.insurance_charges,0) AS insurance_charges,
                COALESCE(prakruti_purchase_order.additional_charges,0) AS additional_charges,
                prakruti_purchase_order.id
            FROM
                prakruti_purchase_order
            WHERE 
                prakruti_purchase_order.id = $1
        ) AS a
WHERE
        a.id = prakruti_purchase_order.id;
        
--TOTAL TAXABLE VALUE

UPDATE 
    prakruti_purchase_order AS b 
SET 
    total_taxable_value =a.total_taxable_value
FROM(SELECT 
        SUM(prakruti_purchase_line.taxable_value) AS total_taxable_value,
        prakruti_purchase_order.id
    FROM 
        prakruti_purchase_line JOIN
        prakruti_purchase_order ON
        prakruti_purchase_order.id = prakruti_purchase_line.purchase_line_id
    WHERE 
        prakruti_purchase_line.purchase_line_id= $1 AND prakruti_purchase_order.id = $1 AND prakruti_purchase_line.status = 'open' 
    GROUP BY 
        prakruti_purchase_order.id
        ) AS a 
WHERE 
    a.id = b.id;
        
-- PROPORTIONATE AMOUNT TO PRODUCTS

UPDATE
        prakruti_purchase_order
SET
        proportionate_amount_to_products = all_additional_charges/total_taxable_value
WHERE
        prakruti_purchase_order.id = $1;
    
--TAXABLE VALUE AFTER CHARGES FOR THE GRID

UPDATE 
    prakruti_purchase_line 
SET  
    taxable_value_after_adding_other = a.taxable_value + (a.taxable_value * a.proportionate_amount_to_products)
FROM(SELECT 
        prakruti_purchase_line.taxable_value AS taxable_value,
        prakruti_purchase_order.proportionate_amount_to_products AS proportionate_amount_to_products,
        prakruti_purchase_line.id
    FROM 
        prakruti_purchase_line JOIN
        prakruti_purchase_order ON
        prakruti_purchase_order.id = prakruti_purchase_line.purchase_line_id
    WHERE 
        prakruti_purchase_line.purchase_line_id= $1 AND prakruti_purchase_order.id = $1 AND prakruti_purchase_line.status = 'open'
        ) AS a 
WHERE 
    a.id = prakruti_purchase_line.id;
    
    
--CGST AMOUNT FOR THE GRID

UPDATE 
    prakruti_purchase_line 
SET  
    cgst_value = a.taxable_value_after_adding_other * (a.cgst_rate/100)
FROM(SELECT 
        prakruti_purchase_line.taxable_value_after_adding_other AS taxable_value_after_adding_other,
        prakruti_purchase_line.cgst_rate AS cgst_rate,
        prakruti_purchase_line.id
    FROM 
        prakruti_purchase_line JOIN
        prakruti_purchase_order ON
        prakruti_purchase_order.id = prakruti_purchase_line.purchase_line_id
    WHERE 
        prakruti_purchase_line.purchase_line_id= $1 AND prakruti_purchase_order.id = $1 AND prakruti_purchase_line.status = 'open'
        ) AS a 
WHERE 
    a.id = prakruti_purchase_line.id;
    
    
--SGST AMOUNT FOR THE GRID

UPDATE 
    prakruti_purchase_line 
SET  
    sgst_value = a.taxable_value_after_adding_other * a.sgst_rate/100
FROM(SELECT 
        prakruti_purchase_line.taxable_value_after_adding_other AS taxable_value_after_adding_other,
        prakruti_purchase_line.sgst_rate AS sgst_rate,
        prakruti_purchase_line.id
    FROM 
        prakruti_purchase_line JOIN
        prakruti_purchase_order ON
        prakruti_purchase_order.id = prakruti_purchase_line.purchase_line_id
    WHERE 
        prakruti_purchase_line.purchase_line_id= $1 AND prakruti_purchase_order.id = $1 AND prakruti_purchase_line.status = 'open'
        ) AS a 
WHERE 
    a.id = prakruti_purchase_line.id;
    
    
--IGST AMOUNT FOR THE GRID

UPDATE 
    prakruti_purchase_line 
SET  
    igst_value = a.taxable_value_after_adding_other * a.igst_rate/100
FROM(SELECT 
        prakruti_purchase_line.taxable_value_after_adding_other AS taxable_value_after_adding_other,
        prakruti_purchase_line.igst_rate AS igst_rate,
        prakruti_purchase_line.id
    FROM 
        prakruti_purchase_line JOIN
        prakruti_purchase_order ON
        prakruti_purchase_order.id = prakruti_purchase_line.purchase_line_id
    WHERE 
        prakruti_purchase_line.purchase_line_id= $1 AND prakruti_purchase_order.id = $1 AND prakruti_purchase_line.status = 'open'
        ) AS a 
WHERE 
    a.id = prakruti_purchase_line.id;


--SUBTOTAL FOR THE GRID

UPDATE 
    prakruti_purchase_line 
SET  
    subtotal= taxable_value_after_adding_other + cgst_value + sgst_value + igst_value
WHERE
    prakruti_purchase_line.purchase_line_id = $1 AND prakruti_purchase_line.status = 'open';
        
--TOTAL AMOUNT VALUE

UPDATE 
    prakruti_purchase_order AS b 
SET 
    total_amount =a.total_amount
FROM(SELECT 
        SUM(prakruti_purchase_line.total) AS total_amount,
        prakruti_purchase_order.id
    FROM 
        prakruti_purchase_line JOIN
        prakruti_purchase_order ON
        prakruti_purchase_order.id = prakruti_purchase_line.purchase_line_id
    WHERE 
        prakruti_purchase_line.purchase_line_id= $1 AND prakruti_purchase_order.id = $1 AND prakruti_purchase_line.status = 'open' 
    GROUP BY 
        prakruti_purchase_order.id
        ) AS a 
WHERE 
    a.id = b.id;


--TOTAL DISCOUNT FOR THE GRID

UPDATE 
    prakruti_purchase_line 
SET  
    discount_value= total * (discount_rate/100)
WHERE
    prakruti_purchase_line.purchase_line_id = $1 AND prakruti_purchase_line.status = 'open';
        
--TOTAL NO OF PRODUCTS

UPDATE 
    prakruti_purchase_order AS b 
SET 
    no_of_product =a.no_of_product
FROM(SELECT 
        SUM(prakruti_purchase_line.quantity) AS no_of_product,
        prakruti_purchase_order.id
    FROM 
        prakruti_purchase_line JOIN
        prakruti_purchase_order ON
        prakruti_purchase_order.id = prakruti_purchase_line.purchase_line_id
    WHERE 
        prakruti_purchase_line.purchase_line_id= $1 AND prakruti_purchase_order.id = $1 AND prakruti_purchase_line.status = 'open' 
    GROUP BY 
        prakruti_purchase_order.id
        ) AS a 
WHERE 
    a.id = b.id;
    
    
    

--TOTAL AMOUNT BEFORE TAX

UPDATE prakruti_purchase_order SET 
                                amount_taxed = b.total_quantity
    FROM(

    SELECT
        sum(prakruti_purchase_line.taxable_value_after_adding_other) as total_quantity,
        prakruti_purchase_order.id
    FROM
        prakruti_purchase_line INNER JOIN
        prakruti_purchase_order ON
        prakruti_purchase_line.purchase_line_id = prakruti_purchase_order.id
     WHERE
        prakruti_purchase_order.id = $1 and prakruti_purchase_line.purchase_line_id = $1 AND prakruti_purchase_line.status = 'open'
        GROUP BY 
        prakruti_purchase_order.id
        
    )as b     
        WHERE 
             prakruti_purchase_order.id = b.id;
    
    
    

--TOTAL CGST

UPDATE prakruti_purchase_order SET 
                                total_cgst = b.total_quantity
    FROM(

    SELECT
        sum(prakruti_purchase_line.cgst_value) as total_quantity,
        prakruti_purchase_order.id
    FROM
        prakruti_purchase_line INNER JOIN
        prakruti_purchase_order ON
        prakruti_purchase_line.purchase_line_id = prakruti_purchase_order.id
     WHERE
        prakruti_purchase_order.id = $1 and prakruti_purchase_line.purchase_line_id = $1 AND prakruti_purchase_line.status = 'open'
        GROUP BY 
        prakruti_purchase_order.id
        
    )as b     
        WHERE 
             prakruti_purchase_order.id = b.id;
    
    
    

--TOTAL SGST

UPDATE prakruti_purchase_order SET 
                                total_sgst = b.total_quantity
    FROM(

    SELECT
        sum(prakruti_purchase_line.sgst_value) as total_quantity,
        prakruti_purchase_order.id
    FROM
        prakruti_purchase_line INNER JOIN
        prakruti_purchase_order ON
        prakruti_purchase_line.purchase_line_id = prakruti_purchase_order.id
     WHERE
        prakruti_purchase_order.id = $1 and prakruti_purchase_line.purchase_line_id = $1 AND prakruti_purchase_line.status = 'open'
        GROUP BY 
        prakruti_purchase_order.id
        
    )as b     
        WHERE 
             prakruti_purchase_order.id = b.id;
    
    
    

--TOTAL SGST

UPDATE prakruti_purchase_order SET 
                                total_igst = b.total_quantity
    FROM(

    SELECT
        sum(prakruti_purchase_line.igst_value) as total_quantity,
        prakruti_purchase_order.id
    FROM
        prakruti_purchase_line INNER JOIN
        prakruti_purchase_order ON
        prakruti_purchase_line.purchase_line_id = prakruti_purchase_order.id
     WHERE
        prakruti_purchase_order.id = $1 and prakruti_purchase_line.purchase_line_id = $1 AND prakruti_purchase_line.status = 'open'
        GROUP BY 
        prakruti_purchase_order.id
        
    )as b     
        WHERE 
             prakruti_purchase_order.id = b.id;
             
             
             
-- TOTAL GST AMOUNT

UPDATE
        prakruti_purchase_order
SET
        total_gst = total_cgst + total_sgst + total_igst
WHERE
        prakruti_purchase_order.id = $1;
    
    
    

--TOTAL AFTER TAX

UPDATE prakruti_purchase_order SET 
                                grand_total = b.total_quantity
    FROM(

    SELECT
        sum(prakruti_purchase_line.subtotal) as total_quantity,
        prakruti_purchase_order.id
    FROM
        prakruti_purchase_line INNER JOIN
        prakruti_purchase_order ON
        prakruti_purchase_line.purchase_line_id = prakruti_purchase_order.id
     WHERE
        prakruti_purchase_order.id = $1 and prakruti_purchase_line.purchase_line_id = $1 AND prakruti_purchase_line.status = 'open'
        GROUP BY 
        prakruti_purchase_order.id
        
    )as b     
        WHERE 
             prakruti_purchase_order.id = b.id;
    
    
    

--GRAND TOTAL AFTER TAX

UPDATE prakruti_purchase_order SET  grand_total_after_payments = (gt - cash - cheque - draft) FROM
                                (
                                SELECT 
                                        COALESCE(prakruti_purchase_order.grand_total,0) AS gt,
                                        COALESCE(prakruti_purchase_order.cash_amount,0) AS cash,
                                        COALESCE(prakruti_purchase_order.cheque_amount,0) AS cheque,
                                        COALESCE(prakruti_purchase_order.draft_amount,0) AS draft,
                                        prakruti_purchase_order.id
                                FROM
                                        prakruti_purchase_order
                                WHERE
                                        prakruti_purchase_order.id = $1)AS b WHERE prakruti_purchase_order.id = b.id;

RETURN qty;
                                
END;
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION public.calculation_purchase_order(integer)
  OWNER TO odoo;
  
  
-- Function: public.calculation_purchase_invoice(integer)

-- DROP FUNCTION public.calculation_purchase_invoice(integer);

CREATE OR REPLACE FUNCTION public.calculation_purchase_invoice(integer)
  RETURNS integer AS
$BODY$
DECLARE qty   integer;
BEGIN

qty = 0;

--TOTAL AMOUNT FOR THE GRID

UPDATE 
    prakruti_purchase_invoice_line 
SET  
    total = coalesce(prakruti_purchase_invoice_line.quantity,0) * coalesce(prakruti_purchase_invoice_line.unit_price,0)
WHERE
    prakruti_purchase_invoice_line.invoice_line_id = $1 AND prakruti_purchase_invoice_line.status = 'open';


--TAXABLE VALUE FOR THE GRID

UPDATE 
    prakruti_purchase_invoice_line 
SET  
    taxable_value = coalesce(prakruti_purchase_invoice_line.total,0) - (coalesce(prakruti_purchase_invoice_line.total,0)*(coalesce(prakruti_purchase_invoice_line.discount_rate,0)/100)) 
WHERE
    prakruti_purchase_invoice_line.invoice_line_id = $1 AND prakruti_purchase_invoice_line.status = 'open';
    
--ADDITIONAL CHARGES

UPDATE
        prakruti_purchase_invoice
SET
        all_additional_charges = a.frieght_charges + a.packing_charges + a.insurance_charges + a.additional_charges
        FROM(SELECT
                COALESCE(prakruti_purchase_invoice.frieght_charges,0) AS frieght_charges,
                COALESCE(prakruti_purchase_invoice.packing_charges,0) AS packing_charges,
                COALESCE(prakruti_purchase_invoice.insurance_charges,0) AS insurance_charges,
                COALESCE(prakruti_purchase_invoice.additional_charges,0) AS additional_charges,
                prakruti_purchase_invoice.id
            FROM
                prakruti_purchase_invoice
            WHERE 
                prakruti_purchase_invoice.id = $1
        ) AS a
WHERE
        a.id = prakruti_purchase_invoice.id;
        
--TOTAL TAXABLE VALUE

UPDATE 
    prakruti_purchase_invoice AS b 
SET 
    total_taxable_value =a.total_taxable_value
FROM(SELECT 
        SUM(coalesce(prakruti_purchase_invoice_line.taxable_value,0)) AS total_taxable_value,
        prakruti_purchase_invoice.id
    FROM 
        prakruti_purchase_invoice_line JOIN
        prakruti_purchase_invoice ON
        prakruti_purchase_invoice.id = prakruti_purchase_invoice_line.invoice_line_id
    WHERE 
        prakruti_purchase_invoice_line.invoice_line_id= $1 AND prakruti_purchase_invoice.id = $1 AND prakruti_purchase_invoice_line.status = 'open' 
    GROUP BY 
        prakruti_purchase_invoice.id
        ) AS a 
WHERE 
    a.id = b.id;
        
-- PROPORTIONATE AMOUNT TO PRODUCTS

UPDATE
        prakruti_purchase_invoice
SET
        proportionate_amount_to_products = all_additional_charges/total_taxable_value
WHERE
        prakruti_purchase_invoice.id = $1;
    
--TAXABLE VALUE AFTER CHARGES FOR THE GRID

UPDATE 
    prakruti_purchase_invoice_line 
SET  
    taxable_value_after_adding_other = a.taxable_value + (a.taxable_value * a.proportionate_amount_to_products)
FROM(SELECT 
        coalesce(prakruti_purchase_invoice_line.taxable_value,0) AS taxable_value,
        coalesce(prakruti_purchase_invoice.proportionate_amount_to_products,0) AS proportionate_amount_to_products,
        prakruti_purchase_invoice_line.id
    FROM 
        prakruti_purchase_invoice_line JOIN
        prakruti_purchase_invoice ON
        prakruti_purchase_invoice.id = prakruti_purchase_invoice_line.invoice_line_id
    WHERE 
        prakruti_purchase_invoice_line.invoice_line_id= $1 AND prakruti_purchase_invoice.id = $1 AND prakruti_purchase_invoice_line.status = 'open'
        ) AS a 
WHERE 
    a.id = prakruti_purchase_invoice_line.id;
    
    
--CGST AMOUNT FOR THE GRID

UPDATE 
    prakruti_purchase_invoice_line 
SET  
    cgst_value = a.taxable_value_after_adding_other * (a.cgst_rate/100)
FROM(SELECT 
        coalesce(prakruti_purchase_invoice_line.taxable_value_after_adding_other,0) AS taxable_value_after_adding_other,
        coalesce(prakruti_purchase_invoice_line.cgst_rate,0) AS cgst_rate,
        prakruti_purchase_invoice_line.id
    FROM 
        prakruti_purchase_invoice_line JOIN
        prakruti_purchase_invoice ON
        prakruti_purchase_invoice.id = prakruti_purchase_invoice_line.invoice_line_id
    WHERE 
        prakruti_purchase_invoice_line.invoice_line_id= $1 AND prakruti_purchase_invoice.id = $1 AND prakruti_purchase_invoice_line.status = 'open'
        ) AS a 
WHERE 
    a.id = prakruti_purchase_invoice_line.id;
    
    
--SGST AMOUNT FOR THE GRID

UPDATE 
    prakruti_purchase_invoice_line 
SET  
    sgst_value = a.taxable_value_after_adding_other * a.sgst_rate/100
FROM(SELECT 
        coalesce(prakruti_purchase_invoice_line.taxable_value_after_adding_other,0) AS taxable_value_after_adding_other,
        coalesce(prakruti_purchase_invoice_line.sgst_rate,0) AS sgst_rate,
        prakruti_purchase_invoice_line.id
    FROM 
        prakruti_purchase_invoice_line JOIN
        prakruti_purchase_invoice ON
        prakruti_purchase_invoice.id = prakruti_purchase_invoice_line.invoice_line_id
    WHERE 
        prakruti_purchase_invoice_line.invoice_line_id= $1 AND prakruti_purchase_invoice.id = $1 AND prakruti_purchase_invoice_line.status = 'open'
        ) AS a 
WHERE 
    a.id = prakruti_purchase_invoice_line.id;
    
    
--IGST AMOUNT FOR THE GRID

UPDATE 
    prakruti_purchase_invoice_line 
SET  
    igst_value = a.taxable_value_after_adding_other * a.igst_rate/100
FROM(SELECT 
        coalesce(prakruti_purchase_invoice_line.taxable_value_after_adding_other,0) AS taxable_value_after_adding_other,
        coalesce(prakruti_purchase_invoice_line.igst_rate,0) AS igst_rate,
        prakruti_purchase_invoice_line.id
    FROM 
        prakruti_purchase_invoice_line JOIN
        prakruti_purchase_invoice ON
        prakruti_purchase_invoice.id = prakruti_purchase_invoice_line.invoice_line_id
    WHERE 
        prakruti_purchase_invoice_line.invoice_line_id= $1 AND prakruti_purchase_invoice.id = $1 AND prakruti_purchase_invoice_line.status = 'open'
        ) AS a 
WHERE 
    a.id = prakruti_purchase_invoice_line.id;


--SUBTOTAL FOR THE GRID

UPDATE 
    prakruti_purchase_invoice_line 
SET  
    subtotal = coalesce(prakruti_purchase_invoice_line.taxable_value_after_adding_other,0) + coalesce(prakruti_purchase_invoice_line.cgst_value,0) + coalesce(prakruti_purchase_invoice_line.sgst_value,0) + coalesce(prakruti_purchase_invoice_line.igst_value,0)
WHERE
    prakruti_purchase_invoice_line.invoice_line_id = $1 AND prakruti_purchase_invoice_line.status = 'open';
        
--TOTAL AMOUNT VALUE

UPDATE 
    prakruti_purchase_invoice AS b 
SET 
    total_amount =a.total_amount
FROM(SELECT 
        SUM(coalesce(prakruti_purchase_invoice_line.total,0)) AS total_amount,
        prakruti_purchase_invoice.id
    FROM 
        prakruti_purchase_invoice_line JOIN
        prakruti_purchase_invoice ON
        prakruti_purchase_invoice.id = prakruti_purchase_invoice_line.invoice_line_id
    WHERE 
        prakruti_purchase_invoice_line.invoice_line_id= $1 AND prakruti_purchase_invoice.id = $1 AND prakruti_purchase_invoice_line.status = 'open' 
    GROUP BY 
        prakruti_purchase_invoice.id
        ) AS a 
WHERE 
    a.id = b.id;


--TOTAL DISCOUNT FOR THE GRID

UPDATE 
    prakruti_purchase_invoice_line 
SET  
    discount_value = coalesce(prakruti_purchase_invoice_line.total,0) * (coalesce(prakruti_purchase_invoice_line.discount_rate,0)/100)
WHERE
    prakruti_purchase_invoice_line.invoice_line_id = $1 AND prakruti_purchase_invoice_line.status = 'open';
        
--TOTAL NO OF PRODUCTS

UPDATE 
    prakruti_purchase_invoice AS b 
SET 
    no_of_product =a.no_of_product
FROM(SELECT 
        SUM(coalesce(prakruti_purchase_invoice_line.quantity,0)) AS no_of_product,
        prakruti_purchase_invoice.id
    FROM 
        prakruti_purchase_invoice_line JOIN
        prakruti_purchase_invoice ON
        prakruti_purchase_invoice.id = prakruti_purchase_invoice_line.invoice_line_id
    WHERE 
        prakruti_purchase_invoice_line.invoice_line_id= $1 AND prakruti_purchase_invoice.id = $1 AND prakruti_purchase_invoice_line.status = 'open' 
    GROUP BY 
        prakruti_purchase_invoice.id
        ) AS a 
WHERE 
    a.id = b.id;
    
    
    

--TOTAL AMOUNT BEFORE TAX

UPDATE prakruti_purchase_invoice SET 
                                amount_taxed = b.total_quantity
    FROM(

    SELECT
        sum(coalesce(prakruti_purchase_invoice_line.taxable_value_after_adding_other,0)) as total_quantity,
        prakruti_purchase_invoice.id
    FROM
        prakruti_purchase_invoice_line INNER JOIN
        prakruti_purchase_invoice ON
        prakruti_purchase_invoice_line.invoice_line_id = prakruti_purchase_invoice.id
     WHERE
        prakruti_purchase_invoice.id = $1 and prakruti_purchase_invoice_line.invoice_line_id = $1 AND prakruti_purchase_invoice_line.status = 'open'
        GROUP BY 
        prakruti_purchase_invoice.id
        
    )as b     
        WHERE 
             prakruti_purchase_invoice.id = b.id;
    
    
    

--TOTAL CGST

UPDATE prakruti_purchase_invoice SET 
                                total_cgst = b.total_quantity
    FROM(

    SELECT
        sum(coalesce(prakruti_purchase_invoice_line.cgst_value,0)) as total_quantity,
        prakruti_purchase_invoice.id
    FROM
        prakruti_purchase_invoice_line INNER JOIN
        prakruti_purchase_invoice ON
        prakruti_purchase_invoice_line.invoice_line_id = prakruti_purchase_invoice.id
     WHERE
        prakruti_purchase_invoice.id = $1 and prakruti_purchase_invoice_line.invoice_line_id = $1 AND prakruti_purchase_invoice_line.status = 'open'
        GROUP BY 
        prakruti_purchase_invoice.id
        
    )as b     
        WHERE 
             prakruti_purchase_invoice.id = b.id;
    
    
    

--TOTAL SGST

UPDATE prakruti_purchase_invoice SET 
                                total_sgst = b.total_quantity
    FROM(

    SELECT
        sum(coalesce(prakruti_purchase_invoice_line.sgst_value,0)) as total_quantity,
        prakruti_purchase_invoice.id
    FROM
        prakruti_purchase_invoice_line INNER JOIN
        prakruti_purchase_invoice ON
        prakruti_purchase_invoice_line.invoice_line_id = prakruti_purchase_invoice.id
     WHERE
        prakruti_purchase_invoice.id = $1 and prakruti_purchase_invoice_line.invoice_line_id = $1 AND prakruti_purchase_invoice_line.status = 'open'
        GROUP BY 
        prakruti_purchase_invoice.id
        
    )as b     
        WHERE 
             prakruti_purchase_invoice.id = b.id;
    
    
    

--TOTAL SGST

UPDATE prakruti_purchase_invoice SET 
                                total_igst = b.total_quantity
    FROM(

    SELECT
        sum(coalesce(prakruti_purchase_invoice_line.igst_value,0)) as total_quantity,
        prakruti_purchase_invoice.id
    FROM
        prakruti_purchase_invoice_line INNER JOIN
        prakruti_purchase_invoice ON
        prakruti_purchase_invoice_line.invoice_line_id = prakruti_purchase_invoice.id
     WHERE
        prakruti_purchase_invoice.id = $1 and prakruti_purchase_invoice_line.invoice_line_id = $1 AND prakruti_purchase_invoice_line.status = 'open'
        GROUP BY 
        prakruti_purchase_invoice.id
        
    )as b     
        WHERE 
             prakruti_purchase_invoice.id = b.id;
             
             
             
-- TOTAL GST AMOUNT

UPDATE
        prakruti_purchase_invoice
SET
        total_gst = coalesce(prakruti_purchase_invoice.total_cgst,0) + coalesce(prakruti_purchase_invoice.total_sgst,0) + coalesce(prakruti_purchase_invoice.total_igst,0)
WHERE
        prakruti_purchase_invoice.id = $1;
    
    
    

--TOTAL AFTER TAX

UPDATE prakruti_purchase_invoice SET 
                                grand_total = b.total_quantity
    FROM(

    SELECT
        sum(coalesce(prakruti_purchase_invoice_line.subtotal,0)) as total_quantity,
        prakruti_purchase_invoice.id
    FROM
        prakruti_purchase_invoice_line INNER JOIN
        prakruti_purchase_invoice ON
        prakruti_purchase_invoice_line.invoice_line_id = prakruti_purchase_invoice.id
     WHERE
        prakruti_purchase_invoice.id = $1 and prakruti_purchase_invoice_line.invoice_line_id = $1 AND prakruti_purchase_invoice_line.status = 'open'
        GROUP BY 
        prakruti_purchase_invoice.id
        
    )as b     
        WHERE 
             prakruti_purchase_invoice.id = b.id;
    
    
    

--GRAND TOTAL AFTER TAX

UPDATE prakruti_purchase_invoice SET  grand_total_after_payments = (gt - cash - cheque - draft) FROM
                                (
                                SELECT 
                                        COALESCE(prakruti_purchase_invoice.grand_total,0) AS gt,
                                        COALESCE(prakruti_purchase_invoice.cash_amount,0) AS cash,
                                        COALESCE(prakruti_purchase_invoice.cheque_amount,0) AS cheque,
                                        COALESCE(prakruti_purchase_invoice.draft_amount,0) AS draft,
                                        prakruti_purchase_invoice.id
                                FROM
                                        prakruti_purchase_invoice
                                WHERE
                                        prakruti_purchase_invoice.id = $1)AS b WHERE prakruti_purchase_invoice.id = b.id;

RETURN qty;
                                
END;
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION public.calculation_purchase_invoice(integer)
  OWNER TO odoo;
  
  

--DROP FUNCTION dispatch_qc_validate(integer)
CREATE OR REPLACE FUNCTION public.dispatch_qa_validate(integer,character varying)
  RETURNS integer AS
$BODY$
DECLARE qty   integer;
status_marked integer;
count_value integer;
accept_value integer;
total_line integer;
BEGIN
qty = 0;SELECT 
	count(id) INTO status_marked 
FROM 
	prakruti_process_quality_control_line_qa
WHERE
	(status = 'accepted' OR status = 'rejected') AND
	 qc_check_line_id = $1;

SELECT 
    count(id) INTO total_line
FROM 
    prakruti_process_quality_control_line_qa 
WHERE 
    qc_check_line_id = $1;

IF status_marked = total_line
THEN
	
	UPDATE 
		prakruti_process_quality_control_qa SET 
		state = 'validate' 
	WHERE 
		id=$1;
        SELECT 
		count(id) INTO count_value 
	FROM 
		prakruti_process_quality_control_line_qa 
	WHERE 
		status = 'rejected' AND
		qc_check_line_id = $1;
        SELECT 
		count(id) INTO accept_value 
	FROM 
		prakruti_process_quality_control_line_qa 
	WHERE 
		status = 'accepted' AND
		qc_check_line_id = $1;
	IF count_value >= accept_value
	THEN
		UPDATE 
			prakruti_process_quality_control_qa SET 
			flag_rejected_count =2 
		WHERE id=$1;
	
	END IF;
	IF count_value = accept_value
	THEN
		UPDATE 
			prakruti_process_quality_control_qa SET 
			flag_rejected_count =2 
		WHERE id=$1;
	ELSIF count_value = 0
	THEN
		UPDATE 
			prakruti_process_quality_control_qa SET
			flag_rejected_count =4 
		WHERE id=$1;
        UPDATE 
                prakruti_dispatch SET
                flag_rejected_count =4 
        WHERE dispatch_no=$2;
	END IF;
ELSE
    RETURN 'please_check_status';
END IF;

    


RETURN qty;
                                
END;
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION public.dispatch_qa_validate(integer,character varying)
  OWNER TO odoo;
  
  
--DROP FUNCTION dispatch_qc_ha_to_dispatch(integer,character varying))
CREATE OR REPLACE FUNCTION public.dispatch_qc_ha_to_dispatch(integer,character varying)
  RETURNS integer AS
$BODY$
DECLARE qty   integer;
no_of_products_in_dispatch integer;
no_of_products_in_qc_ha integer;
no_of_products_qcha integer;
qcha_state character varying;
dispatch_state text;
BEGIN
qty = 0;


SELECT 
	count(prakruti_dispatch_line.id) INTO no_of_products_in_dispatch 
FROM 
	prakruti_dispatch_line INNER JOIN 
	prakruti_dispatch ON 
	prakruti_dispatch.id=prakruti_dispatch_line.main_id JOIN 
	prakruti_quality_check_ha ON 
	prakruti_quality_check_ha.dispatch_no=prakruti_dispatch.dispatch_no 
WHERE 
	prakruti_quality_check_ha.dispatch_no=$2 AND 
	prakruti_quality_check_ha.id=$1;

SELECT 
	count(prakruti_quality_check_line.id) INTO no_of_products_in_qc_ha 
FROM 
	prakruti_quality_check INNER JOIN 
	prakruti_quality_check_line ON 
	prakruti_quality_check.id=prakruti_quality_check_line.check_line_id JOIN 
	prakruti_dispatch ON 
	prakruti_dispatch.dispatch_no=prakruti_quality_check.dispatch_no JOIN 
	prakruti_quality_check_ha ON 
	prakruti_quality_check_ha.dispatch_no=prakruti_dispatch.dispatch_no 
WHERE 
	prakruti_quality_check.dispatch_no=$2;
SELECT 
	count(prakruti_quality_check_line_ha.id) INTO no_of_products_qcha  
FROM 
	prakruti_quality_check_line_ha INNER JOIN 
	prakruti_quality_check_ha ON
	prakruti_quality_check_line_ha.qc_check_line_id=prakruti_quality_check_ha.id JOIN
	prakruti_dispatch ON 
	prakruti_dispatch.dispatch_no=prakruti_quality_check_ha.dispatch_no 
WHERE 
	prakruti_quality_check_ha.dispatch_no=$2;
SELECT 
	prakruti_quality_check_ha.state INTO qcha_state 
FROM 
	prakruti_quality_check_ha 
WHERE 
	prakruti_quality_check_ha.dispatch_no= $2 AND 
	prakruti_quality_check_ha.id=$1;
SELECT 
	prakruti_dispatch.state INTO dispatch_state 
FROM 
	prakruti_dispatch INNER JOIN 
	prakruti_quality_check_ha ON 
	prakruti_dispatch.dispatch_no = prakruti_quality_check_ha.dispatch_no 
WHERE 
	prakruti_quality_check_ha.id = $1 AND 
	prakruti_quality_check_ha.dispatch_no = $2;
IF (dispatch_state ='partially_confirmed')OR (dispatch_state ='invoice') OR (dispatch_state ='without_qc_partially_confirmed') OR (dispatch_state ='without_qc_invoice') OR (dispatch_state ='extra_partially_confirmed') OR (dispatch_state ='extra_invoice') OR (dispatch_state='extra_without_qc_partially_confirmed') OR (dispatch_state ='extra_without_qc_invoice') OR (dispatch_state ='done')
THEN
	IF no_of_products_in_dispatch =no_of_products_qcha
	THEN
		UPDATE prakruti_dispatch_line SET qc_flag=2  WHERE prakruti_dispatch_line.main_id=$1 AND send_status = 'dispatch';
		UPDATE prakruti_dispatch SET qc_check_flag=2 WHERE dispatch_no=$2;
		UPDATE prakruti_process_quality_control_qa SET qc_check_flag=2, coming_from='qc_check' WHERE dispatch_no=$2;
	ELSIF (qcha_state ='draft') AND ( no_of_products_in_dispatch=no_of_products_in_qc_ha)
	THEN
		UPDATE prakruti_dispatch SET qc_check_flag=2 WHERE dispatch_no=$2;
		UPDATE prakruti_dispatch_line SET qc_flag=2  WHERE prakruti_dispatch_line.main_id=$1 AND send_status = 'dispatch';
		UPDATE prakruti_process_quality_control_qa SET qc_check_flag=2, coming_from='qc_check' WHERE dispatch_no=$2;
	ELSE
		UPDATE prakruti_dispatch SET qc_check_flag=3 WHERE dispatch_no=$2;
		UPDATE prakruti_dispatch_line SET qc_flag=2  WHERE prakruti_dispatch_line.main_id=$1 AND send_status = 'dispatch';
		UPDATE prakruti_process_quality_control_qa SET qc_check_flag=3, coming_from='qc_check' WHERE dispatch_no=$2;
	END IF;
ELSE
	IF no_of_products_in_dispatch =no_of_products_qcha
	THEN
		UPDATE prakruti_dispatch_line SET qc_flag=2  WHERE prakruti_dispatch_line.main_id=$1 AND send_status = 'dispatch';
		UPDATE prakruti_dispatch SET state ='quality_check_done' ,qc_check_flag=2 WHERE dispatch_no=$2;
		UPDATE prakruti_dispatch SET qc_status ='process_qcha_done' WHERE dispatch_no=$2;
		UPDATE prakruti_process_quality_control_qa SET qc_check_flag=2, coming_from='qc_check' WHERE dispatch_no=$2;
	ELSIF (qcha_state ='draft') AND ( no_of_products_in_dispatch=no_of_products_in_qc_ha)
	THEN
		UPDATE prakruti_dispatch SET state ='quality_check_done',qc_check_flag=2 WHERE dispatch_no=$2;
		UPDATE prakruti_dispatch SET qc_status ='process_qcha_done' WHERE dispatch_no=$2;
		UPDATE prakruti_dispatch_line SET qc_flag=2  WHERE prakruti_dispatch_line.main_id=$1 AND send_status = 'dispatch';
		UPDATE prakruti_process_quality_control_qa SET qc_check_flag=2, coming_from='qc_check' WHERE dispatch_no=$2;
	ELSE
		UPDATE prakruti_dispatch SET state ='quality_check_done' ,qc_check_flag=3 WHERE dispatch_no=$2;
		UPDATE prakruti_dispatch SET qc_status ='process_qcha_done' WHERE dispatch_no=$2;
		UPDATE prakruti_dispatch_line SET qc_flag=2  WHERE prakruti_dispatch_line.main_id=$1 AND send_status = 'dispatch';
		UPDATE prakruti_process_quality_control_qa SET qc_check_flag=3, coming_from='qc_check' WHERE dispatch_no=$2;
	END IF;
END IF;

UPDATE 
	prakruti_dispatch_line AS b
SET 
	accepted_qty =a.accepted_qty,
	rejected_qty=a.rejected_qty,
	state = a.state,
	status = a.status,
	dispatched_qty = a.accepted_qty 
FROM(
	SELECT
		qc_check_line_id,
		dispatch_line_grid_id,
		product_id,
		accepted_qty,
		rejected_qty,
		state,
		status,
		scheduled_qty
	FROM 
		prakruti_quality_check_line_ha 
	WHERE 
		qc_check_line_id= $1
	) AS a 
WHERE 
	a.dispatch_line_grid_id = b.id AND
	 a.product_id = b.product_id;

UPDATE 
        prakruti_dispatch_batch_list_line AS b 
SET 
        specification_id =a.specification_id,
        ar_id=a.ar_id
FROM(
        SELECT 
                product_id,
                specification_id,
                ar_id,
                dispatch_batch_line_id
        FROM 
                prakruti_dispatch_qc_ha_batch_list_line 
        WHERE 
                dispatch_qc_ha_id= $1 
        ) AS a 
WHERE 
        a.dispatch_batch_line_id = b.id AND 
        a.product_id = b.product_id; 	 
	 
UPDATE 
	prakruti_quality_check_ha 
SET 
	state = 'done' 
WHERE 
	prakruti_quality_check_ha.dispatch_no = $2;
	


RETURN qty;
                                
END;
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION public.dispatch_qc_ha_to_dispatch(integer,character varying)
  OWNER TO odoo;

--DROP FUNCTION dispatch_qc_to_dispatch(integer,character varying)
CREATE OR REPLACE FUNCTION public.dispatch_qc_to_dispatch(integer,character varying)
  RETURNS integer AS
$BODY$
DECLARE qty   integer;
no_of_products_in_dispatch integer;
no_of_products_in_qcha integer;
qc_state text;
no_of_products_in_qc integer;
dispatch_state text;
BEGIN
qty = 0;

        SELECT 
                count(prakruti_dispatch_line.id) INTO no_of_products_in_dispatch 
        FROM 
                prakruti_dispatch_line INNER JOIN 
                prakruti_dispatch ON 
                prakruti_dispatch.id=prakruti_dispatch_line.main_id JOIN 
                prakruti_quality_check ON 
                prakruti_quality_check.dispatch_no=prakruti_dispatch.dispatch_no 
        WHERE 
                prakruti_quality_check.dispatch_no= $2 AND 
                prakruti_quality_check.id=$1;

        SELECT 
                count(prakruti_quality_check_line.id) INTO no_of_products_in_qcha 
        FROM 
                prakruti_quality_check_line INNER JOIN 
                prakruti_quality_check ON 
                prakruti_quality_check_line.check_line_id=prakruti_quality_check.id JOIN 
                prakruti_dispatch ON 
                prakruti_dispatch.dispatch_no=prakruti_quality_check.dispatch_no JOIN 
                prakruti_quality_check_ha ON 
                prakruti_quality_check_ha.dispatch_no=prakruti_dispatch.dispatch_no 
        WHERE 
                prakruti_quality_check.dispatch_no=$2;
        SELECT 
                prakruti_quality_check.state INTO qc_state 
        FROM 
                prakruti_quality_check where prakruti_quality_check.dispatch_no= $2 AND 
                prakruti_quality_check.id=$1;
        SELECT 
		count(prakruti_quality_check_line.id) INTO no_of_products_in_qc 
	FROM 
		prakruti_quality_check_line INNER JOIN 
		prakruti_quality_check ON 
		prakruti_quality_check_line.check_line_id=prakruti_quality_check.id JOIN 
		prakruti_dispatch ON  
		prakruti_dispatch.dispatch_no=prakruti_quality_check.dispatch_no 
	WHERE 
		prakruti_quality_check.dispatch_no=$2;
	
	SELECT 
		prakruti_dispatch.state INTO dispatch_state 
	FROM 
		prakruti_dispatch INNER JOIN 
		prakruti_quality_check ON 
		prakruti_dispatch.dispatch_no = prakruti_quality_check.dispatch_no 
	WHERE 
		prakruti_quality_check.id = $1 AND 
		prakruti_quality_check.dispatch_no = $2;
	IF (dispatch_state ='partially_confirmed')OR (dispatch_state ='invoice') OR (dispatch_state ='without_qc_partially_confirmed') OR (dispatch_state ='without_qc_invoice') OR (dispatch_state ='extra_partially_confirmed') OR (dispatch_state ='extra_invoice') OR 
	(dispatch_state ='extra_without_qc_partially_confirmed') OR (dispatch_state ='extra_without_qc_invoice') OR (dispatch_state ='done')
	THEN
		IF (no_of_products_in_dispatch = no_of_products_in_qc)
		THEN
			UPDATE prakruti_dispatch_line set qc_flag=2  where prakruti_dispatch_line.main_id=$1 AND send_status = 'dispatch';
			UPDATE prakruti_dispatch set qc_check_flag=2 where dispatch_no=$2;
			UPDATE prakruti_process_quality_control_qa SET qc_check_flag=2, coming_from='qc_check' WHERE dispatch_no=$2;
		ELSIF (qc_state ='qc_ha')AND ( no_of_products_in_dispatch=no_of_products_in_qcha)
		THEN
			UPDATE prakruti_dispatch set qc_check_flag=2 where dispatch_no=$2;
			UPDATE prakruti_process_quality_control_qa SET qc_check_flag=2 ,coming_from='qc_check' WHERE dispatch_no=$2;
			UPDATE prakruti_dispatch_line set qc_flag=2  where prakruti_dispatch_line.main_id=$1 AND send_status = 'dispatch';
		ELSE
			UPDATE prakruti_dispatch set qc_check_flag=3 where dispatch_no=$2;
			UPDATE prakruti_process_quality_control_qa SET qc_check_flag=3, coming_from='qc_check' WHERE dispatch_no=$2;
			UPDATE prakruti_dispatch_line set qc_flag=2  where prakruti_dispatch_line.main_id=$1 AND send_status = 'dispatch';
		END IF;
	ELSE
		IF (no_of_products_in_dispatch = no_of_products_in_qc)
		THEN
			UPDATE prakruti_dispatch_line set qc_flag=2  where prakruti_dispatch_line.main_id=$1 AND send_status = 'dispatch';
			UPDATE prakruti_dispatch set state ='quality_check_done',qc_check_flag=2 where dispatch_no=$2;
			UPDATE prakruti_dispatch set qc_status ='qc_done' where dispatch_no=$2;
			UPDATE prakruti_process_quality_control_qa SET qc_check_flag=2, coming_from='qc_check' WHERE dispatch_no=$2;
		ELSIF (qc_state ='qc_ha')AND ( no_of_products_in_dispatch=no_of_products_in_qcha)
		THEN
			UPDATE prakruti_dispatch set state ='quality_check_done',qc_check_flag=2 where dispatch_no=$2;
			UPDATE prakruti_dispatch set qc_status ='qc_done' where dispatch_no=$2;
			UPDATE prakruti_process_quality_control_qa SET qc_check_flag=2 ,coming_from='qc_check' WHERE dispatch_no=$2;
			UPDATE prakruti_dispatch_line set qc_flag=2  where prakruti_dispatch_line.main_id=$1 AND send_status = 'dispatch';
		ELSE
			UPDATE prakruti_dispatch set state ='quality_check_done',qc_check_flag=3 where dispatch_no=$2;
			UPDATE prakruti_dispatch set qc_status ='qc_done' where dispatch_no=$2;
			UPDATE prakruti_process_quality_control_qa SET qc_check_flag=3, coming_from='qc_check' WHERE dispatch_no=$2;
			UPDATE prakruti_dispatch_line set qc_flag=2  where prakruti_dispatch_line.main_id=$1 AND send_status = 'dispatch';
		END IF;
	END IF;

                
UPDATE 
        prakruti_dispatch_line AS b 
SET 
        accepted_qty =a.accepted_qty,
        rejected_qty=a.rejected_qty,
        state = a.state,
        status = a.status,
        dispatched_qty = a.accepted_qty 
FROM(
        SELECT 
                check_line_id,
                dispatch_line_grid_id,
                product_id,
                accepted_qty,
                rejected_qty,
                state,
                status,
                scheduled_qty 
        FROM 
                prakruti_quality_check_line 
        WHERE 
                check_line_id= $1 
        ) AS a 
WHERE 
        a.dispatch_line_grid_id = b.id AND 
        a.product_id = b.product_id;  

        
UPDATE 
        prakruti_dispatch_batch_list_line AS b 
SET 
        specification_id =a.specification_id,
        ar_id=a.ar_id
FROM(
        SELECT 
                product_id,
                specification_id,
                ar_id,
                dispatch_batch_line_id
        FROM 
                prakruti_dispatch_qc_batch_list_line 
        WHERE 
                dispatch_qc_id= $1 
        ) AS a 
WHERE 
        a.dispatch_batch_line_id = b.id AND 
        a.product_id = b.product_id; 
        
UPDATE 
        prakruti_quality_check SET state = 'qc_done' 
WHERE 
        prakruti_quality_check.dispatch_no = $2;


	
RETURN qty;
                                
END;
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION public.dispatch_qc_to_dispatch(integer,character varying)
  OWNER TO odoo;
  

--DROP FUNCTION prakruti_dispatch_qc(integer)


CREATE OR REPLACE FUNCTION public.dispatch_qc_to_ha(integer,character varying)
  RETURNS integer AS
$BODY$
DECLARE qty   integer;
BEGIN
qty = 0;

UPDATE 
	prakruti_quality_check SET 
	state ='qc_ha' 
WHERE 
	id=$1;
	
INSERT INTO prakruti_quality_check_ha(
                create_uid,
                write_uid,
                create_date,
                write_date,
		qc_date,
		dispatch_no,
		dispatch_date,
		checked_by,
		order_no,
		order_date,
		dispatch_to,
		store_incharge,
		quality_incharge,
		coming_from,
		state, 
		terms,
		reference_no,
		revision_no,
		remarks,
		company_id,
		reference_date
		)
SELECT
        create_uid,
        write_uid,
        create_date,
        write_date,
	qc_date,
	dispatch_no,
	dispatch_date,
	checked_by,
	order_no,
	order_date,
	dispatch_to,
	store_incharge,
	quality_incharge,
	coming_from,
	'draft' as state,
        terms,
        reference_no,
        revision_no,
        remarks,
        company_id,
        reference_date
FROM(
	SELECT
		prakruti_quality_check.create_uid,
		prakruti_quality_check.write_uid,
		prakruti_quality_check.create_date,
		prakruti_quality_check.write_date,
		prakruti_quality_check.qc_date,
		prakruti_quality_check.dispatch_no,
		prakruti_quality_check.dispatch_date,
		prakruti_quality_check.checked_by,
		prakruti_quality_check.order_no,
		prakruti_quality_check.order_date,
		prakruti_quality_check.dispatch_to,
		prakruti_quality_check.store_incharge,
		prakruti_quality_check.quality_incharge,
		prakruti_quality_check.coming_from,
		prakruti_quality_check.state,
		prakruti_quality_check.terms,
		prakruti_quality_check.reference_no,
		prakruti_quality_check.revision_no,
		prakruti_quality_check.remarks,
		prakruti_quality_check.company_id,
		prakruti_quality_check.reference_date
	FROM
		prakruti_quality_check
	WHERE
		prakruti_quality_check.id=$1
	)
	AS A;
                            
INSERT INTO prakruti_quality_check_line_ha(
                                create_uid,
                                write_uid,
                                create_date,
                                write_date,
				product_id,
				uom_id,
				specification_id,
				description,
				ordered_qty,
				dispatched_qty,
				accepted_qty,
				rejected_qty,
				status,
				test_result,
				remarks,
				scheduled_qty,
				dispatch_line_grid_id,
				qc_check_line_id,
				state,
				ar_no,
				batch_list
				)
	SELECT
                create_uid,
                write_uid,
                create_date,
                write_date,
		product_id,
		uom_id,
		specification_id,
		description,
		ordered_qty,
		dispatched_qty,
                accepted_qty,
		rejected_qty,
		status,
		test_result,
		remarks,
		scheduled_qty,
		dispatch_line_grid_id,
                check_line_id,
                'draft' as state,
                ar_no,
                batch_list
	FROM(
		SELECT 
			prakruti_quality_check_line.create_uid,
			prakruti_quality_check_line.write_uid,
			prakruti_quality_check_line.create_date,
			prakruti_quality_check_line.write_date,
			prakruti_quality_check_line.product_id,
			prakruti_quality_check_line.uom_id,
			prakruti_quality_check_line.specification_id,
			prakruti_quality_check_line.description,
			prakruti_quality_check_line.ordered_qty,
			prakruti_quality_check_line.dispatched_qty,
			COALESCE(prakruti_quality_check_line.accepted_qty,0) as accepted_qty,
			COALESCE(prakruti_quality_check_line.rejected_qty,0) as rejected_qty,
			prakruti_quality_check_line.status,
			prakruti_quality_check_line.test_result,
			prakruti_quality_check_line.remarks,
			prakruti_quality_check_line.scheduled_qty,
			prakruti_quality_check_line.dispatch_line_grid_id,
			prakruti_quality_check_line.state,
                        prakruti_quality_check_line.ar_no,
                        prakruti_quality_check_line.batch_list,
			prakruti_quality_check_ha.id as check_line_id
		FROM
			prakruti_quality_check_line
                INNER JOIN
                        prakruti_quality_check
		ON
			prakruti_quality_check_line.check_line_id=prakruti_quality_check.id 
                INNER JOIN
                        prakruti_quality_check_ha
                ON
                        prakruti_quality_check_ha.dispatch_no = prakruti_quality_check.dispatch_no
                        
		WHERE 
			prakruti_quality_check_line.check_line_id=$1
			AND prakruti_quality_check.dispatch_no=$2)
			AS B;

        INSERT INTO prakruti_dispatch_qc_ha_batch_list_line
            (
            create_uid,
            write_uid,
            create_date,
            write_date,            
            dispatch_qc_ha_id,            
            product_id,
            uom_id,
            dispatched_qty,
            batch_no,
            packing_details,
            batch_size,
            batch_qty,
            remarks,
            specification_id,
            ar_id,
            dispatch_batch_line_id
            )
        SELECT
            create_uid,
            write_uid,
            create_date,
            write_date,            
            dispatch_qc_ha_id,            
            product_id,
            uom_id,
            dispatched_qty,
            batch_no,
            packing_details,
            batch_size,
            batch_qty,
            remarks,
            specification_id,
            ar_id,
            dispatch_batch_line_id
        FROM(
            SELECT 
                prakruti_dispatch_qc_batch_list_line.create_uid,
                prakruti_dispatch_qc_batch_list_line.write_uid,
                prakruti_dispatch_qc_batch_list_line.create_date,
                prakruti_dispatch_qc_batch_list_line.write_date,                
                prakruti_dispatch_qc_batch_list_line.product_id,
                prakruti_dispatch_qc_batch_list_line.uom_id,
                prakruti_dispatch_qc_batch_list_line.dispatched_qty,
                prakruti_dispatch_qc_batch_list_line.batch_no,                
                prakruti_dispatch_qc_batch_list_line.packing_details,                
                prakruti_dispatch_qc_batch_list_line.batch_size,
                prakruti_dispatch_qc_batch_list_line.batch_qty,
                prakruti_dispatch_qc_batch_list_line.remarks,
                prakruti_dispatch_qc_batch_list_line.specification_id,
                prakruti_dispatch_qc_batch_list_line.ar_id,
                prakruti_dispatch_qc_batch_list_line.id AS dispatch_batch_line_id,
                prakruti_quality_check.dispatch_no
            FROM 
                prakruti_dispatch_qc_batch_list_line JOIN
                prakruti_quality_check ON 
                prakruti_dispatch_qc_batch_list_line.dispatch_qc_id = prakruti_quality_check.id 
            WHERE 
                prakruti_dispatch_qc_batch_list_line.dispatch_qc_id = $1 AND
                prakruti_quality_check.dispatch_no = $2
                ) AS a JOIN (
                SELECT 
                    prakruti_quality_check_ha.id AS dispatch_qc_ha_id,
                    prakruti_quality_check_ha.dispatch_no
                FROM  
                    prakruti_quality_check_ha
                WHERE
                    prakruti_quality_check_ha.dispatch_no = $2 
                ORDER BY id desc limit 1
                            ) AS b ON a.dispatch_no = b.dispatch_no;
			
			
UPDATE 
    prakruti_dispatch 
set 
    qc_status ='qc_ha' 
where 
    dispatch_no=$2;
		
	
RETURN qty;
                                
END;
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION public.dispatch_qc_to_ha(integer,character varying)
  OWNER TO odoo;
		
		

--DROP FUNCTION dispatch_qc_validate(integer)
CREATE OR REPLACE FUNCTION public.dispatch_qc_validate(integer,character varying)
  RETURNS character varying AS
$BODY$
DECLARE qty   integer;
status_marked integer;
count_value integer;
accept_value integer;
total_line integer;
BEGIN
qty = 0;


SELECT 
	count(id) INTO status_marked 
FROM 
	prakruti_quality_check_line 
WHERE 
	(status = 'accepted' OR status = 'rejected') AND 
	check_line_id = $1;
SELECT 
    count(id) INTO total_line
FROM 
    prakruti_quality_check_line 
WHERE 
    check_line_id = $1;
IF status_marked = total_line
THEN
	UPDATE 
		prakruti_quality_check SET 
		state = 'validate' 
	WHERE 
		id=$1;
        SELECT 
		count(id) INTO count_value 
	FROM 
		prakruti_quality_check_line 
	WHERE 
		status = 'rejected' AND
		check_line_id = $1;
        SELECT 
		count(id) INTO accept_value 
	FROM 
		prakruti_quality_check_line 
	WHERE 
		status = 'accepted' AND
		check_line_id = $1;
	IF count_value >= accept_value
	THEN
		UPDATE 
			prakruti_quality_check SET 
			flag_rejected_count =2 
		WHERE id=$1;
	
	END IF;
	IF count_value = accept_value
	THEN
		UPDATE 
			prakruti_quality_check SET 
			flag_rejected_count =2 
		WHERE id=$1;
	ELSIF count_value = 0
	THEN
		UPDATE 
			prakruti_quality_check SET
			flag_rejected_count =4 
		WHERE id=$1;
        UPDATE 
                prakruti_dispatch SET
                flag_rejected_count =4 
        WHERE dispatch_no=$2;
	END IF;
ELSE
    RETURN 'please_check_status';
END IF;


RETURN qty;
                                
END;
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION public.dispatch_qc_validate(integer,character varying)
  OWNER TO odoo;

CREATE OR REPLACE FUNCTION public.list_all_products(integer)
  RETURNS integer AS
$BODY$
BEGIN

INSERT INTO prakruti_all_product_line (item_id,item_code,item_uom_id,main_id,name_template,item_uom)
SELECT item_id,item_code,item_uom_id,main_id,name_template,item_uom FROM
(
SELECT 
        product_product.id AS item_id,
        product_template.code AS item_code,
        product_uom.id AS item_uom_id,
        product_template.name AS name_template,
        product_uom.name AS item_uom
FROM 
        product_product JOIN 
        product_template ON 
        product_product.product_tmpl_id = product_template.id JOIN 
        product_uom ON 
        product_template.uom_id = product_uom.id 
        where product_product.active='t' AND product_template.active='t'
) AS a CROSS JOIN
(
SELECT id AS main_id FROM prakruti_stock_adjustments WHERE prakruti_stock_adjustments.id = $1
) AS b ORDER BY a.name_template;

UPDATE 
    prakruti_all_product_line 
SET 
    item_quantity = product_qty 
FROM( 
SELECT 
    product_id,
    name,
    SUM(product_qty) AS product_qty,
    id 
    FROM(
    SELECT 
        prakruti_stock.product_id,
        product_template.name, 
        prakruti_stock.product_qty,
        main_id,
        prakruti_all_product_line.id 
    FROM 
        product_template JOIN 
        product_product ON 
        product_product.product_tmpl_id = product_template.id JOIN 
        prakruti_stock ON 
        prakruti_stock.product_id = product_product.id JOIN 
        prakruti_all_product_line ON 
        prakruti_all_product_line.item_id = prakruti_stock.product_id 
    WHERE 
        prakruti_all_product_line.main_id = $1
        )AS a 
    GROUP BY 
        product_id,id,name 
    ORDER BY 
        name
    ) AS b 
WHERE 
    b.id = prakruti_all_product_line.id;
    
    
UPDATE prakruti_stock_adjustments SET list_flag = 1 WHERE prakruti_stock_adjustments.id = cast($1 as integer);                            
                            

RETURN 0;

END;
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION public.list_all_products(integer)
  OWNER TO odoo;
  
CREATE OR REPLACE FUNCTION public.planning_update_stock(integer)
  RETURNS integer AS
$BODY$
DECLARE qty   integer;
BEGIN

qty = 0;


UPDATE 
	prakruti_production_planning_line 
SET 
	store_qty = product_qty 
FROM (
	SELECT 
		product_id,
		SUM(product_qty) AS product_qty,
		id 
	FROM ( 
		SELECT 
			prakruti_stock.product_id,
			prakruti_stock.product_qty,
			planning_id,
			prakruti_production_planning_line.id 
		FROM 
			product_template 
		INNER JOIN 
			product_product  ON 
			product_product.product_tmpl_id = product_template.id 
		INNER JOIN 
			prakruti_stock ON 
			prakruti_stock.product_id = product_product.id 
		INNER JOIN 
			prakruti_production_planning_line ON 
			prakruti_production_planning_line.product_id = prakruti_stock.product_id 
		WHERE 
			prakruti_production_planning_line.planning_id = $1
		)as a
	GROUP BY 
		product_id,
		id
	) as b 
WHERE 
	b.id = prakruti_production_planning_line.id;

UPDATE 
	prakruti_production_planning_line 
SET 
	virtual_qty = virtual_quantity 
FROM ( 
	SELECT 
		product_id,
		id,
		sum(virtual_qty) as virtual_quantity 
	FROM ( 
		SELECT 
			prakruti_stock.product_id,
			prakruti_stock.virtual_qty,
			planning_id,
			prakruti_production_planning_line.id 
		FROM 
			product_template INNER JOIN 
			product_product  ON 
			product_product.product_tmpl_id = product_template.id INNER JOIN 
			prakruti_stock ON 
			prakruti_stock.product_id = product_product.id INNER JOIN 
			prakruti_production_planning_line ON 
			prakruti_production_planning_line.product_id = prakruti_stock.product_id 
		WHERE 
			prakruti_production_planning_line.planning_id = $1
		)AS a 
	GROUP BY 
		product_id,id
	) as b 
WHERE 
	b.id = prakruti_production_planning_line.id;

UPDATE 
	prakruti_production_planning 
SET 	
	availble_stock_qty = product_qty 
FROM ( 
	SELECT 
		product_id,
		sum(product_qty) as product_qty,
		id 
	FROM ( 
		SELECT 
			prakruti_stock.product_id,
			prakruti_stock.product_qty,
			prakruti_production_planning.id 
		FROM 
			prakruti_production_planning INNER JOIN 
			product_product ON 
			product_product.id = prakruti_production_planning.product_id INNER JOIN 
			product_template  ON 
			product_product.product_tmpl_id = product_template.id INNER JOIN 
			prakruti_stock ON 
			prakruti_stock.product_id = product_product.id 
		WHERE 
			prakruti_production_planning.id = $1
		)as a 
	GROUP BY product_id,id
	) as b 
WHERE 
	b.id = prakruti_production_planning.id;
	
RETURN qty;
                                
END;
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION public.planning_update_stock(integer)
  OWNER TO odoo;
  
  
CREATE OR REPLACE FUNCTION public.production_slip_to_bmr_requisition(integer)
  RETURNS character varying AS
$BODY$
DECLARE 
bmr_flag_status INTEGER;
flag_line INTEGER;
total_line INTEGER;
no_of_line INTEGER;
s_type CHARACTER VARYING;
entered_line INTEGER;
BEGIN


bmr_flag_status = 0;
flag_line = 0;
total_line = 0;
no_of_line = 0;
s_type = '';
entered_line = 0;

SELECT 
    count(id) INTO bmr_flag_status 
FROM 
    prakruti_production_slip_line 
WHERE 
    main_id = $1 AND 
    bmr_status = 'True' AND 
    planning_status = 'True' AND 
    bmr_flag = 0 AND 
    planning_flag = 1 AND 
    planning_done = 'True';
    
SELECT 
    slip_type INTO s_type 
FROM 
    prakruti_production_slip 
WHERE 
    id = $1;

SELECT 
    count(id) INTO entered_line 
FROM 
    prakruti_production_slip_line 
WHERE 
    main_id = $1;
    
IF entered_line = 0 THEN    
    RETURN 'empty_grid';
    
ELSIF s_type = 'buffer' THEN
   INSERT INTO prakruti_bmr_requisition(
        create_date,
        create_uid,
        write_date,
        write_uid,
        status,
        req_no_control_id,
        start_date,
        requisition_type,
        slip_no,
        slip_id,
        product_id,
        batch_size,
        company_id
        )
    SELECT
        create_date,
        create_uid,
        write_date,
        write_uid,
        status,
        req_no_control_id,
        start_date,
        requisition_type,
        slip_no,
        slip_id,
        product_id,
        batch_size,
        company_id
    FROM(
    SELECT
        prakruti_production_slip.create_date,
        prakruti_production_slip.create_uid,
        prakruti_production_slip.write_date,
        prakruti_production_slip.write_uid,
        'request' AS status,
        0 AS req_no_control_id,
        prakruti_production_slip.create_date AS start_date,
        'new' AS requisition_type,
        prakruti_production_slip.slip_no,
        prakruti_production_slip.id AS slip_id,
        prakruti_production_slip_line.product_id,
        prakruti_production_slip_line.quantity AS batch_size,
        prakruti_production_slip.company_id
    FROM
        prakruti_production_slip_line JOIN 
        prakruti_production_slip ON 
        prakruti_production_slip_line.main_id = prakruti_production_slip.id 
    WHERE 
        main_id = $1 AND 
        bmr_status = 'True' AND
        bmr_flag = 0 
        ) AS a;
        
    UPDATE prakruti_production_slip_line SET bmr_flag = 1 WHERE main_id = $1 AND bmr_status = 'True'; 
    SELECT count(id) INTO flag_line FROM prakruti_production_slip_line WHERE main_id = $1 AND bmr_flag = 1;
    SELECT count(id) INTO total_line FROM prakruti_production_slip_line WHERE main_id = $1;
    
    IF total_line = flag_line THEN
        UPDATE prakruti_production_slip SET all_send_to_request = 1 WHERE id = $1;
    END IF;
    
ELSIF bmr_flag_status >=1 THEN
    INSERT INTO prakruti_bmr_requisition(
        create_date,
        create_uid,
        write_date,
        write_uid,
        status,
        req_no_control_id,
        start_date,
        requisition_type,
        slip_no,
        slip_id,
        product_id,
        batch_size,
        company_id
        )
    SELECT
        create_date,
        create_uid,
        write_date,
        write_uid,
        status,
        req_no_control_id,
        start_date,
        requisition_type,
        slip_no,
        slip_id,
        product_id,
        batch_size,
        company_id
    FROM(
    SELECT
        prakruti_production_slip.create_date,
        prakruti_production_slip.create_uid,
        prakruti_production_slip.write_date,
        prakruti_production_slip.write_uid,
        'request' AS status,
        0 AS req_no_control_id,
        prakruti_production_slip.create_date AS start_date,
        'new' AS requisition_type,
        prakruti_production_slip.slip_no,
        prakruti_production_slip.id AS slip_id,
        prakruti_production_slip_line.product_id,
        prakruti_production_slip_line.quantity AS batch_size,
        prakruti_production_slip.company_id
    FROM
        prakruti_production_slip_line JOIN 
        prakruti_production_slip ON 
        prakruti_production_slip_line.main_id = prakruti_production_slip.id 
    WHERE 
        main_id = $1 AND 
        bmr_status = 'True' AND 
        planning_status = 'True' AND 
        bmr_flag = 0 AND 
        planning_flag = 1 AND 
        planning_done = 'True'
        ) AS a;
        
    UPDATE prakruti_production_slip_line SET bmr_flag = 1 WHERE main_id = $1 AND bmr_status = 'True' AND planning_status = 'True' AND planning_flag = 1 AND planning_done = 'True'; 
    SELECT count(id) INTO flag_line FROM prakruti_production_slip_line WHERE main_id = $1 AND bmr_flag = 1 AND planning_done = 'True';
    SELECT count(id) INTO total_line FROM prakruti_production_slip_line WHERE main_id = $1;
    
    IF total_line = flag_line THEN
        UPDATE prakruti_production_slip SET all_send_to_request = 1 WHERE id = $1;
    END IF;    
ELSE
    RETURN 'No Any Product to send for BMR Request (or) Planning Not done Yet';
END IF;
    


RETURN 0;
                                
END;
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION public.production_slip_to_bmr_requisition(integer)
  OWNER TO odoo;
  
  
CREATE OR REPLACE FUNCTION public.purchase_invoice_to_purchase_order_upper(integer,character varying,integer)
  RETURNS character varying AS
$BODY$
DECLARE

close_line INTEGER;
total_line INTEGER;

BEGIN

close_line = 0;
total_line = 0;


UPDATE 
	prakruti_purchase_line AS b 
SET 
	status = a.status 
FROM(
	SELECT 
		invoice_line_id,
		purchase_line_common_id,
		product_id,
		status 
	FROM 
		prakruti_purchase_invoice_line 
	WHERE 
		invoice_line_id = $1 
	) AS a 
WHERE 	
	a.purchase_line_common_id = b.id AND 
	a.product_id = b.product_id;

SELECT 
	count(prakruti_purchase_line.id) INTO close_line 
FROM 
	prakruti_purchase_line INNER JOIN 
	prakruti_purchase_order ON 
	prakruti_purchase_order.id = prakruti_purchase_line.purchase_line_id INNER JOIN 
	prakruti_purchase_invoice ON 
	prakruti_purchase_order.po_no = prakruti_purchase_invoice.po_no 
WHERE 
	prakruti_purchase_line.status = 'close' AND 
	prakruti_purchase_invoice.id = CAST($1 AS INTEGER);

SELECT 
	count(prakruti_purchase_line.id) INTO total_line 
FROM 
	prakruti_purchase_line INNER JOIN 
	prakruti_purchase_order ON 
	prakruti_purchase_order.id = prakruti_purchase_line.purchase_line_id INNER JOIN 
	prakruti_purchase_invoice ON 
	prakruti_purchase_order.po_no = prakruti_purchase_invoice.po_no 
WHERE 	
	prakruti_purchase_invoice.id = CAST($1 AS INTEGER);

IF close_line = total_line THEN
	UPDATE 
		prakruti_purchase_order 
	SET 
		state = 'order_close' 
	WHERE 
		prakruti_purchase_order.po_no = $2;
	UPDATE 
		prakruti_purchase_invoice 
	SET 
		order_close_flag = 1 
	WHERE 
		id = $1;
	UPDATE 
		prakruti_purchase_invoice 
	SET 
		status = 'close' 
	WHERE 
		po_no = $2;
	UPDATE 
		prakruti_grn_inspection_details 
	SET 
		order_close_flag = 1 
	WHERE 
		prakruti_grn_inspection_details.id = $3;
ELSE	
	UPDATE 
		prakruti_purchase_invoice 
	SET 
		order_close_pending = 1 
	WHERE 
		id = $1;
	UPDATE 
		prakruti_purchase_invoice 
	SET 
		status = 'pending' 
	WHERE 
		id = $1;
	UPDATE 
		prakruti_grn_inspection_details 
	SET 
		order_close_flag = 1 
	WHERE 
		prakruti_grn_inspection_details.id = $3;
END IF;

RETURN 0;

END;
$BODY$
LANGUAGE plpgsql VOLATILE
COST 100;
ALTER FUNCTION public.purchase_invoice_to_purchase_order_upper(integer,character varying,integer)
OWNER TO odoo;



  
CREATE OR REPLACE FUNCTION public.purchase_invoice_to_purchase_order_lower(integer,character varying,integer)
  RETURNS character varying AS
$BODY$
DECLARE

c_line INTEGER;
t_line INTEGER;

BEGIN

c_line = 0;
t_line = 0;
    
    
UPDATE 
	prakruti_purchase_line AS b 
SET 
	status = a.status 
FROM(
	SELECT 
		invoice_line_id,
		purchase_line_common_id,
		product_id,
		status 
	FROM 
		prakruti_purchase_invoice_line 
	WHERE 
		invoice_line_id= $1 
	) AS a 
WHERE 
	a.purchase_line_common_id = b.id AND 
	a.product_id = b.product_id;

SELECT 
	count(prakruti_purchase_line.id) INTO c_line 
FROM 
	prakruti_purchase_line INNER JOIN 
	prakruti_purchase_order ON 
	prakruti_purchase_order.id = prakruti_purchase_line.purchase_line_id INNER JOIN 
	prakruti_purchase_invoice ON 
	prakruti_purchase_order.po_no = prakruti_purchase_invoice.po_no 
WHERE 
	prakruti_purchase_line.status = 'close' AND 
	prakruti_purchase_invoice.id = CAST($1 AS INTEGER);

SELECT 
	count(prakruti_purchase_line.id) INTO t_line 
FROM 
	prakruti_purchase_line INNER JOIN 
	prakruti_purchase_order ON 
	prakruti_purchase_order.id = prakruti_purchase_line.purchase_line_id INNER JOIN 
	prakruti_purchase_invoice ON 
	prakruti_purchase_order.po_no = prakruti_purchase_invoice.po_no 
WHERE 
	prakruti_purchase_invoice.id = CAST($1 AS INTEGER);

IF c_line = t_line THEN
	UPDATE 
		prakruti_purchase_order 
	SET 
		state = 'order_close' 
	WHERE 
		prakruti_purchase_order.po_no = $2;
	UPDATE 
		prakruti_purchase_invoice 
	SET 
		order_close_flag = 1 
	WHERE 
		id = $1;
	UPDATE 
		prakruti_purchase_invoice 
	SET 
		status = 'close' 
	WHERE 
		po_no = $2;
	UPDATE 
		prakruti_grn_inspection_details 
	SET 
		order_close_flag = 1 
	WHERE 
		prakruti_grn_inspection_details.id = $3;
ELSE
	
	UPDATE 
		prakruti_purchase_invoice 
	SET 
		order_close_pending = 1 
	WHERE 
		id = $1;
	UPDATE 
		prakruti_purchase_invoice 
	SET 
		status = 'pending' 
	WHERE 
		id = $1;
	UPDATE 
		prakruti_grn_inspection_details 
	SET 
		order_close_flag = 1 
	WHERE 
		prakruti_grn_inspection_details.id = $3;
END IF;

RETURN 0;

END;
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION public.purchase_invoice_to_purchase_order_lower(integer,character varying,integer)
  OWNER TO odoo;
  

--DROP FUNCTION ptn_ha_to_inward(integer,character varying)
CREATE OR REPLACE FUNCTION public.ptn_ha_to_inward(integer,character varying)
  RETURNS integer AS
$BODY$
DECLARE qty   integer;
accept_qty integer;
reject_qty integer;
BEGIN
qty = 0;
reject_qty=0;
accept_qty=0;

SELECT 
	accepted_qty INTO accept_qty 
FROM 
	prakruti_production_transfer_note_ha_line 
WHERE 
	main_id= $1 ;
SELECT 
	rejected_qty INTO reject_qty 
FROM 
	prakruti_production_transfer_note_ha_line 
WHERE 
	main_id= $1; 
IF accept_qty>0
THEN
	UPDATE  
		prakruti_production_inward 
	SET 
		state = 'approved' 
	WHERE 
		prakruti_production_inward.inward_no =$2;
	UPDATE 
		prakruti_production_inward_line AS b 
	SET 
		qc_status =a.qc_status,
		accepted_qty =a.accepted_qty,
		state = 'qc_check',
		specification_id = a.specification_id
	FROM(
		SELECT 
			main_id,
			product_id,
			qc_status,
			accepted_qty,
			specification_id,
			common_inward_line_id 
		FROM 
			prakruti_production_transfer_note_ha_line 
		WHERE 
			main_id=$1 
		) AS a
	 WHERE 
		a.product_id = b.product_id AND 
		a.common_inward_line_id = b.id;
	UPDATE  
		prakruti_production_transfer_note_ha 
	SET 
		state = 'approved' 
	WHERE 
		prakruti_production_transfer_note_ha.id =$1;
        
        UPDATE prakruti_production_transfer_note_qc SET state = 'approved' WHERE prakruti_production_transfer_note_qc.ptn_no = $2;
        UPDATE prakruti_production_transfer_note SET state = 'approved' WHERE prakruti_production_transfer_note.ptn_no = $2;
		
END IF;
IF reject_qty	>0
THEN
	UPDATE  
		prakruti_production_inward 
	SET 
		state = 'rejected' 
	WHERE 
		prakruti_production_inward.inward_no = $2;
        UPDATE 
		prakruti_production_inward_line AS b 
	SET 
		rejected_qty =a.rejected_qty,
		qc_status =a.qc_status,
		state = 'qc_check',
		specification_id = a.specification_id
        FROM(
		SELECT 
			main_id,
			product_id,
			qc_status,
			rejected_qty,
			specification_id,
			common_inward_line_id 
		FROM 
			prakruti_production_transfer_note_ha_line 
		WHERE 
			main_id= $1 
		) AS a
	 WHERE
		a.product_id = b.product_id AND
		 a.common_inward_line_id = b.id;
        UPDATE  
		prakruti_production_transfer_note_ha 
	SET 
		state = 'rejected' 
	WHERE 
		prakruti_production_transfer_note_ha.id = $1;
		
        UPDATE prakruti_production_transfer_note_qc SET state = 'rejected' WHERE prakruti_production_transfer_note_qc.ptn_no = $2;
        UPDATE prakruti_production_transfer_note SET state = 'rejected' WHERE prakruti_production_transfer_note.ptn_no = $2;
END IF;       
RETURN qty;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION public.ptn_ha_to_inward(integer,character varying)
  OWNER TO odoo;
  
CREATE OR REPLACE FUNCTION public.production_transfer_note_action_list_product_extraction(integer,integer)
  RETURNS integer AS
$BODY$
DECLARE 

qty   INTEGER;

BEGIN

qty = 0;

INSERT INTO prakruti_production_transfer_note_line (product_id,uom_id,description,total_output_qty,main_id)
SELECT 
    product_id,
    uom_id,
    description,
    total_output_qty,
    main_id 
FROM(
    SELECT 
        prakruti_rm_assay.material_id AS product_id,
        product_uom.id AS uom_id,
        product_product.name_template AS description,
        prakruti_rm_assay.rm_assay_output AS total_output_qty
    FROM 
        prakruti_rm_assay INNER JOIN 
        prakruti_production ON
        prakruti_rm_assay.production_id = prakruti_production.id  INNER JOIN
        product_product ON
        prakruti_rm_assay.material_id = product_product.id INNER JOIN
        product_template ON
        product_template.id = product_product.product_tmpl_id INNER JOIN
        product_uom ON
        product_uom.id=product_template.uom_id
    WHERE 
        prakruti_production.batch_id = $2 AND
        prakruti_production.revise_flag = 0
   ) AS a CROSS JOIN
   (
    SELECT 
        id AS main_id 
    FROM 
        prakruti_production_transfer_note 
    WHERE 
        prakruti_production_transfer_note.id = $1
   ) AS b;
   
UPDATE 
    prakruti_production_transfer_note 
SET 
    extraction_display_flag = 1,
    extraction_delete_flag = 0,
    syrup_display_flag = 0,
    syrup_delete_flag = 0,
    tablet_display_flag = 0,
    tablet_delete_flag = 0,
    powder_display_flag = 0,
    powder_delete_flag = 0  
WHERE 
    prakruti_production_transfer_note.id = $1;

RETURN qty;
                                
END;
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION public.production_transfer_note_action_list_product_extraction(integer,integer)
  OWNER TO odoo;
  
  
  
CREATE OR REPLACE FUNCTION public.production_transfer_note_action_list_product_tablet(integer,integer)
  RETURNS integer AS
$BODY$
DECLARE 

qty   INTEGER;

BEGIN

qty = 0;

INSERT INTO prakruti_production_transfer_note_line (product_id,uom_id,description,total_output_qty,main_id)
SELECT 
    product_id,
    uom_id,
    description,
    total_output_qty,
    main_id 
FROM(
    SELECT 
        prakruti_tablet_rm_assay.product_id,
        product_uom.id AS uom_id,
        product_product.name_template AS description,
        prakruti_tablet_rm_assay.rm_assay_output AS total_output_qty
    FROM 
        prakruti_tablet_rm_assay INNER JOIN 
        prakruti_tablet_production ON
        prakruti_tablet_rm_assay.production_tablet_id = prakruti_tablet_production.id  INNER JOIN
        product_product ON
        prakruti_tablet_rm_assay.product_id = product_product.id INNER JOIN
        product_template ON
        product_template.id = product_product.product_tmpl_id INNER JOIN
        product_uom ON
        product_uom.id=product_template.uom_id
    WHERE 
        prakruti_tablet_production.batch_id = $2 AND
        prakruti_tablet_production.revise_flag = 0
   ) as a CROSS JOIN
   (
    SELECT 
        id as main_id 
    FROM 
        prakruti_production_transfer_note 
    WHERE 
        prakruti_production_transfer_note.id = $1 
   ) as b;
   
UPDATE 
    prakruti_production_transfer_note 
SET 
    tablet_display_flag = 1,
    tablet_delete_flag = 0,
    syrup_display_flag = 0,
    syrup_delete_flag = 0,
    extraction_display_flag = 0,
    extraction_delete_flag = 0,
    powder_display_flag = 0,
    powder_delete_flag = 0 
WHERE 
    prakruti_production_transfer_note.id = $1;

RETURN qty;
                                
END;
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION public.production_transfer_note_action_list_product_tablet(integer,integer)
  OWNER TO odoo;
  
  
  
  
  
  
  
CREATE OR REPLACE FUNCTION public.production_transfer_note_action_list_product_syrup(integer,integer)
  RETURNS integer AS
$BODY$
DECLARE 

qty   INTEGER;

BEGIN

qty = 0;

INSERT INTO prakruti_production_transfer_note_line (product_id,uom_id,description,total_output_qty,main_id)
SELECT 
    product_id,
    uom_id,
    description,
    total_output_qty,
    main_id 
FROM(
    SELECT 
        prakruti_syrup_rm_assay.product_id,
        product_uom.id AS uom_id,
        product_product.name_template AS description,
        prakruti_syrup_rm_assay.rm_assay_output AS total_output_qty
    FROM 
        prakruti_syrup_rm_assay INNER JOIN 
        prakruti_syrup_production ON
        prakruti_syrup_rm_assay.production_syrup_id = prakruti_syrup_production.id  INNER JOIN
        product_product ON
        prakruti_syrup_rm_assay.product_id = product_product.id INNER JOIN
        product_template ON
        product_template.id = product_product.product_tmpl_id INNER JOIN
        product_uom ON
        product_uom.id=product_template.uom_id
    WHERE 
        prakruti_syrup_production.batch_id = $2 AND
        prakruti_syrup_production.revise_flag = 0
   ) as a CROSS JOIN
   (
    SELECT 
        id as main_id 
    FROM 
        prakruti_production_transfer_note 
    WHERE 
        prakruti_production_transfer_note.id = $1
   ) as b;
   
UPDATE 
    prakruti_production_transfer_note 
SET 
    syrup_display_flag = 1,
    syrup_delete_flag = 0,
    tablet_display_flag = 0,
    tablet_delete_flag = 0,
    extraction_display_flag = 0,
    extraction_delete_flag = 0,
    powder_display_flag = 0,
    powder_delete_flag = 0  
WHERE 
    prakruti_production_transfer_note.id = $1;

RETURN qty;
                                
END;
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION public.production_transfer_note_action_list_product_syrup(integer,integer)
  OWNER TO odoo;
  
  
CREATE OR REPLACE FUNCTION public.production_transfer_note_action_list_product_powder(integer,integer)
  RETURNS integer AS
$BODY$
DECLARE 

qty   INTEGER;

BEGIN

qty = 0;

INSERT INTO prakruti_production_transfer_note_line (product_id,uom_id,description,total_output_qty,main_id)
SELECT 
    product_id,
    uom_id,
    description,
    total_output_qty,
    main_id 
FROM(
    SELECT 
        prakruti_powder_rm_assay.product_id,
        product_uom.id AS uom_id,
        product_product.name_template AS description,
        prakruti_powder_rm_assay.rm_assay_output AS total_output_qty
    FROM 
        prakruti_powder_rm_assay INNER JOIN 
        prakruti_powder_production ON
        prakruti_powder_rm_assay.production_powder_id = prakruti_powder_production.id  INNER JOIN
        product_product ON
        prakruti_powder_rm_assay.product_id = product_product.id INNER JOIN
        product_template ON
        product_template.id = product_product.product_tmpl_id INNER JOIN
        product_uom ON
        product_uom.id=product_template.uom_id
    WHERE 
        prakruti_powder_production.batch_id = $2 AND
        prakruti_powder_production.revise_flag = 0
   ) as a CROSS JOIN
   (
    SELECT 
        id as main_id 
    FROM 
        prakruti_production_transfer_note 
    WHERE 
        prakruti_production_transfer_note.id = $1 
   ) as b;
   
UPDATE 
    prakruti_production_transfer_note 
SET 
    powder_display_flag = 1,
    powder_delete_flag = 0,
    syrup_display_flag = 0,
    syrup_delete_flag = 0,
    extraction_display_flag = 0,
    extraction_delete_flag = 0,
    tablet_display_flag = 0,
    tablet_delete_flag = 0  
WHERE 
    prakruti_production_transfer_note.id = $1;

RETURN qty;
                                
END;
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION public.production_transfer_note_action_list_product_powder(integer,integer)
  OWNER TO odoo;
  
  
  
  
  CREATE OR REPLACE FUNCTION public.production_slip_to_sales_order(integer,character varying,character varying,character varying)
  RETURNS character varying AS
$BODY$
DECLARE 
scheduled_qty_entered_line INTEGER;
total_no_line INTEGER;
no_of_closed_line INTEGER;
no_of_line INTEGER;
qty INTEGER;
BEGIN


scheduled_qty_entered_line = 0;
total_no_line = 0;
no_of_closed_line = 0;
no_of_line = 0;
qty = 0;

SELECT 
    COUNT(scheduled_qty) INTO scheduled_qty_entered_line 
FROM 
    prakruti_production_slip_line 
WHERE 
    main_id = $1 AND scheduled_qty > 0;
    
SELECT
    COUNT(id) INTO total_no_line
FROM 
    prakruti_production_slip_line 
WHERE 
    main_id = $1;
    
IF total_no_line = scheduled_qty_entered_line THEN
    UPDATE 
        prakruti_sales_order_item AS b 
    SET 
        previous_scheduled_qty=a.scheduled_qty,
        total_scheduled_qty =a.scheduled_qty + total_scheduled_qty 
    FROM(
        SELECT 
            main_id,
            so_line_grid_id,
            product_id,
            scheduled_qty 
        FROM 
            prakruti_production_slip_line 
        WHERE 
            main_id= $1 
        ) AS a 
    WHERE 
        a.so_line_grid_id = b.id AND 
        a.product_id = b.product_id;
        
    UPDATE 
        prakruti_sales_order_item AS b 
    SET 
        scheduled_date =a.scheduled_date,
        scheduled_qty=a.scheduled_qty,
        state = 'partially_confirmed', 
        balance_qty = a.balance_qty 
    FROM(
        SELECT 
            main_id,
            so_line_grid_id,
            product_id,
            scheduled_date,
            scheduled_qty, 
            quantity,
            balance_qty 
        FROM 
            prakruti_production_slip_line 
        WHERE 
            main_id= $1 
        ) AS a 
    WHERE 
        a.so_line_grid_id = b.id AND 
        a.product_id = b.product_id;
        
    UPDATE 
        prakruti_sales_order_item AS b 
    SET 
        state = 'production_slip_confirmed',
        status = 'close' 
    FROM(
        SELECT 
            main_id,
            so_line_grid_id,
            product_id,
            balance_qty 
        FROM 
            prakruti_production_slip_line 
        WHERE 
            main_id= $1 
        ) AS a 
    WHERE 
        a.so_line_grid_id = b.id AND 
        a.product_id = b.product_id AND 
        b.balance_qty = 0;
        
    UPDATE 
        prakruti_sales_order AS b 
    SET 
        slip_no =a.slip_no 
    FROM(
        SELECT 
            slip_no,
            order_no 
        FROM 
            prakruti_production_slip 
        WHERE 
            id= $1 AND 
            order_no=$2
        ) AS a 
    WHERE 
        a.order_no = b.order_no;
        
    SELECT count(id) INTO no_of_closed_line FROM prakruti_production_slip_line WHERE balance_qty = 0 and main_id = $1;
    SELECT count(id) INTO no_of_line FROM prakruti_production_slip_line WHERE main_id = $1;
    
    IF no_of_line = no_of_closed_line THEN
        UPDATE prakruti_sales_order SET state = 'production_slip_confirmed' WHERE prakruti_sales_order.order_no = $2 AND prakruti_sales_order.quotation_no = $3;
        UPDATE prakruti_sales_inquiry SET state = 'production_slip_confirmed' WHERE prakruti_sales_inquiry.inquiry_no = $4 AND prakruti_sales_inquiry.state != 'rejected';
        UPDATE prakruti_sales_quotation SET state = 'production_slip_confirmed' WHERE prakruti_sales_quotation.inquiry_no = $4 AND prakruti_sales_quotation.quotation_no= $3 AND prakruti_sales_quotation.state != 'rejected';
        UPDATE prakruti_production_slip SET state = 'production_slip_confirmed' WHERE prakruti_production_slip.id = $1;
    ELSE
        UPDATE prakruti_sales_order SET state = 'partially_confirmed' WHERE prakruti_sales_order.order_no = $2 AND prakruti_sales_order.quotation_no = $3;
        UPDATE prakruti_sales_inquiry SET state = 'partially_confirmed' WHERE prakruti_sales_inquiry.inquiry_no = $4 AND prakruti_sales_inquiry.state != 'rejected';
        UPDATE prakruti_sales_quotation SET state = 'partially_confirmed' WHERE prakruti_sales_quotation.inquiry_no = $4 AND prakruti_sales_quotation.quotation_no= $3 AND prakruti_sales_quotation.state != 'rejected';
        UPDATE prakruti_production_slip SET state = 'partially_confirmed' WHERE prakruti_production_slip.id = $1 ;
    END IF;
    
ELSE
    RETURN 'Oops...! Please Enter Scheduled Qty.';
END IF;
    


RETURN qty;
                                
END;
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION public.production_slip_to_sales_order(integer,character varying,character varying,character varying)
  OWNER TO odoo;
  
CREATE OR REPLACE FUNCTION public.production_slip_to_production_planning(integer)
  RETURNS character varying AS
$BODY$
DECLARE 
planning_flag_status INTEGER;
flag_line INTEGER;
total_line INTEGER;
no_of_line INTEGER;
qty INTEGER;
BEGIN


planning_flag_status = 0;
flag_line = 0;
total_line = 0;
no_of_line = 0;
qty = 0;

SELECT count(id) INTO planning_flag_status FROM prakruti_production_slip_line WHERE main_id = $1 AND planning_status = 'True' AND planning_flag = 0;

IF planning_flag_status >= 1 THEN
    INSERT INTO prakruti_production_planning
        (
        create_uid,
        create_date,
        write_uid,
        write_date,
        flag_display_count,
        flag_delete_count,
        all_send_to_request,
        status,
        slip_no,
        slip_id,
        product_id,
        ps_line_grid_id,
        output_yield_qty,
        availble_stock_qty,
        company_id
        )
    SELECT
        create_uid,
        create_date,
        write_uid,
        write_date,
        flag_display_count,
        flag_delete_count,
        all_send_to_request,
        status,
        slip_no,
        slip_id,
        product_id,
        ps_line_grid_id,
        output_yield_qty,
        availble_stock_qty,
        company_id
    FROM(
    SELECT
        prakruti_production_slip.create_uid,
        prakruti_production_slip.create_date,
        prakruti_production_slip.write_uid,
        prakruti_production_slip.write_date,
        0 AS flag_display_count,
        0 AS flag_delete_count,
        0 AS all_send_to_request,
        'planning' AS status,
        prakruti_production_slip.slip_no,
        prakruti_production_slip.id AS slip_id,
        prakruti_production_slip_line.product_id,
        prakruti_production_slip_line.id AS ps_line_grid_id,
        prakruti_production_slip_line.quantity AS output_yield_qty,
        prakruti_production_slip_line.store_qty AS availble_stock_qty,
        prakruti_production_slip.company_id
    FROM
        prakruti_production_slip JOIN 
        prakruti_production_slip_line ON
        prakruti_production_slip_line.main_id = prakruti_production_slip.id 
    WHERE 
        main_id = $1 AND 
        planning_status = 'True' AND 
        planning_flag = 0
        ) AS a;
        
    UPDATE prakruti_production_slip_line SET planning_flag = 1 WHERE planning_status = 'True' AND main_id = $1;
    
    SELECT count(id) INTO flag_line FROM prakruti_production_slip_line WHERE main_id = $1 AND planning_flag = 1;
    SELECT count(id) INTO total_line FROM prakruti_production_slip_line WHERE main_id = $1;
    
    IF total_line = flag_line THEN
        UPDATE prakruti_production_slip SET all_send_to_planning = 1 WHERE id = $1;
    END IF;
    
    
ELSE
    RETURN 'No Any Product to send for Planning';
END IF;
    


RETURN qty;
                                
END;
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION public.production_slip_to_production_planning(integer)
  OWNER TO odoo;
  
CREATE OR REPLACE FUNCTION public.reject_purchase_order(integer,character varying,character varying,integer,character varying)
  RETURNS character varying AS
$BODY$
DECLARE 

total_line INTEGER;
rejected_line INTEGER;

BEGIN

total_line = 0;
rejected_line = 0;

UPDATE 
	prakruti_purchase_order 
SET 
	state = 'reject' 
WHERE 
	prakruti_purchase_order.pr_no = $2 AND 
	prakruti_purchase_order.id = $1;
	
	
UPDATE 
	prakruti_purchase_order_quotation_analysis 
SET 
	state = 'reject'
FROM(
	SELECT
		prakruti_purchase_order.pr_no,
		prakruti_purchase_order.qo_no
	FROM
		prakruti_purchase_order
	WHERE
		prakruti_purchase_order.id = $1 AND
		prakruti_purchase_order.pr_no = $2		
    ) AS purchase_order 
WHERE 
	prakruti_purchase_order_quotation_analysis.pr_no = purchase_order.pr_no AND 
	prakruti_purchase_order_quotation_analysis.qo_no = purchase_order.qo_no;
	
	
UPDATE 
	prakruti_purchase_order_quotation 
SET 
	state = 'reject'
FROM(
	SELECT
		prakruti_purchase_order.pr_no,
		prakruti_purchase_order.qo_no,
		prakruti_purchase_order.vendor_id
	FROM
		prakruti_purchase_order
	WHERE
		prakruti_purchase_order.id = $1 AND
		prakruti_purchase_order.pr_no = $2		
    ) AS purchase_order 
WHERE 
	prakruti_purchase_order_quotation.pr_no = purchase_order.pr_no AND 
	prakruti_purchase_order_quotation.qo_no = purchase_order.qo_no AND
	prakruti_purchase_order_quotation.vendor_id = purchase_order.vendor_id ;
	

UPDATE 
	prakruti_logistics_po_tracking 
SET 
	state = 'reject'
FROM(
	SELECT
		prakruti_purchase_order.pr_no,
		prakruti_purchase_order.qo_no,
		prakruti_purchase_order.vendor_id
	FROM
		prakruti_purchase_order
	WHERE
		prakruti_purchase_order.id = $1 AND
		prakruti_purchase_order.pr_no = $2		
    ) AS purchase_order 
WHERE 
	prakruti_logistics_po_tracking.pr_no = purchase_order.pr_no AND 
	prakruti_logistics_po_tracking.qo_no = purchase_order.qo_no AND
	prakruti_logistics_po_tracking.vendor_id = purchase_order.vendor_id AND
	prakruti_logistics_po_tracking.po_no = $3 AND
	prakruti_logistics_po_tracking.vendor_id = $4;

	
UPDATE  
	prakruti_price_request 
SET 
	state = 'reject' 
WHERE 
	prakruti_price_request.request_no = $2 AND 
	prakruti_price_request.inquiry_no = $5;
	
	
UPDATE  
	prakruti_purchase_requistion_analysis_line 
SET 
	reject_status = 'Yes',
	status = 'rejected',
	remarks = 'Rejected From PO'
FROM(
	SELECT
		prakruti_purchase_line.product_id,
		prakruti_purchase_line.requisition_line_id
	FROM
		prakruti_purchase_line JOIN
		prakruti_purchase_order ON
		prakruti_purchase_line.purchase_line_id = prakruti_purchase_order.id
	WHERE
		prakruti_purchase_order.id = $1 AND
		prakruti_purchase_order.pr_no = $2 AND
		prakruti_purchase_line.purchase_line_id = $1
    ) AS purchase_order_grid_line
WHERE 
	prakruti_purchase_requistion_analysis_line.requisition_line_id = purchase_order_grid_line.requisition_line_id AND
	prakruti_purchase_requistion_analysis_line.product_id = purchase_order_grid_line.product_id AND
	prakruti_purchase_requistion_analysis_line.status != 'rejected' AND 
	prakruti_purchase_requistion_analysis_line.short_close_status != 'Yes';
	
	
SELECT 
	count(prakruti_purchase_requistion_analysis_line.id) INTO total_line 
FROM 
	prakruti_purchase_requistion_analysis_line JOIN 
	prakruti_purchase_requistion_analysis ON 
	prakruti_purchase_requistion_analysis_line.requistion_line_id = prakruti_purchase_requistion_analysis.id JOIN 
	prakruti_purchase_order ON 
	prakruti_purchase_requistion_analysis.request_no = prakruti_purchase_order.pr_no 
WHERE 
	prakruti_purchase_requistion_analysis.request_no = $2 AND 
	prakruti_purchase_order.id = $1;
	
SELECT 
	count(prakruti_purchase_requistion_analysis_line.id) INTO rejected_line 
FROM 
	prakruti_purchase_requistion_analysis_line JOIN 
	prakruti_purchase_requistion_analysis ON 
	prakruti_purchase_requistion_analysis_line.requistion_line_id = prakruti_purchase_requistion_analysis.id JOIN 
	prakruti_purchase_order ON 
	prakruti_purchase_requistion_analysis.request_no = prakruti_purchase_order.pr_no 
WHERE
	prakruti_purchase_requistion_analysis_line.status = 'rejected' AND 
	prakruti_purchase_requistion_analysis.request_no = $2 AND 
	prakruti_purchase_order.id = $1;
	
IF total_line = rejected_line THEN
    UPDATE 
        prakruti_purchase_requistion_analysis AS b 
    SET 
            state = 'rejected' 
    FROM(
            SELECT 
                    prakruti_purchase_order.id,
                    prakruti_purchase_order.pr_no 
            FROM 
                    prakruti_purchase_order 
            WHERE 
                    prakruti_purchase_order.id= $1 AND 
                    prakruti_purchase_order.pr_no = $2
        ) AS a 
    WHERE 
            a.pr_no = b.request_no;
	
	
    UPDATE 
            prakruti_purchase_requisition_approve AS b 
    SET 
            state = 'rejected' 
    FROM(
            SELECT 
                    prakruti_purchase_order.id,
                    prakruti_purchase_order.pr_no 
            FROM 
                    prakruti_purchase_order 
            WHERE 
                    prakruti_purchase_order.id= $1 AND 
                    prakruti_purchase_order.pr_no = $2
        ) AS a 
    WHERE 
            a.pr_no = b.requisition_no;
	

    UPDATE 
            prakruti_purchase_requisition AS b 
    SET 
            state = 'rejected' 
    FROM(
            SELECT 
                    prakruti_purchase_order.id,
                    prakruti_purchase_order.pr_no 
            FROM 
                    prakruti_purchase_order 
            WHERE 
                    prakruti_purchase_order.id= $1 AND 
                    prakruti_purchase_order.pr_no = $2
        ) AS a 
    WHERE 
            a.pr_no = b.requisition_no; 
ELSE
    
    UPDATE 
        prakruti_purchase_requistion_analysis AS b 
    SET 
            state = 'partial_confirm' 
    FROM(
            SELECT 
                    prakruti_purchase_order.id,
                    prakruti_purchase_order.pr_no 
            FROM 
                    prakruti_purchase_order 
            WHERE 
                    prakruti_purchase_order.id= $1 AND 
                    prakruti_purchase_order.pr_no = $2
        ) AS a 
    WHERE 
            a.pr_no = b.request_no;
            

    UPDATE 
            prakruti_purchase_requisition_approve AS b 
    SET 
            state = 'partial_confirm' 
    FROM(
            SELECT 
                    prakruti_purchase_order.id,
                    prakruti_purchase_order.pr_no 
            FROM 
                    prakruti_purchase_order 
            WHERE 
                    prakruti_purchase_order.id= $1 AND 
                    prakruti_purchase_order.pr_no = $2
        ) AS a 
    WHERE 
            a.pr_no = b.requisition_no;
            

    UPDATE 
            prakruti_purchase_requisition AS b 
    SET 
            state = 'partial_confirm' 
    FROM(
            SELECT 
                    prakruti_purchase_order.id,
                    prakruti_purchase_order.pr_no 
            FROM 
                    prakruti_purchase_order 
            WHERE 
                    prakruti_purchase_order.id= $1 AND 
                    prakruti_purchase_order.pr_no = $2
        ) AS a 
    WHERE 
            a.pr_no = b.requisition_no;

END IF;


RETURN 0;
                                
END;
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION public.reject_purchase_order(integer,character varying,character varying,integer,character varying)
  OWNER TO odoo;
  
  
CREATE OR REPLACE FUNCTION public.reject_sales_order(integer,integer,character varying,character varying)
  RETURNS integer AS
$BODY$
DECLARE qty   integer;
BEGIN

qty = 0;


UPDATE  
	prakruti_sales_order 
SET 
	state = 'rejected' 
WHERE 
	id = $1 AND 
	customer_id = $2 AND
	quotation_no = $3;
	
UPDATE  
	prakruti_sales_inquiry 
SET 
	state = 'rejected' 
WHERE 
	prakruti_sales_inquiry.inquiry_no = $4 AND 
	prakruti_sales_inquiry.customer_id = $2;
	
UPDATE  
	prakruti_sales_quotation 
SET 
	state = 'rejected' 
WHERE 
	prakruti_sales_quotation.inquiry_no = $4 AND 
	prakruti_sales_quotation.customer_id = $2 AND
	prakruti_sales_quotation.quotation_no = $3;
	
UPDATE  
	prakruti_production_slip 
SET 
	state = 'rejected' 
WHERE 
	prakruti_production_slip.inquiry_no = $4 AND 
	prakruti_production_slip.customer_id = $2 AND
	prakruti_production_slip.quotation_no = $3;

RETURN qty;
                                
END;
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION public.reject_sales_order(integer,integer,character varying,character varying)
  OWNER TO odoo;
  
CREATE OR REPLACE FUNCTION public.revise_production_slip(integer,character varying)
  RETURNS character varying AS
$BODY$
DECLARE 
qty   integer;
line_id INTEGER;
BEGIN

qty = 0;
line_id = 0;

SELECT 
	inquiry_line_id INTO line_id
FROM 
	prakruti_production_slip_line JOIN
	prakruti_production_slip ON
	prakruti_production_slip_line.main_id = prakruti_production_slip.id
WHERE 
	prakruti_production_slip.state != 'rejected' AND 
	prakruti_production_slip_line.main_id = $1 AND  
	prakruti_production_slip.id = $1 AND 
	prakruti_production_slip.inquiry_no = $2;
	
IF line_id > 0 THEN

    UPDATE 
            prakruti_production_slip 
    SET 
            revise_status = 'revise_done',
            revise_no = revise_no + 1,
            revise_remarks_update = revise_remarks_update ||e'\n' 
            || '--------------------------' ||e'\n' 
            || 'Revision Done in ' ||e'\n' 
            || 'Production Slip' ||e'\n' 
            || 'Revision No ' ||e'\n' 
            || revise_no + 1 ||e'\n' 
            || 'Remarks which was entered was ' ||e'\n' 
            || revise_remarks ||e'\n' 
            || 'Which was Revised By ' ||e'\n' 
            || revise_done_by 
    FROM( 
            SELECT 
                    res_partner.name AS revise_done_by 
            FROM 
                    prakruti_production_slip JOIN 
                    res_users ON 
                    prakruti_production_slip.revise_id = res_users.id JOIN 
                    res_partner ON 
                    res_users.partner_id = res_partner.id 
            WHERE 
                    prakruti_production_slip.id =$1 
        ) AS revise_done_person_name 
    WHERE 
            prakruti_production_slip.id = $1;

    UPDATE 
            prakruti_sales_inquiry AS a 
    SET 
            revise_remarks_update = revise_remarks_update ||e'\n' 
            || '--------------------------' ||e'\n' 
            || 'Revision Done in ' ||e'\n' 
            || 'Production Slip' ||e'\n' 
            || 'Remarks which was entered was ' ||e'\n' 
            || b.revise_remarks ||e'\n' 
            || 'Which was Revised By ' ||e'\n' 
            || b.revise_done_by 
    FROM( 
            SELECT 
                    res_partner.name AS revise_done_by,
                    prakruti_production_slip.revise_remarks,
                    prakruti_production_slip.inquiry_no 
            FROM 
                    prakruti_production_slip JOIN 
                    res_users ON 
                    prakruti_production_slip.revise_id = res_users.id JOIN 
                    res_partner ON 
                    res_users.partner_id = res_partner.id 
            WHERE 
                    prakruti_production_slip.id = $1 AND 
                    prakruti_production_slip.inquiry_no = $2
        ) AS b 
    WHERE 
            a.inquiry_no = b.inquiry_no AND 
            a.state != 'rejected' AND 
            a.inquiry_no = $2;

    UPDATE 
            prakruti_sales_inquiry_item AS a 
    SET 
            product_id = b.product_id,
            quantity = b.quantity,
            description = b.description,
            uom_id = b.uom_id,
            specification_id = b.specification_id,
            remarks = b.remarks
    FROM( 
            SELECT 
                    prakruti_production_slip_line.product_id,
                    prakruti_production_slip_line.quantity,
                    prakruti_production_slip_line.inquiry_line_id,
                    prakruti_production_slip_line.description,
                    prakruti_production_slip_line.unit_price,
                    prakruti_production_slip_line.uom_id,
                    prakruti_production_slip_line.specification_id,
                    prakruti_production_slip_line.remarks
            FROM 
                    prakruti_production_slip_line JOIN 
                    prakruti_production_slip ON 
                    prakruti_production_slip.id = prakruti_production_slip_line.main_id 
            WHERE 
                    prakruti_production_slip.id = $1 AND 
                    prakruti_production_slip.inquiry_no = $2 AND 
                    prakruti_production_slip_line.main_id = $1
        ) AS b 
    WHERE 
            a.id = b.inquiry_line_id AND 
            a.product_id = b.product_id;
            

    UPDATE 
            prakruti_sales_quotation AS a 
    SET 
            revise_remarks_update = revise_remarks_update ||e'\n' 
            || '--------------------------' ||e'\n' 
            || 'Revision Done in ' ||e'\n' 
            || 'Production Slip' ||e'\n' 
            || 'Remarks which was entered was ' ||e'\n' 
            || b.revise_remarks ||e'\n' 
            || 'Which was Revised By ' ||e'\n' 
            || b.revise_done_by 
    FROM( 
            SELECT 
                    res_partner.name AS revise_done_by,
                    prakruti_production_slip.revise_remarks,
                    prakruti_production_slip.inquiry_no 
            FROM 
                    prakruti_production_slip JOIN 
                    res_users ON 
                    prakruti_production_slip.revise_id = res_users.id JOIN 
                    res_partner ON 
                    res_users.partner_id = res_partner.id 
            WHERE 
                    prakruti_production_slip.id = $1 AND 
                    prakruti_production_slip.inquiry_no = $2
        ) AS b 
    WHERE 
            a.inquiry_no = b.inquiry_no AND 
            a.state != 'rejected' AND 
            a.inquiry_no = $2;
            
    UPDATE 
            prakruti_sales_quotation_line AS a 
    SET 
            product_id = b.product_id,
            quantity = b.quantity,
            description = b.description,
            uom_id = b.uom_id,
            specification_id = b.specification_id,
            remarks = b.remarks,
            unit_price = b.unit_price
    FROM( 
            SELECT 
                    prakruti_production_slip_line.product_id,
                    prakruti_production_slip_line.quantity,
                    prakruti_production_slip_line.inquiry_line_id,
                    prakruti_production_slip_line.description,
                    prakruti_production_slip_line.unit_price,
                    prakruti_production_slip_line.uom_id,
                    prakruti_production_slip_line.specification_id,
                    prakruti_production_slip_line.remarks
            FROM 
                    prakruti_production_slip_line JOIN 
                    prakruti_production_slip ON 
                    prakruti_production_slip.id = prakruti_production_slip_line.main_id 
            WHERE 
                    prakruti_production_slip.id = $1 AND 
                    prakruti_production_slip.inquiry_no = $2 AND 
                    prakruti_production_slip_line.main_id = $1
        ) AS b 
    WHERE 
            a.inquiry_line_id = b.inquiry_line_id AND 
            a.product_id = b.product_id;
            
    UPDATE 
            prakruti_sales_order AS a 
    SET 
            revise_remarks_update = revise_remarks_update ||e'\n' 
            || '--------------------------' ||e'\n' 
            || 'Revision Done in ' ||e'\n' 
            || 'Production Slip' ||e'\n' 
            || 'Remarks which was entered was ' ||e'\n' 
            || b.revise_remarks ||e'\n' 
            || 'Which was Revised By ' ||e'\n' 
            || b.revise_done_by 
    FROM( 
            SELECT 
                    res_partner.name AS revise_done_by,
                    prakruti_production_slip.revise_remarks,
                    prakruti_production_slip.inquiry_no 
            FROM 
                    prakruti_production_slip JOIN 
                    res_users ON 
                    prakruti_production_slip.revise_id = res_users.id JOIN 
                    res_partner ON 
                    res_users.partner_id = res_partner.id 
            WHERE 
                    prakruti_production_slip.id = $1 AND 
                    prakruti_production_slip.inquiry_no = $2
        ) AS b 
    WHERE 
            a.inquiry_no = b.inquiry_no AND 
            a.state != 'rejected' AND 
            a.inquiry_no = $2;
            

    UPDATE 
            prakruti_sales_order_item AS a 
    SET 
            scheduled_date = b.scheduled_date,
            scheduled_qty = b.scheduled_qty,
            total_scheduled_qty =b.scheduled_qty + total_scheduled_qty,
            product_id = b.product_id,
            quantity = b.quantity,
            description = b.description,
            uom_id = b.uom_id,
            specification_id = b.specification_id,
            remarks = b.remarks,
            unit_price = b.unit_price
    FROM( 
            SELECT
                    prakruti_production_slip_line.product_id,
                    prakruti_production_slip_line.scheduled_date,
                    prakruti_production_slip_line.scheduled_qty,
                    prakruti_production_slip_line.inquiry_line_id,
                    prakruti_production_slip_line.description,
                    prakruti_production_slip_line.unit_price,
                    prakruti_production_slip_line.uom_id,
                    prakruti_production_slip_line.specification_id,
                    prakruti_production_slip_line.remarks,
                    prakruti_production_slip_line.quantity
            FROM 
                    prakruti_production_slip_line JOIN 
                    prakruti_production_slip ON 
                    prakruti_production_slip.id = prakruti_production_slip_line.main_id 
            WHERE 
                    prakruti_production_slip.id = $1 AND 
                    prakruti_production_slip.inquiry_no = $2 AND 
                    prakruti_production_slip_line.main_id = $1
        ) AS b 
    WHERE 
            a.inquiry_line_id = b.inquiry_line_id AND 
            a.product_id = b.product_id;
            
    UPDATE prakruti_production_slip SET revise_id = NULL,revise_remarks = '' WHERE id = $1;

ELSE
    RETURN 'Record...Cannot Be Revised...Please Contact Your Administrator...!!!';
END IF;

	
RETURN qty;
                                
END;
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION public.revise_production_slip(integer,character varying)
  OWNER TO odoo;
  
  
  
  CREATE OR REPLACE FUNCTION public.revise_sales_inquiry(integer,character varying)
  RETURNS character varying AS
$BODY$
DECLARE 


line_id INTEGER;
qty INTEGER;

BEGIN


line_id = 0;
qty = 0;

SELECT 
	prakruti_sales_quotation_line.inquiry_line_id INTO line_id
FROM 
	prakruti_sales_quotation_line JOIN 
	prakruti_sales_quotation ON 
	prakruti_sales_quotation_line.main_id = prakruti_sales_quotation.id JOIN 
	prakruti_sales_inquiry ON 
	prakruti_sales_quotation.inquiry_no = prakruti_sales_inquiry.inquiry_no 
WHERE 
	prakruti_sales_quotation.state != 'rejected' AND
	prakruti_sales_inquiry.id = $1 AND
	prakruti_sales_quotation.inquiry_no = $2;
	
IF (line_id > 0) THEN
    UPDATE 
        prakruti_sales_inquiry 
    SET 
            revise_status = 'revise_done',
            revise_no = revise_no + 1,
            revise_remarks_update = revise_remarks_update ||e'\n' 
            || '--------------------------' ||e'\n' 
            || 'Revision Done in ' ||e'\n' 
            || 'Sales Inquiry' ||e'\n' 
            || 'Revision No ' ||e'\n' 
            || revise_no + 1 ||e'\n' 
            || 'Remarks which was entered was ' ||e'\n' 
            || revise_remarks ||e'\n' 
            || 'Which was Revised By ' ||e'\n' 
            || revise_done_by 
    FROM
        (
            SELECT 
                    res_partner.name AS revise_done_by 
            FROM 
                    prakruti_sales_inquiry JOIN 
                    res_users ON 
                    prakruti_sales_inquiry.revise_id = res_users.id JOIN 
                    res_partner ON 
                    res_users.partner_id = res_partner.id 
            WHERE 
                    prakruti_sales_inquiry.id = $1
        ) AS revise_done_person_name 
    WHERE 
            prakruti_sales_inquiry.id = $1;

    UPDATE 
            prakruti_sales_quotation AS a 
    SET 
            customer_id = b.customer_id,
            billing_id = b.billing_id,
            shipping_id = b. shipping_id,
            revise_remarks_update = revise_remarks_update ||e'\n' 
            || '--------------------------' ||e'\n' 
            || 'Revision Done in ' ||e'\n'
            || 'Sales Inquiry' ||e'\n'
            || 'Remarks which was entered was ' ||e'\n'
            || b.revise_remarks ||e'\n'
            || 'Which was Revised By ' ||e'\n' 
            || b.revise_done_by
    FROM(
            SELECT 
                    res_partner.name AS revise_done_by,
                    prakruti_sales_inquiry.revise_remarks,
                    prakruti_sales_inquiry.inquiry_no,
                    prakruti_sales_inquiry.customer_id,
                    prakruti_sales_inquiry.shipping_id,
                    prakruti_sales_inquiry.billing_id
            FROM 
                    prakruti_sales_inquiry JOIN 
                    res_users ON 
                    prakruti_sales_inquiry.revise_id = res_users.id JOIN 
                    res_partner ON 
                    res_users.partner_id = res_partner.id 
            WHERE 
                    prakruti_sales_inquiry.id = $1 AND 
                    prakruti_sales_inquiry.inquiry_no = $2
        ) AS b 
    WHERE 
            a.inquiry_no = b.inquiry_no AND 
            a.state != 'rejected' AND 
            a.inquiry_no = $2;

    UPDATE 
            prakruti_sales_quotation_line AS a 
    SET 
            quantity = b.quantity,
            product_id = b.product_id 
    FROM(
            SELECT 
                    prakruti_sales_inquiry_item.quantity,
                    prakruti_sales_inquiry_item.id,
                    prakruti_sales_inquiry_item.product_id 
            FROM 
                    prakruti_sales_inquiry_item JOIN 
                    prakruti_sales_inquiry ON 
                    prakruti_sales_inquiry.id = prakruti_sales_inquiry_item.main_id 
            WHERE 
                    prakruti_sales_inquiry.id = $1 AND 
                    prakruti_sales_inquiry.inquiry_no = $2 AND 
                    prakruti_sales_inquiry_item.main_id = $1
        ) AS b 
    WHERE 
            a.inquiry_line_id = b.id AND 
            a.product_id = b.product_id;	
            

    UPDATE 
            prakruti_sales_order AS a 
    SET 
            customer_id = b.customer_id,
            billing_id = b.billing_id,
            shipping_id = b. shipping_id,
            revise_remarks_update = revise_remarks_update ||e'\n' 
            || '--------------------------' ||e'\n' 
            || 'Revision Done in ' ||e'\n'
            || 'Sales Inquiry' ||e'\n'
            || 'Remarks which was entered was ' ||e'\n'
            || b.revise_remarks ||e'\n'
            || 'Which was Revised By ' ||e'\n' 
            || b.revise_done_by
    FROM(
            SELECT 
                    res_partner.name AS revise_done_by,
                    prakruti_sales_inquiry.revise_remarks,
                    prakruti_sales_inquiry.inquiry_no,
                    prakruti_sales_inquiry.customer_id,
                    prakruti_sales_inquiry.shipping_id,
                    prakruti_sales_inquiry.billing_id
            FROM 
                    prakruti_sales_inquiry JOIN 
                    res_users ON 
                    prakruti_sales_inquiry.revise_id = res_users.id JOIN 
                    res_partner ON 
                    res_users.partner_id = res_partner.id 
            WHERE 
                    prakruti_sales_inquiry.id = $1 AND 
                    prakruti_sales_inquiry.inquiry_no = $2
        ) AS b 
    WHERE 
            a.inquiry_no = b.inquiry_no AND 
            a.state != 'rejected' AND 
            a.inquiry_no = $2;
            
    UPDATE 
            prakruti_sales_order_item AS a 
    SET 
            quantity = b.quantity,
            product_id = b.product_id 
    FROM(
            SELECT 
                    prakruti_sales_inquiry_item.quantity,
                    prakruti_sales_inquiry_item.id,
                    prakruti_sales_inquiry_item.product_id 
            FROM 
                    prakruti_sales_inquiry_item JOIN 
                    prakruti_sales_inquiry ON 
                    prakruti_sales_inquiry.id = prakruti_sales_inquiry_item.main_id 
            WHERE 
                    prakruti_sales_inquiry.id = $1 AND 
                    prakruti_sales_inquiry.inquiry_no = $2 AND 
                    prakruti_sales_inquiry_item.main_id = $1
        ) AS b 
    WHERE 
            a.inquiry_line_id = b.id AND 
            a.product_id = b.product_id;
            
    UPDATE 
            prakruti_production_slip AS a 
    SET 
            revise_remarks_update = revise_remarks_update ||e'\n' 
            || '--------------------------' ||e'\n' 
            || 'Revision Done in ' ||e'\n'
            || 'Sales Inquiry' ||e'\n'
            || 'Remarks which was entered was ' ||e'\n'
            || b.revise_remarks ||e'\n'
            || 'Which was Revised By ' ||e'\n' 
            || b.revise_done_by,
            customer_id = b.customer_id
    FROM(
            SELECT 
                    res_partner.name AS revise_done_by,
                    prakruti_sales_inquiry.revise_remarks,
                    prakruti_sales_inquiry.inquiry_no,
                    prakruti_sales_inquiry.customer_id,
                    prakruti_sales_inquiry.shipping_id,
                    prakruti_sales_inquiry.billing_id
            FROM 
                    prakruti_sales_inquiry JOIN 
                    res_users ON 
                    prakruti_sales_inquiry.revise_id = res_users.id JOIN 
                    res_partner ON 
                    res_users.partner_id = res_partner.id 
            WHERE 
                    prakruti_sales_inquiry.id = $1 AND 
                    prakruti_sales_inquiry.inquiry_no = $2
        ) AS b 
    WHERE 
            a.inquiry_no = b.inquiry_no AND 
            a.state != 'rejected' AND 
            a.inquiry_no = $2;
            

    UPDATE 
            prakruti_production_slip_line AS a 
    SET 
            ordered_qty = b.quantity,
            product_id = b.product_id 
    FROM(
            SELECT 
                    prakruti_sales_inquiry_item.quantity,
                    prakruti_sales_inquiry_item.id,
                    prakruti_sales_inquiry_item.product_id 
            FROM 
                    prakruti_sales_inquiry_item JOIN 
                    prakruti_sales_inquiry ON 
                    prakruti_sales_inquiry.id = prakruti_sales_inquiry_item.main_id 
            WHERE 
                    prakruti_sales_inquiry.id = $1 AND 
                    prakruti_sales_inquiry.inquiry_no = $2 AND 
                    prakruti_sales_inquiry_item.main_id = $1
        ) AS b 
    WHERE 
            a.inquiry_line_id = b.id AND 
            a.product_id = b.product_id;
            
    UPDATE 
        prakruti_sales_inquiry 
    SET 
        revise_id = NULL,
        revise_remarks = ''
    WHERE 
        id = $1;
    
ELSE
    RETURN 'Record Cannot Be Revised';
END IF;

RETURN qty;
                                
END;
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION public.revise_sales_inquiry(integer,character varying)
  OWNER TO odoo;
  
  
  CREATE OR REPLACE FUNCTION public.revise_sales_order(integer,character varying)
  RETURNS character varying AS
$BODY$
DECLARE 
qty   integer;
line_id INTEGER;
BEGIN

qty = 0;
line_id = 0;

SELECT 
	prakruti_sales_order_item.inquiry_line_id INTO line_id
FROM 
	prakruti_sales_order_item JOIN
	prakruti_sales_order ON 
	prakruti_sales_order_item.main_id = prakruti_sales_order.id 
WHERE 
	prakruti_sales_order.state != 'rejected' AND 
	prakruti_sales_order_item.main_id = $1 AND 
	prakruti_sales_order.id =$1 AND 
	prakruti_sales_order.inquiry_no = $2;
	
IF (line_id > 0) THEN

    UPDATE 
            prakruti_sales_order 
    SET 
            revise_status = 'revise_done',
            revise_no = revise_no + 1,
            revise_remarks_update = revise_remarks_update ||e'\n' 
            || '--------------------------' ||e'\n' 
            || 'Revision Done in ' ||e'\n' 
            || 'Sales Order' ||e'\n' 
            || 'Revision No ' ||e'\n' 
            || revise_no + 1 ||e'\n' 
            || 'Remarks which was entered was ' ||e'\n' 
            || revise_remarks ||e'\n' 
            || 'Which was Revised By ' ||e'\n' 
            || revise_done_by 
    FROM
        ( 
            SELECT 
                    res_partner.name AS revise_done_by 
            FROM 
                    prakruti_sales_order JOIN 
                    res_users ON 
                    prakruti_sales_order.revise_id = res_users.id JOIN 
                    res_partner ON res_users.partner_id = res_partner.id 
            WHERE 
                    prakruti_sales_order.id =$1 
                    ) AS revise_done_person_name 
    WHERE 
            prakruti_sales_order.id = $1;

    UPDATE 
            prakruti_sales_inquiry AS a 
    SET     
            customer_id = b.customer_id,
            billing_id = b.billing_id,
            shipping_id = b. shipping_id,
            revise_remarks_update = revise_remarks_update ||e'\n' 
            || '--------------------------' ||e'\n' 
            || 'Revision Done in ' ||e'\n' 
            || 'Sales Order' ||e'\n' 
            || 'Remarks which was entered was ' ||e'\n' 
            || b.revise_remarks ||e'\n' 
            || 'Which was Revised By ' ||e'\n' 
            || b.revise_done_by 
    FROM( 
            SELECT 
                    res_partner.name AS revise_done_by,
                    prakruti_sales_order.revise_remarks,
                    prakruti_sales_order.billing_id,
                    prakruti_sales_order.shipping_id,
                    prakruti_sales_order.customer_id,
                    prakruti_sales_order.inquiry_no 
            FROM 
                    prakruti_sales_order JOIN 
                    res_users ON 
                    prakruti_sales_order.revise_id = res_users.id JOIN 
                    res_partner ON res_users.partner_id = res_partner.id 
            WHERE 
                    prakruti_sales_order.id = $1 AND 
                    prakruti_sales_order.inquiry_no = $2
        ) AS b 
    WHERE 
            a.inquiry_no = b.inquiry_no AND
            a.state != 'rejected' AND 
            a.inquiry_no = $2;

    UPDATE 
            prakruti_sales_inquiry_item AS a 
    SET 
            product_id = b.product_id,
            quantity = b.quantity,
            description= b.description,
            uom_id= b.uom_id,
            specification_id= b.specification_id,
            hsn_code=b.hsn_code,
            remarks=b.remarks 
    FROM( 
            SELECT 
                    prakruti_sales_order_item.product_id,
                    prakruti_sales_order_item.quantity,
                    prakruti_sales_order_item.inquiry_line_id,
                    prakruti_sales_order_item.description,
                    prakruti_sales_order_item.unit_price,
                    prakruti_sales_order_item.uom_id,
                    prakruti_sales_order_item.specification_id,
                    prakruti_sales_order_item.hsn_code,
                    prakruti_sales_order_item.remarks,
                    prakruti_sales_order_item.discount_id,
                    prakruti_sales_order_item.cgst_id,
                    prakruti_sales_order_item.sgst_id,
                    prakruti_sales_order_item.igst_id 
            FROM 
                    prakruti_sales_order_item JOIN 
                    prakruti_sales_order ON 
                    prakruti_sales_order.id = prakruti_sales_order_item.main_id 
            WHERE 
                    prakruti_sales_order.id = $1 AND 
                    prakruti_sales_order.inquiry_no = $2 AND 
                    prakruti_sales_order_item.main_id = $1
        ) AS b 
    WHERE 
            a.id = b.inquiry_line_id ;	
            

    UPDATE 
            prakruti_sales_quotation AS a 
    SET  
            customer_id = b.customer_id,
            billing_id = b.billing_id,
            shipping_id = b. shipping_id,
            revise_remarks_update = revise_remarks_update ||e'\n' 
            || '--------------------------' ||e'\n' 
            || 'Revision Done in ' ||e'\n' 
            || 'Sales Order' ||e'\n' 
            || 'Remarks which was entered was ' ||e'\n' 
            || b.revise_remarks ||e'\n' 
            || 'Which was Revised By ' ||e'\n' 
            || b.revise_done_by 
    FROM( 
            SELECT 
                    res_partner.name AS revise_done_by,
                    prakruti_sales_order.billing_id,
                    prakruti_sales_order.shipping_id,
                    prakruti_sales_order.customer_id,
                    prakruti_sales_order.revise_remarks,
                    prakruti_sales_order.inquiry_no 
            FROM 
                    prakruti_sales_order JOIN 
                    res_users ON 
                    prakruti_sales_order.revise_id = res_users.id JOIN 
                    res_partner ON 
                    res_users.partner_id = res_partner.id 
            WHERE
                    prakruti_sales_order.id = $1 AND 
                    prakruti_sales_order.inquiry_no = $2
        ) AS b 
    WHERE 
            a.inquiry_no = b.inquiry_no AND 
            a.state != 'rejected' AND 
            a.inquiry_no = $2;
            
    UPDATE 
            prakruti_sales_quotation_line AS a 
    SET 
            product_id = b.product_id,
            quantity = b.quantity,
            description = b.description,
            uom_id = b.uom_id,
            specification_id = b.specification_id,
            hsn_code=b.hsn_code,
            remarks = b.remarks,
            unit_price = b.unit_price,
            discount_id = b.discount_id,
            cgst_id = b.cgst_id,
            sgst_id = b.sgst_id,
            igst_id = b.igst_id
    FROM( 
            SELECT 
                    prakruti_sales_order_item.product_id,
                    prakruti_sales_order_item.quantity,
                    prakruti_sales_order_item.inquiry_line_id,
                    prakruti_sales_order_item.description,
                    prakruti_sales_order_item.unit_price,
                    prakruti_sales_order_item.uom_id,
                    prakruti_sales_order_item.specification_id,
                    prakruti_sales_order_item.hsn_code,
                    prakruti_sales_order_item.remarks,
                    prakruti_sales_order_item.discount_id,
                    prakruti_sales_order_item.cgst_id,
                    prakruti_sales_order_item.sgst_id,
                    prakruti_sales_order_item.igst_id
            FROM 
                    prakruti_sales_order_item JOIN 
                    prakruti_sales_order ON 
                    prakruti_sales_order.id = prakruti_sales_order_item.main_id 
            WHERE 
                    prakruti_sales_order.id = $1 AND 
                    prakruti_sales_order.inquiry_no = $2 AND
                    prakruti_sales_order_item.main_id = $1
                    ) AS b 
    WHERE 
            a.inquiry_line_id = b.inquiry_line_id ;
            
    UPDATE 
            prakruti_production_slip AS a 
    SET 	
            revise_remarks_update = revise_remarks_update ||e'\n' 
            || '--------------------------' ||e'\n' 
            || 'Revision Done in ' ||e'\n' 
            || 'Sales Order' ||e'\n' 
            || 'Remarks which was entered was ' ||e'\n' 
            || b.revise_remarks ||e'\n' 
            || 'Which was Revised By ' ||e'\n' 
            || b.revise_done_by 
    FROM( 
            SELECT 
                    res_partner.name AS revise_done_by,
                    prakruti_sales_order.revise_remarks,
                    prakruti_sales_order.inquiry_no 
            FROM 
                    prakruti_sales_order JOIN
                    res_users ON 
                    prakruti_sales_order.revise_id = res_users.id JOIN 
                    res_partner ON 
                    res_users.partner_id = res_partner.id 
            WHERE 
                    prakruti_sales_order.id = $1 AND 
                    prakruti_sales_order.inquiry_no = $2
        ) AS b 
    WHERE 
            a.inquiry_no = b.inquiry_no AND 
            a.state != 'rejected' AND 
            a.inquiry_no = $2;
            

    UPDATE 
            prakruti_production_slip_line AS a 
    SET 
            product_id = b.product_id,
            quantity = b.quantity,
            description = b.description,
            uom_id = b.uom_id,
            specification_id = b.specification_id,
            remarks = b.remarks,
            unit_price = b.unit_price,
            req_date = b.req_date,
            total_ordered_qty = b.quantity
    FROM( 
            SELECT 
                    prakruti_sales_order_item.product_id,
                    prakruti_sales_order_item.quantity,
                    prakruti_sales_order_item.inquiry_line_id,
                    prakruti_sales_order_item.description,
                    prakruti_sales_order_item.unit_price,
                    prakruti_sales_order_item.uom_id,
                    prakruti_sales_order_item.specification_id,
                    prakruti_sales_order_item.hsn_code,
                    prakruti_sales_order_item.remarks,
                    prakruti_sales_order_item.discount_id,
                    prakruti_sales_order_item.cgst_id,
                    prakruti_sales_order_item.sgst_id,
                    prakruti_sales_order_item.igst_id,
                    prakruti_sales_order_item.req_date
                    
            FROM 
                    prakruti_sales_order_item JOIN 
                    prakruti_sales_order ON 
                    prakruti_sales_order.id = prakruti_sales_order_item.main_id 
            WHERE 
                    prakruti_sales_order.id = $1 AND 
                    prakruti_sales_order.inquiry_no = $2 AND 
                    prakruti_sales_order_item.main_id = $1
        ) AS b 
    WHERE 
            a.inquiry_line_id = b.inquiry_line_id ;
            
    UPDATE 
        prakruti_sales_order 
    SET 
        revise_id = NULL,
        revise_remarks = '' 
    WHERE 
        id = $1;
        
ELSE
        RETURN 'Record Cannot be Revised';
END IF;

RETURN qty;
                                
END;
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION public.revise_sales_order(integer,character varying)
  OWNER TO odoo;
  
  
  
  CREATE OR REPLACE FUNCTION public.revise_sales_quotation(integer,character varying)
  RETURNS character varying AS
$BODY$
DECLARE 
qty   INTEGER;
line_id INTEGER;

BEGIN

qty = 0;
line_id = 0;



SELECT 
	prakruti_sales_quotation_line.inquiry_line_id INTO line_id
FROM 
        prakruti_sales_quotation_line
WHERE 
	prakruti_sales_quotation_line.main_id = $1;
	
	
IF (line_id > 0) THEN


    UPDATE 
            prakruti_sales_quotation 
    SET 
            revise_status = 'revise_done',
            revise_no = revise_no + 1,
            revise_remarks_update = revise_remarks_update ||e'\n' 
            || '--------------------------' ||e'\n' 
            || 'Revision Done in ' ||e'\n' 
            || 'Sales Quotation' ||e'\n' 
            || 'Revision No ' ||e'\n' 
            || revise_no + 1 ||e'\n' 
            || 'Remarks which was entered was ' ||e'\n' 
            || revise_remarks ||e'\n' 
            || 'Which was Revised By ' ||e'\n' 
            || revise_done_by 
    FROM( 
            SELECT 
                    res_partner.name AS revise_done_by 
            FROM 
                    prakruti_sales_quotation JOIN 
                    res_users ON 
                    prakruti_sales_quotation.revise_id = res_users.id JOIN 
                    res_partner ON 
                    res_users.partner_id = res_partner.id 
            WHERE 
                    prakruti_sales_quotation.id =$1 
        ) AS revise_done_person_name 
    WHERE 
            prakruti_sales_quotation.id = $1;

    UPDATE 
            prakruti_sales_inquiry AS a 
    SET  
            customer_id = b.customer_id,
            billing_id = b.billing_id,
            shipping_id = b. shipping_id,
            revise_remarks_update = revise_remarks_update ||e'\n' 
            || '--------------------------' ||e'\n' 
            || 'Revision Done in ' ||e'\n' 
            || 'Sales Quotation' ||e'\n' 
            || 'Remarks which was entered was ' ||e'\n' 
            || b.revise_remarks ||e'\n' 
            || 'Which was Revised By ' ||e'\n' 
            || b.revise_done_by 
    FROM( 
            SELECT 
                    res_partner.name AS revise_done_by,
                    prakruti_sales_quotation.customer_id,
                    prakruti_sales_quotation.billing_id,
                    prakruti_sales_quotation.shipping_id,
                    prakruti_sales_quotation.revise_remarks,
                    prakruti_sales_quotation.inquiry_no 
            FROM 
                    prakruti_sales_quotation JOIN 
                    res_users ON 
                    prakruti_sales_quotation.revise_id = res_users.id JOIN 
                    res_partner ON 
                    res_users.partner_id = res_partner.id 
            WHERE 
                    prakruti_sales_quotation.id = $1 AND 
                    prakruti_sales_quotation.inquiry_no = $2
        ) AS b 
    WHERE 
            a.inquiry_no = b.inquiry_no AND 
            a.state != 'rejected' AND 
            a.inquiry_no = $2;

    UPDATE 
            prakruti_sales_inquiry_item AS a 
    SET 
            product_id = b.product_id,
            quantity = b.quantity,
            description= b.description,
            uom_id= b.uom_id,
            specification_id= b.specification_id,
            hsn_code=b.hsn_code,
            remarks=b.remarks
    FROM( 
            SELECT  prakruti_sales_quotation_line.product_id,
                    prakruti_sales_quotation_line.inquiry_line_id,
                    prakruti_sales_quotation_line.quantity,
                    prakruti_sales_quotation_line.description,
                    prakruti_sales_quotation_line.uom_id,
                    prakruti_sales_quotation_line.specification_id,
                    prakruti_sales_quotation_line.hsn_code,
                    prakruti_sales_quotation_line.remarks
            FROM 
                    prakruti_sales_quotation_line JOIN 
                    prakruti_sales_quotation ON 
                    prakruti_sales_quotation.id = prakruti_sales_quotation_line.main_id 
            WHERE 
                    prakruti_sales_quotation.id =$1 AND 
                    prakruti_sales_quotation.inquiry_no = $2 AND 
                    prakruti_sales_quotation_line.main_id = $1
        ) AS b 
    WHERE 
            a.id = b.inquiry_line_id ;	
            

    UPDATE 
        prakruti_sales_quotation 
    SET 
        revise_id = NULL,
        revise_remarks = '' 
    WHERE 
        id = $1;
    
ELSE
    RETURN 'Record Cannot Be Revised';
END IF;
	
	
RETURN qty;
                                
END;
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION public.revise_sales_quotation(integer,character varying)
  OWNER TO odoo;
  
  
  
  CREATE OR REPLACE FUNCTION public.revise_purchase_requisition(integer,character varying)
  RETURNS character varying AS
$BODY$
DECLARE 
qty   integer;
line_id INTEGER;
BEGIN

qty = 0;
line_id = 0;
SELECT 
	requisition_line_id INTO line_id
FROM 
	prakruti_purchase_requisition_approve_line JOIN 
	prakruti_purchase_requisition_approve ON 
	prakruti_purchase_requisition_approve_line.order_id = prakruti_purchase_requisition_approve.id JOIN 
	prakruti_purchase_requisition ON 
	prakruti_purchase_requisition_approve.requisition_no = prakruti_purchase_requisition.requisition_no 
WHERE 
	prakruti_purchase_requisition_approve.state != 'rejected' AND 
	prakruti_purchase_requisition_approve.requisition_no = $2 AND 
	prakruti_purchase_requisition.id = $1;
	
IF line_id > 0 THEN

    --REQUISITION UPDATE

    UPDATE 
            prakruti_purchase_requisition 
    SET 
            revise_status = 'revise_done',
            revise_no = revise_no + 1,
            revise_remarks_update = revise_remarks_update ||e'\n' 
            || '--------------------------' ||e'\n' 
            || 'Revision Done in ' ||e'\n' 
            || 'Purchase Requisition' ||e'\n' 
            || 'Revision No ' ||e'\n' 
            || revise_no + 1 ||e'\n' 
            || 'Remarks which was entered was ' ||e'\n' 
            || revise_remarks ||e'\n' 
            || 'Which was Revised By ' ||e'\n' 
            || revise_done_by 
    FROM
        (
            SELECT 
                    res_partner.name AS revise_done_by 
            FROM 
                    prakruti_purchase_requisition JOIN 
                    res_users ON 
                    prakruti_purchase_requisition.revise_id = res_users.id JOIN 
                    res_partner ON 
                    res_users.partner_id = res_partner.id 
            WHERE 
                    prakruti_purchase_requisition.id = $1
        ) AS revise_done_person_name 
    WHERE 
            prakruti_purchase_requisition.id = $1;

    --REQUISITION APPROVE UPDATE

    UPDATE 
            prakruti_purchase_requisition_approve AS a 
    SET 
            revise_remarks_update = revise_remarks_update ||e'\n' 
            || '--------------------------' ||e'\n' 
            || 'Revision Done in ' ||e'\n'
            || 'Purchase Requisition' ||e'\n'
            || 'Remarks which was entered was ' ||e'\n'
            || b.revise_remarks ||e'\n'
            || 'Which was Revised By ' ||e'\n' 
            || b.revise_done_by 
    FROM(
            SELECT 
                    res_partner.name AS revise_done_by,
                    prakruti_purchase_requisition.revise_remarks,
                    prakruti_purchase_requisition.requisition_no 
            FROM 
                    prakruti_purchase_requisition JOIN 
                    res_users ON 
                    prakruti_purchase_requisition.revise_id = res_users.id JOIN 
                    res_partner ON 
                    res_users.partner_id = res_partner.id 
            WHERE 
                    prakruti_purchase_requisition.id = $1 AND 
                    prakruti_purchase_requisition.requisition_no = $2
        ) AS b 
    WHERE 
            a.requisition_no = b.requisition_no AND 
            a.state != 'rejected' AND 
            a.requisition_no = $2;

    --REQUISITION APPROVE GRID UPDATE

    UPDATE 
            prakruti_purchase_requisition_approve_line AS a 
    SET 
            required_date = b.required_date,
            quantity_req = b.quantity_req 
    FROM(
            SELECT 
                    prakruti_purchase_requisition_line.required_date,
                    prakruti_purchase_requisition_line.quantity_req,
                    prakruti_purchase_requisition_line.id,
                    prakruti_purchase_requisition_line.product_id 
            FROM 
                    prakruti_purchase_requisition_line JOIN 
                    prakruti_purchase_requisition ON 
                    prakruti_purchase_requisition.id = prakruti_purchase_requisition_line.order_id 
            WHERE 
                    prakruti_purchase_requisition.id = $1 AND 
                    prakruti_purchase_requisition.requisition_no = $2 AND 
                    prakruti_purchase_requisition_line.order_id = $1
        ) AS b 
    WHERE 
            a.requisition_line_id = b.id AND 
            a.product_id = b.product_id;	
            

    -- REQUISITION ANALYSIS SCREEN UPDATE

    UPDATE 
            prakruti_purchase_requistion_analysis AS a 
    SET 
            revise_remarks_update = revise_remarks_update ||e'\n' 
            || '--------------------------' ||e'\n' 
            || 'Revision Done in ' ||e'\n'
            || 'Purchase Requisition' ||e'\n'
            || 'Remarks which was entered was ' ||e'\n' 
            || b.revise_remarks ||e'\n'
            || 'Which was Revised By ' ||e'\n' 
            || b.revise_done_by 
    FROM(
            SELECT 
                    res_partner.name AS revise_done_by,
                    prakruti_purchase_requisition.revise_remarks,
                    prakruti_purchase_requisition.requisition_no 
            FROM 
                    prakruti_purchase_requisition JOIN 
                    res_users ON 
                    prakruti_purchase_requisition.revise_id = res_users.id JOIN 
                    res_partner ON 
                    res_users.partner_id = res_partner.id 
            WHERE 
                    prakruti_purchase_requisition.id = $1 AND 
                    prakruti_purchase_requisition.requisition_no = $2
        ) AS b 
    WHERE 
            a.request_no = b.requisition_no AND 
            a.state != 'rejected' AND 
            a.request_no = $2;
            
    -- REQUISITION ANALYSIS SCREEN GRID UPDATE

    UPDATE 
            prakruti_purchase_requistion_analysis_line AS a 
    SET 
            required_date = b.required_date 
    FROM(
            SELECT 
                    prakruti_purchase_requisition_line.required_date,
                    prakruti_purchase_requisition_line.id,
                    prakruti_purchase_requisition_line.product_id 
            FROM 
                    prakruti_purchase_requisition_line JOIN 
                    prakruti_purchase_requisition ON 
                    prakruti_purchase_requisition.id = prakruti_purchase_requisition_line.order_id 
            WHERE 
                    prakruti_purchase_requisition.id = $1 AND 
                    prakruti_purchase_requisition.requisition_no = $2 AND 
                    prakruti_purchase_requisition_line.order_id = $1
        ) AS b 
    WHERE 
            a.requisition_line_id = b.id AND 
            a.product_id = b.product_id;
            
    -- PRICE REQUEST SCREEN UPDATE
            
    UPDATE  
            prakruti_price_request AS a  
    SET  
            revise_remarks_update = revise_remarks_update  ||e'\n'  
            || '--------------------------' ||e'\n'  
            || 'Revision Done in ' ||e'\n' 
            || 'Purchase Requisition' ||e'\n' 
            || 'Remarks which was entered was ' ||e'\n'  
            || b.revise_remarks ||e'\n' 
            || 'Which was Revised By ' ||e'\n'  
            || b.revise_done_by  
    FROM( 
            SELECT  
                    res_partner.name AS revise_done_by, 
                    prakruti_purchase_requisition.revise_remarks, 
                    prakruti_purchase_requisition.requisition_no  
            FROM  
                    prakruti_purchase_requisition JOIN  
                    res_users ON  
                    prakruti_purchase_requisition.revise_id = res_users.id JOIN  
                    res_partner ON  
                    res_users.partner_id = res_partner.id  
            WHERE  
                    prakruti_purchase_requisition.id = $1 AND  
                    prakruti_purchase_requisition.requisition_no = $2 
        ) AS b  
    WHERE  
            a.request_no = b.requisition_no AND  
            a.state != 'rejected' AND  
            a.request_no = $2 AND
            a.coming_from = 'Requisition Analysis';
            

    -- PRICE REQUEST SCREEN GRID UPDATE
            
            
    UPDATE  
            prakruti_price_request_line AS a    
    SET  
            quantity_req = b.quantity_req, 
            required_date = b.required_date  
    FROM( 
            SELECT  
                    prakruti_purchase_requisition_line.quantity_req, 
                    prakruti_purchase_requisition_line.required_date, 
                    prakruti_purchase_requisition_line.id, 
                    prakruti_purchase_requisition_line.product_id 
            FROM 
                    prakruti_purchase_requisition_line JOIN 
                    prakruti_purchase_requisition ON 
                    prakruti_purchase_requisition.id = prakruti_purchase_requisition_line.order_id  
            WHERE 
                    prakruti_purchase_requisition.id = $1 AND  
                    prakruti_purchase_requisition.requisition_no = $2 AND  
                    prakruti_purchase_requisition_line.order_id =$1 
        ) AS b  
    WHERE  
            a.requisition_line_id = b.id AND  
            a.product_id = b.product_id;
            
    -- QUOTATION SCREEN UPDATE
            
            
    UPDATE  
            prakruti_purchase_order_quotation AS a  
    SET  
            revise_remarks_update = revise_remarks_update  ||e'\n'  
            || '--------------------------' ||e'\n'  
            || 'Revision Done in ' ||e'\n' 
            || 'Purchase Requisition' ||e'\n' 
            || 'Remarks which was entered was ' ||e'\n'  
            || b.revise_remarks ||e'\n' 
            || 'Which was Revised By ' ||e'\n'  
            || b.revise_done_by  
    FROM( 
            SELECT  
                    res_partner.name AS revise_done_by, 
                    prakruti_purchase_requisition.revise_remarks, 
                    prakruti_purchase_requisition.requisition_no  
            FROM  
                    prakruti_purchase_requisition JOIN  
                    res_users ON  
                    prakruti_purchase_requisition.revise_id = res_users.id JOIN  
                    res_partner ON  
                    res_users.partner_id = res_partner.id  
            WHERE  
                    prakruti_purchase_requisition.id = $1 AND  
                    prakruti_purchase_requisition.requisition_no = $2 
        ) AS b  
    WHERE  
            a.pr_no = b.requisition_no AND  
            a.state != 'rejected' AND  
            a.pr_no = $2 AND
            a.coming_from = 'Price Request';
            

    -- QUOTATION SCREEN GRID UPDATE
            
            
    UPDATE  
            prakruti_purchase_quotation_line AS a    
    SET  
            quantity = b.quantity_req, 
            required_date = b.required_date  
    FROM( 
            SELECT  
                    prakruti_purchase_requisition_line.quantity_req, 
                    prakruti_purchase_requisition_line.required_date, 
                    prakruti_purchase_requisition_line.id, 
                    prakruti_purchase_requisition_line.product_id 
            FROM 
                    prakruti_purchase_requisition_line JOIN 
                    prakruti_purchase_requisition ON 
                    prakruti_purchase_requisition.id = prakruti_purchase_requisition_line.order_id  
            WHERE 
                    prakruti_purchase_requisition.id = $1 AND  
                    prakruti_purchase_requisition.requisition_no = $2 AND  
                    prakruti_purchase_requisition_line.order_id =$1 
        ) AS b  
    WHERE  
            a.requisition_line_id = b.id AND  
            a.product_id = b.product_id;
            
    -- QUOTATION ANALYSIS SCREEN UPDATE
            

    UPDATE  
            prakruti_purchase_order_quotation_analysis AS a  
    SET  
            revise_remarks_update = revise_remarks_update  ||e'\n'  
            || '--------------------------' ||e'\n'  
            || 'Revision Done in ' ||e'\n' 
            || 'Purchase Requisition' ||e'\n' 
            || 'Remarks which was entered was ' ||e'\n'  
            || b.revise_remarks ||e'\n' 
            || 'Which was Revised By ' ||e'\n'  
            || b.revise_done_by  
    FROM( 
            SELECT  
                    res_partner.name AS revise_done_by, 
                    prakruti_purchase_requisition.revise_remarks, 
                    prakruti_purchase_requisition.requisition_no  
            FROM  
                    prakruti_purchase_requisition JOIN  
                    res_users ON  
                    prakruti_purchase_requisition.revise_id = res_users.id JOIN  
                    res_partner ON  
                    res_users.partner_id = res_partner.id  
            WHERE  
                    prakruti_purchase_requisition.id = $1 AND  
                    prakruti_purchase_requisition.requisition_no = $2 
        ) AS b  
    WHERE  
            a.pr_no = b.requisition_no AND  
            a.state != 'rejected' AND  
            a.pr_no = $2 AND
            a.coming_from = 'Purchase Quotation';
            
    -- QUOTATION ANALYSIS SCREEN GRID UPDATE
            
            
            
    UPDATE  
            prakruti_purchase_quotation_analysis_line AS a    
    SET  
            quantity = b.quantity_req, 
            required_date = b.required_date  
    FROM( 
            SELECT  
                    prakruti_purchase_requisition_line.quantity_req, 
                    prakruti_purchase_requisition_line.required_date, 
                    prakruti_purchase_requisition_line.id, 
                    prakruti_purchase_requisition_line.product_id 
            FROM 
                    prakruti_purchase_requisition_line JOIN 
                    prakruti_purchase_requisition ON 
                    prakruti_purchase_requisition.id = prakruti_purchase_requisition_line.order_id  
            WHERE 
                    prakruti_purchase_requisition.id = $1 AND  
                    prakruti_purchase_requisition.requisition_no = $2 AND  
                    prakruti_purchase_requisition_line.order_id =$1 
        ) AS b  
    WHERE  
            a.requisition_line_id = b.id AND  
            a.product_id = b.product_id;
            
    -- ORDER SCREEN UPDATE
            
            
            
    UPDATE  
            prakruti_purchase_order AS a  
    SET  
            revise_remarks_update = revise_remarks_update  ||e'\n'  
            || '--------------------------' ||e'\n'  
            || 'Revision Done in ' ||e'\n' 
            || 'Purchase Requisition' ||e'\n' 
            || 'Remarks which was entered was ' ||e'\n'  
            || b.revise_remarks ||e'\n' 
            || 'Which was Revised By ' ||e'\n'  
            || b.revise_done_by  
    FROM( 
            SELECT  
                    res_partner.name AS revise_done_by, 
                    prakruti_purchase_requisition.revise_remarks, 
                    prakruti_purchase_requisition.requisition_no  
            FROM  
                    prakruti_purchase_requisition JOIN  
                    res_users ON  
                    prakruti_purchase_requisition.revise_id = res_users.id JOIN  
                    res_partner ON  
                    res_users.partner_id = res_partner.id  
            WHERE  
                    prakruti_purchase_requisition.id = $1 AND  
                    prakruti_purchase_requisition.requisition_no = $2 
        ) AS b  
    WHERE  
            a.pr_no = b.requisition_no AND  
            a.state != 'rejected' AND  
            a.pr_no = $2;
            
            
    -- ORDER SCREEN GRID UPDATE
            
            

    UPDATE  
            prakruti_purchase_line AS a    
    SET  
            quantity = b.quantity_req, 
            required_date = b.required_date  
    FROM( 
            SELECT  
                    prakruti_purchase_requisition_line.quantity_req, 
                    prakruti_purchase_requisition_line.required_date, 
                    prakruti_purchase_requisition_line.id, 
                    prakruti_purchase_requisition_line.product_id 
            FROM 
                    prakruti_purchase_requisition_line JOIN 
                    prakruti_purchase_requisition ON 
                    prakruti_purchase_requisition.id = prakruti_purchase_requisition_line.order_id  
            WHERE 
                    prakruti_purchase_requisition.id = $1 AND  
                    prakruti_purchase_requisition.requisition_no = $2 AND  
                    prakruti_purchase_requisition_line.order_id =$1 
        ) AS b  
    WHERE  
            a.requisition_line_id = b.id AND  
            a.product_id = b.product_id;
    
    UPDATE prakruti_purchase_requisition SET revise_id = NULL,revise_remarks = '' WHERE id = $1;
	
ELSE
    RETURN 'Record Cannot Be Revised';
END IF;
	
	
RETURN qty;
                                
END;
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION public.revise_purchase_requisition(integer,character varying)
  OWNER TO odoo;
  
  
  
  
CREATE OR REPLACE FUNCTION public.revise_purchase_requisition_approve(integer,character varying)
  RETURNS character varying AS
$BODY$
DECLARE 
qty   integer;
line_id INTEGER;
BEGIN

qty = 0;
line_id = 0;


SELECT 
	requisition_line_id INTO line_id 
FROM 
	prakruti_purchase_requisition_approve_line 
WHERE 
	prakruti_purchase_requisition_approve_line.order_id = $1;
	
IF line_id > 0 THEN


    UPDATE 
            prakruti_purchase_requisition_approve 
    SET 
            revise_status = 'revise_done',
            revise_no = revise_no + 1,
            revise_remarks_update = revise_remarks_update ||e'\n' 
            || '--------------------------' ||e'\n' 
            || 'Revision Done in ' ||e'\n' 
            || 'Purchase Requisition Approval' ||e'\n' 
            || 'Revision No ' ||e'\n' 
            || revise_no + 1 ||e'\n' 
            || 'Remarks which was entered was ' ||e'\n' 
            || revise_remarks ||e'\n' 
            || 'Which was Revised By ' ||e'\n' 
            || revise_done_by 
    FROM(
            SELECT 
                    res_partner.name AS revise_done_by 
            FROM 
                    prakruti_purchase_requisition_approve JOIN 
                    res_users ON 
                    prakruti_purchase_requisition_approve.revise_id = res_users.id JOIN 
                    res_partner ON 
                    res_users.partner_id = res_partner.id 
            WHERE 
                    prakruti_purchase_requisition_approve.id = $1
        ) AS revise_done_person_name 
    WHERE 
            prakruti_purchase_requisition_approve.id = $1;

    UPDATE 
            prakruti_purchase_requisition AS a 
    SET 
            revise_remarks_update = revise_remarks_update ||e'\n' 
            || '--------------------------' ||e'\n' 
            || 'Revision Done in ' ||e'\n'
            || 'Purchase Requisition Approval' ||e'\n'
            || 'Remarks which was entered was ' ||e'\n' 
            || b.revise_remarks ||e'\n'
            || 'Which was Revised By ' ||e'\n' 
            || b.revise_done_by 
    FROM(
            SELECT 
                    res_partner.name AS revise_done_by,
                    prakruti_purchase_requisition_approve.revise_remarks,
                    prakruti_purchase_requisition_approve.requisition_no 
            FROM 
                    prakruti_purchase_requisition_approve JOIN 
                    res_users ON 
                    prakruti_purchase_requisition_approve.revise_id = res_users.id JOIN 
                    res_partner ON 
                    res_users.partner_id = res_partner.id 
            WHERE 
                    prakruti_purchase_requisition_approve.id = $1 AND 
                    prakruti_purchase_requisition_approve.requisition_no = $2
        ) AS b 
    WHERE 
            a.requisition_no = b.requisition_no AND 
            a.state != 'rejected' AND 
            a.requisition_no = $2;

    UPDATE 
            prakruti_purchase_requisition_line AS a 
    SET 
            product_id = b.product_id,
            description = b.description,
            quantity_req = b.quantity,
            suggested_packing_size = b.suggested_packing_size,
            required_date = b.required_date,
            remarks = b.remarks,
            stock_on_pr_date_ref = b.stock_on_pr_date_ref,
            hsn_code = b.hsn_code
    FROM(
            SELECT 
                    prakruti_purchase_requisition_approve_line.quantity_req,
                    prakruti_purchase_requisition_approve_line.requisition_line_id,
                    prakruti_purchase_requisition_approve_line.product_id,
                    prakruti_purchase_requisition_approve_line.description,
                    prakruti_purchase_requisition_approve_line.uom_id,
                    prakruti_purchase_requisition_approve_line.quantity, 
                    prakruti_purchase_requisition_approve_line.suggested_packing_size, 
                    prakruti_purchase_requisition_approve_line.required_date,  
                    prakruti_purchase_requisition_approve_line.current_date,  
                    prakruti_purchase_requisition_approve_line.remarks,  
                    prakruti_purchase_requisition_approve_line.stock_on_pr_date_ref,
                    prakruti_purchase_requisition_approve_line.last_purchase_date, 
                    prakruti_purchase_requisition_approve_line.specification_id, 
                    prakruti_purchase_requisition_approve_line.last_purchase_vendor_id, 
                    prakruti_purchase_requisition_approve_line.last_price, 
                    prakruti_purchase_requisition_approve_line.hsn_code
            FROM 
                    prakruti_purchase_requisition_approve_line JOIN 
                    prakruti_purchase_requisition_approve ON 
                    prakruti_purchase_requisition_approve.id = prakruti_purchase_requisition_approve_line.order_id 
            WHERE 
                    prakruti_purchase_requisition_approve.id = $1 AND 
                    prakruti_purchase_requisition_approve.requisition_no = $2 AND 
                    prakruti_purchase_requisition_approve_line.order_id = $1
        ) AS b 
    WHERE 
            a.id = b.requisition_line_id ;	
            

            
    UPDATE prakruti_purchase_requisition_approve SET revise_id = NULL,revise_remarks = '' WHERE id = $1;
    
ELSE
    RETURN 'Record Cannot Be Revised';
END IF;
    
	
	
	
	
	
RETURN qty;
                                
END;
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION public.revise_purchase_requisition_approve(integer,character varying)
  OWNER TO odoo;
  
  
  
  
  
  
  
CREATE OR REPLACE FUNCTION public.revise_purchase_requisition_analysis(integer,character varying)
  RETURNS character varying AS
$BODY$
DECLARE 

qty   integer;
line_id INTEGER;

BEGIN

qty = 0;
line_id = 0;

SELECT 
	requisition_line_id INTO line_id 
FROM 
	prakruti_purchase_requistion_analysis_line 
WHERE 
	prakruti_purchase_requistion_analysis_line.requistion_line_id = $1;
	
IF line_id >0 THEN

    UPDATE 
            prakruti_purchase_requistion_analysis 
    SET 
            revise_status = 'revise_done',
            revise_no = revise_no + 1,
            revise_remarks_update = revise_remarks_update ||e'\n' 
            || '--------------------------' ||e'\n' 
            || 'Revision Done in ' ||e'\n' 
            || 'Purchase Requisition Analysis' ||e'\n' 
            || 'Revision No ' ||e'\n' 
            || revise_no + 1 ||e'\n' 
            || 'Remarks which was entered was ' ||e'\n' 
            || revise_remarks ||e'\n' 
            || 'Which was Revised By ' ||e'\n' 
            || revise_done_by 
    FROM(
            SELECT 
                    res_partner.name AS revise_done_by 
            FROM 
                    prakruti_purchase_requistion_analysis JOIN 
                    res_users ON 
                    prakruti_purchase_requistion_analysis.revise_id = res_users.id JOIN 
                    res_partner ON 
                    res_users.partner_id = res_partner.id 
            WHERE 
                    prakruti_purchase_requistion_analysis.id = $1
        ) AS revise_done_person_name 
    WHERE 
            prakruti_purchase_requistion_analysis.id = $1;

    UPDATE 
            prakruti_purchase_requisition AS a 
    SET 
            revise_remarks_update = revise_remarks_update ||e'\n' 
            || '--------------------------' ||e'\n' 
            || 'Revision Done in ' ||e'\n'
            || 'Purchase Requisition Analysis' ||e'\n'
            || 'Remarks which was entered was ' ||e'\n' 
            || b.revise_remarks ||e'\n'
            || 'Which was Revised By ' ||e'\n' 
            || b.revise_done_by 
    FROM(
            SELECT 
                    res_partner.name AS revise_done_by,
                    prakruti_purchase_requistion_analysis.revise_remarks,
                    prakruti_purchase_requistion_analysis.request_no 
            FROM 
                    prakruti_purchase_requistion_analysis JOIN 
                    res_users ON 
                    prakruti_purchase_requistion_analysis.revise_id = res_users.id JOIN 
                    res_partner ON 
                    res_users.partner_id = res_partner.id 
            WHERE 
                    prakruti_purchase_requistion_analysis.id = $1 AND 
                    prakruti_purchase_requistion_analysis.request_no = $2
        ) AS b 
    WHERE 
            a.requisition_no = b.request_no AND 
            a.state != 'rejected' AND 
            a.requisition_no = $2;

    UPDATE 
            prakruti_purchase_requisition_line AS a 
    SET 
            quantity_req = b.quantity_req,
            product_id = b.product_id,
            required_date = b.required_date,
            remarks = b.remarks,
            last_price = b.last_price,
            hsn_code = b.hsn_code,
            uom_id = b. uom_id,
            description = b.description
    FROM(
            SELECT 
                    prakruti_purchase_requistion_analysis_line.quantity_req,
                    prakruti_purchase_requistion_analysis_line.requisition_line_id,
                    prakruti_purchase_requistion_analysis_line.product_id,
                    prakruti_purchase_requistion_analysis_line.description,
                    prakruti_purchase_requistion_analysis_line.uom_id,
                    prakruti_purchase_requistion_analysis_line.required_date,
                    prakruti_purchase_requistion_analysis_line.remarks,
                    prakruti_purchase_requistion_analysis_line.last_price,
                    prakruti_purchase_requistion_analysis_line.hsn_code,
                    prakruti_purchase_requistion_analysis_line.status
            FROM 
                    prakruti_purchase_requistion_analysis_line JOIN 
                    prakruti_purchase_requistion_analysis ON 
                    prakruti_purchase_requistion_analysis.id = prakruti_purchase_requistion_analysis_line.requistion_line_id 
            WHERE 
                    prakruti_purchase_requistion_analysis.id = $1 AND 
                    prakruti_purchase_requistion_analysis.request_no = $2 AND 
                    prakruti_purchase_requistion_analysis_line.requistion_line_id = $1
        ) AS b 
    WHERE 
            a.id = b.requisition_line_id;	
            

    UPDATE 
            prakruti_purchase_requisition_approve AS a 
    SET 
            revise_remarks_update = revise_remarks_update ||e'\n' 
            || '--------------------------' ||e'\n' 
            || 'Revision Done in ' ||e'\n'
            || 'Purchase Requisition Analysis' ||e'\n'
            || 'Remarks which was entered was ' ||e'\n' 
            || b.revise_remarks ||e'\n'
            || 'Which was Revised By ' ||e'\n' 
            || b.revise_done_by 
    FROM(
            SELECT 
                    res_partner.name AS revise_done_by,
                    prakruti_purchase_requistion_analysis.revise_remarks,
                    prakruti_purchase_requistion_analysis.request_no 
            FROM 
                    prakruti_purchase_requistion_analysis JOIN 
                    res_users ON 
                    prakruti_purchase_requistion_analysis.revise_id = res_users.id JOIN 
                    res_partner ON 
                    res_users.partner_id = res_partner.id 
            WHERE 
                    prakruti_purchase_requistion_analysis.id = $1 AND 
                    prakruti_purchase_requistion_analysis.request_no = $2
        ) AS b 
    WHERE 
            a.requisition_no = b.request_no AND 
            a.state != 'rejected' AND 
            a.requisition_no = $2;
            
    UPDATE 
            prakruti_purchase_requisition_approve_line AS a 
    SET     
            quantity_req = b.quantity_req,
            product_id = b.product_id,
            required_date = b.required_date,
            remarks = b.remarks,
            last_price = b.last_price,
            status = b.status,
            quantity = b.quantity_req,
            hsn_code = b.hsn_code,
            uom_id = b. uom_id,
            description = b.description
    FROM(
            SELECT 
                    prakruti_purchase_requistion_analysis_line.quantity_req,
                    prakruti_purchase_requistion_analysis_line.requisition_line_id,
                    prakruti_purchase_requistion_analysis_line.product_id,
                    prakruti_purchase_requistion_analysis_line.description,
                    prakruti_purchase_requistion_analysis_line.uom_id,
                    prakruti_purchase_requistion_analysis_line.required_date,
                    prakruti_purchase_requistion_analysis_line.remarks,
                    prakruti_purchase_requistion_analysis_line.last_price,
                    prakruti_purchase_requistion_analysis_line.hsn_code,
                    prakruti_purchase_requistion_analysis_line.status
            FROM 
                    prakruti_purchase_requistion_analysis_line JOIN 
                    prakruti_purchase_requistion_analysis ON 
                    prakruti_purchase_requistion_analysis.id = prakruti_purchase_requistion_analysis_line.requistion_line_id 
            WHERE 
                    prakruti_purchase_requistion_analysis.id = $1 AND 
                    prakruti_purchase_requistion_analysis.request_no = $2 AND 
                    prakruti_purchase_requistion_analysis_line.requistion_line_id = $1
        ) AS b 
    WHERE 
            a.requisition_line_id = b.requisition_line_id ;
            
	
    UPDATE prakruti_purchase_requistion_analysis SET revise_id = NULL,revise_remarks = '' WHERE id = $1;
    
ELSE
    RETURN 'Record Cannot Be Revised';
END IF;
    	
	
	
	
RETURN qty;
                                
END;
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION public.revise_purchase_requisition_analysis(integer,character varying)
  OWNER TO odoo;
  
  
  
CREATE OR REPLACE FUNCTION public.revise_purchase_price_request(integer,character varying)
  RETURNS character varying AS
$BODY$
DECLARE 
qty   integer;
line_id INTEGER;
BEGIN

qty = 0;
line_id = 0;

SELECT 
	requisition_line_id INTO line_id 
FROM 
	prakruti_price_request_line 
WHERE 
	prakruti_price_request_line.request_line_id = $1;

IF line_id >0 THEN

    UPDATE 	
            prakruti_price_request 
    SET 
            revise_status = 'revise_done',
            revise_no = revise_no + 1,
            revise_remarks_update = revise_remarks_update ||e'\n' 
            || '--------------------------' ||e'\n' 
            || 'Revision Done in ' ||e'\n' 
            || 'Purchase Price Request' ||e'\n' 
            || 'Revision No ' ||e'\n' 
            || revise_no + 1 ||e'\n' 
            || 'Remarks which was entered was ' ||e'\n' 
            || revise_remarks ||e'\n' 
            || 'Which was Revised By ' ||e'\n' 
            || revise_done_by 
    FROM(
            SELECT 
                    res_partner.name AS revise_done_by 
            FROM 
                    prakruti_price_request JOIN 
                    res_users ON 
                    prakruti_price_request.revise_id = res_users.id JOIN 
                    res_partner ON 
                    res_users.partner_id = res_partner.id 
            WHERE 
                    prakruti_price_request.id = $1
        ) AS revise_done_person_name 
    WHERE 
            prakruti_price_request.id = $1;

    UPDATE 
            prakruti_purchase_requisition_approve AS a 
    SET 
            revise_remarks_update = revise_remarks_update ||e'\n' 
            || '--------------------------' ||e'\n' 
            || 'Revision Done in ' ||e'\n'
            || 'Purchase Price Request' ||e'\n'
            || 'Remarks which was entered was ' ||e'\n' 
            || b.revise_remarks ||e'\n'
            || 'Which was Revised By ' ||e'\n' 
            || b.revise_done_by 
    FROM(
            SELECT 
                    res_partner.name AS revise_done_by,
                    prakruti_price_request.revise_remarks,
                    prakruti_price_request.request_no 
            FROM 
                    prakruti_price_request JOIN 
                    res_users ON 
                    prakruti_price_request.revise_id = res_users.id JOIN 
                    res_partner ON 
                    res_users.partner_id = res_partner.id 
            WHERE 
                    prakruti_price_request.id = $1 AND 
                    prakruti_price_request.request_no = $2
        ) AS b 
    WHERE 
            a.requisition_no = b.request_no AND 
            a.state != 'rejected' AND 
            a.requisition_no = $2;

    UPDATE 
            prakruti_purchase_requisition_approve_line AS a 
    SET 
            quantity = b.quantity_req,
            quantity_req = b.quantity_req ,
            product_id = b.product_id,
            description = b.description,
            uom_id = b.uom_id,
            required_date = b.required_date,
            remarks = b.remarks,
            hsn_code = b.hsn_code
    FROM(
            SELECT 
                    prakruti_price_request_line.quantity_req,
                    prakruti_price_request_line.requisition_line_id,
                    prakruti_price_request_line.product_id, 
                    prakruti_price_request_line.description, 
                    prakruti_price_request_line.uom_id, 
                    prakruti_price_request_line.required_date, 
                    prakruti_price_request_line.remarks, 
                    prakruti_price_request_line.hsn_code 
            FROM 
                    prakruti_price_request_line JOIN 
                    prakruti_price_request ON 
                    prakruti_price_request.id = prakruti_price_request_line.request_line_id 
            WHERE 
                    prakruti_price_request.id = $1 AND 
                    prakruti_price_request.request_no = $2 AND 
                    prakruti_price_request_line.request_line_id = $1
        ) AS b 
    WHERE 
            a.requisition_line_id = b.requisition_line_id ;	
            

    UPDATE 
            prakruti_purchase_requisition AS a 
    SET 
            revise_remarks_update = revise_remarks_update ||e'\n' 
            || '--------------------------' ||e'\n' 
            || 'Revision Done in ' ||e'\n'
            || 'Purchase Price Request' ||e'\n'
            || 'Remarks which was entered was ' ||e'\n' 
            || b.revise_remarks ||e'\n'
            || 'Which was Revised By ' ||e'\n' 
            || b.revise_done_by 
    FROM(
            SELECT 
                    res_partner.name AS revise_done_by,
                    prakruti_price_request.revise_remarks,
                    prakruti_price_request.request_no 
            FROM 
                    prakruti_price_request JOIN 
                    res_users ON 
                    prakruti_price_request.revise_id = res_users.id JOIN 
                    res_partner ON 
                    res_users.partner_id = res_partner.id 
            WHERE 
                    prakruti_price_request.id = $1 AND 
                    prakruti_price_request.request_no = $2
        ) AS b 
    WHERE 
            a.requisition_no = b.request_no AND 
            a.state != 'rejected' AND 
            a.requisition_no = $2;
            
    UPDATE 
            prakruti_purchase_requisition_line AS a 
    SET 
            quantity_req = b.quantity_req,
            product_id = b.product_id,
            description = b.description,
            uom_id = b.uom_id,
            required_date = b.required_date,
            remarks = b.remarks,
            hsn_code = b.hsn_code 
    FROM(
            SELECT 
                    prakruti_price_request_line.quantity_req, 
                    prakruti_price_request_line.requisition_line_id,
                    prakruti_price_request_line.product_id,
                    prakruti_price_request_line.description, 
                    prakruti_price_request_line.uom_id, 
                    prakruti_price_request_line.required_date, 
                    prakruti_price_request_line.remarks, 
                    prakruti_price_request_line.hsn_code 
            FROM 
                    prakruti_price_request_line JOIN 
                    prakruti_price_request ON 
                    prakruti_price_request.id = prakruti_price_request_line.request_line_id 
            WHERE 
                    prakruti_price_request.id = $1 AND 
                    prakruti_price_request.request_no = $2 AND 
                    prakruti_price_request_line.request_line_id = $1
        ) AS b 
    WHERE 
            a.id = b.requisition_line_id ;
            
    UPDATE 
            prakruti_purchase_requistion_analysis AS a 
    SET 
            revise_remarks_update = revise_remarks_update ||e'\n' 
            || '--------------------------' ||e'\n' 
            || 'Revision Done in ' ||e'\n'
            || 'Purchase Price Request' ||e'\n'
            || 'Remarks which was entered was ' ||e'\n' 
            || b.revise_remarks ||e'\n'
            || 'Which was Revised By ' ||e'\n' 
            || b.revise_done_by 
    FROM(
            SELECT 
                    res_partner.name AS revise_done_by,
                    prakruti_price_request.revise_remarks,
                    prakruti_price_request.request_no 
            FROM 
                    prakruti_price_request JOIN 
                    res_users ON 
                    prakruti_price_request.revise_id = res_users.id JOIN 
                    res_partner ON 
                    res_users.partner_id = res_partner.id 
            WHERE 
                    prakruti_price_request.id = $1 AND 
                    prakruti_price_request.request_no = $2 AND 
                    prakruti_price_request.coming_from = 'Requisition Analysis'
        ) AS b 
    WHERE 
            a.request_no = b.request_no AND 
            a.state != 'rejected' AND 
            a.request_no = $2;
            

    UPDATE 
            prakruti_purchase_requistion_analysis_line AS a 
    SET 
            quantity_req = b.quantity_req,
            vendor_id = b.vendor_id,
            product_id = b.product_id,
            description = b.description,
            uom_id = b.uom_id,
            required_date = b.required_date,
            remarks = b.remarks,
            hsn_code = b.hsn_code
    FROM(
            SELECT 
                    prakruti_price_request_line.quantity_req,
                    prakruti_price_request_line.requisition_line_id,
                    prakruti_price_request_line.product_id,
                    prakruti_vendor_list_line.vendor_id ,
                    prakruti_price_request_line.description, 
                    prakruti_price_request_line.uom_id, 
                    prakruti_price_request_line.required_date, 
                    prakruti_price_request_line.remarks, 
                    prakruti_price_request_line.hsn_code
            FROM 
                    prakruti_price_request_line JOIN 
                    prakruti_price_request ON 
                    prakruti_price_request.id = prakruti_price_request_line.request_line_id JOIN
                    prakruti_vendor_list_line ON 
                    prakruti_vendor_list_line.vendor_line_id = prakruti_price_request.id
            WHERE 
                    prakruti_price_request.id = $1 AND 
                    prakruti_price_request.request_no = $2 AND 
                    prakruti_price_request_line.request_line_id = $1
        ) AS b 
    WHERE 
            a.requisition_line_id = b.requisition_line_id  AND a.send_to = 'Price Request';
            

    UPDATE prakruti_price_request SET revise_id = NULL,revise_remarks = '' WHERE id = $1;

ELSE
    RETURN 'Record Cannot Be Revised';
END IF;
	
	
	
	
	
RETURN qty;
                                
END;
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION public.revise_purchase_price_request(integer,character varying)
  OWNER TO odoo;  
  
  
  
CREATE OR REPLACE FUNCTION public.revise_purchase_quotation(integer,character varying)
  RETURNS character varying AS
$BODY$
DECLARE qty   integer;
line_id INTEGER;

BEGIN

qty = 0;
line_id = 0;

SELECT 
	requisition_line_id AS line_id INTO line_id
FROM 
	prakruti_purchase_quotation_line JOIN 
	prakruti_purchase_order_quotation ON 
	prakruti_purchase_quotation_line.purchase_line_id = prakruti_purchase_order_quotation.id 
WHERE 
	prakruti_purchase_order_quotation.id = $1;

IF line_id >0 THEN

    UPDATE 	
            prakruti_purchase_order_quotation 
    SET 
            revise_status = 'revise_done',
            revise_no = revise_no + 1,
            revise_remarks_update = revise_remarks_update ||e'\n' 
            || '--------------------------' ||e'\n' 
            || 'Revision Done in ' ||e'\n' 
            || 'Purchase Quotation' ||e'\n' 
            || 'Revision No ' ||e'\n' 
            || revise_no + 1 ||e'\n' 
            || 'Remarks which was entered was ' ||e'\n' 
            || revise_remarks ||e'\n' 
            || 'Which was Revised By ' ||e'\n' 
            || revise_done_by 
    FROM(
            SELECT 
                    res_partner.name AS revise_done_by 
            FROM 
                    prakruti_purchase_order_quotation JOIN 
                    res_users ON 
                    prakruti_purchase_order_quotation.revise_id = res_users.id JOIN 
                    res_partner ON 
                    res_users.partner_id = res_partner.id 
            WHERE 
                    prakruti_purchase_order_quotation.id = $1
        ) AS revise_done_person_name 
    WHERE 
            prakruti_purchase_order_quotation.id = $1;

    UPDATE 
            prakruti_purchase_requisition_approve AS a 
    SET 
            revise_remarks_update = revise_remarks_update ||e'\n' 
            || '--------------------------' ||e'\n' 
            || 'Revision Done in ' ||e'\n'
            || 'Purchase Quotation' ||e'\n'
            || 'Remarks which was entered was ' ||e'\n' 
            || b.revise_remarks ||e'\n'
            || 'Which was Revised By ' ||e'\n' 
            || b.revise_done_by 
    FROM(
            SELECT 
                    res_partner.name AS revise_done_by,
                    prakruti_purchase_order_quotation.revise_remarks,
                    prakruti_purchase_order_quotation.pr_no 
            FROM 
                    prakruti_purchase_order_quotation JOIN 
                    res_users ON 
                    prakruti_purchase_order_quotation.revise_id = res_users.id JOIN 
                    res_partner ON 
                    res_users.partner_id = res_partner.id 
            WHERE 
                    prakruti_purchase_order_quotation.id = $1 AND 
                    prakruti_purchase_order_quotation.pr_no = $2
        ) AS b 
    WHERE 
            a.requisition_no = b.pr_no AND 
            a.state != 'rejected' AND 
            a.requisition_no = $2;

    UPDATE 
            prakruti_purchase_requisition_approve_line AS a 
    SET 
            quantity = b.quantity,
            quantity_req = b.quantity,
            product_id = b.product_id,
            description = b.description,
            required_date = b.required_date,
            uom_id = b.uom_id,
            hsn_code = b.hsn_code
    FROM(
            SELECT 
                    prakruti_purchase_quotation_line.quantity,
                    prakruti_purchase_quotation_line.requisition_line_id,
                    prakruti_purchase_quotation_line.product_id,
                    prakruti_purchase_quotation_line.description,
                    prakruti_purchase_quotation_line.required_date,
                    prakruti_purchase_quotation_line.uom_id,
                    prakruti_purchase_quotation_line.hsn_code
            FROM 
                    prakruti_purchase_quotation_line JOIN 
                    prakruti_purchase_order_quotation ON 
                    prakruti_purchase_order_quotation.id = prakruti_purchase_quotation_line.purchase_line_id 
            WHERE 
                    prakruti_purchase_order_quotation.id = $1 AND 
                    prakruti_purchase_order_quotation.pr_no = $2 AND 
                    prakruti_purchase_quotation_line.purchase_line_id = $1
        ) AS b 
    WHERE 
            a.requisition_line_id = b.requisition_line_id ;	
            

    UPDATE 
            prakruti_purchase_requisition AS a 
    SET 
            revise_remarks_update = revise_remarks_update ||e'\n' 
            || '--------------------------' ||e'\n' 
            || 'Revision Done in ' ||e'\n'
            || 'Purchase Quotation' ||e'\n'
            || 'Remarks which was entered was ' ||e'\n' 
            || b.revise_remarks ||e'\n'
            || 'Which was Revised By ' ||e'\n' 
            || b.revise_done_by 
    FROM(
            SELECT 
                    res_partner.name AS revise_done_by,
                    prakruti_purchase_order_quotation.revise_remarks,
                    prakruti_purchase_order_quotation.pr_no 
            FROM 
                    prakruti_purchase_order_quotation JOIN 
                    res_users ON 
                    prakruti_purchase_order_quotation.revise_id = res_users.id JOIN 
                    res_partner ON 
                    res_users.partner_id = res_partner.id 
            WHERE 
                    prakruti_purchase_order_quotation.id = $1 AND 
                    prakruti_purchase_order_quotation.pr_no = $2
        ) AS b 
    WHERE 
            a.requisition_no = b.pr_no AND 
            a.state != 'rejected' AND 
            a.requisition_no = $2;
            
    UPDATE 
            prakruti_purchase_requisition_line AS a 
    SET 
            quantity_req = b.quantity,
            product_id = b.product_id,
            description = b.description,
            required_date = b.required_date,
            uom_id = b.uom_id,
            hsn_code = b.hsn_code 
    FROM(
            SELECT 
                    prakruti_purchase_quotation_line.quantity, 
                    prakruti_purchase_quotation_line.requisition_line_id,
                    prakruti_purchase_quotation_line.product_id,
                    prakruti_purchase_quotation_line.description,
                    prakruti_purchase_quotation_line.required_date,
                    prakruti_purchase_quotation_line.uom_id,
                    prakruti_purchase_quotation_line.hsn_code 
            FROM 
                    prakruti_purchase_quotation_line JOIN 
                    prakruti_purchase_order_quotation ON 
                    prakruti_purchase_order_quotation.id = prakruti_purchase_quotation_line.purchase_line_id 
            WHERE 
                    prakruti_purchase_order_quotation.id = $1 AND 
                    prakruti_purchase_order_quotation.pr_no = $2 AND 
                    prakruti_purchase_quotation_line.purchase_line_id = $1
        ) AS b 
    WHERE 
            a.id = b.requisition_line_id ;
            
    UPDATE 
            prakruti_purchase_requistion_analysis AS a 
    SET 
            revise_remarks_update = revise_remarks_update ||e'\n' 
            || '--------------------------' ||e'\n' 
            || 'Revision Done in ' ||e'\n'
            || 'Purchase Quotation' ||e'\n'
            || 'Remarks which was entered was ' ||e'\n' 
            || b.revise_remarks ||e'\n'
            || 'Which was Revised By ' ||e'\n' 
            || b.revise_done_by 
    FROM(
            SELECT 
                    res_partner.name AS revise_done_by,
                    prakruti_purchase_order_quotation.revise_remarks,
                    prakruti_purchase_order_quotation.pr_no 
            FROM 
                    prakruti_purchase_order_quotation JOIN 
                    res_users ON 
                    prakruti_purchase_order_quotation.revise_id = res_users.id JOIN 
                    res_partner ON 
                    res_users.partner_id = res_partner.id 
            WHERE 
                    prakruti_purchase_order_quotation.id = $1 AND 
                    prakruti_purchase_order_quotation.pr_no = $2 
        ) AS b 
    WHERE 
            a.request_no = b.pr_no AND 
            a.state != 'rejected' AND 
            a.request_no = $2;
            

    UPDATE 
            prakruti_purchase_requistion_analysis_line AS a 
    SET 
            quantity_req = b.quantity,
            vendor_id = b.vendor_id ,
            product_id = b.product_id,
            description = b.description,
            required_date = b.required_date,
            uom_id = b.uom_id,
            hsn_code = b.hsn_code 
    FROM(
            SELECT 
                    prakruti_purchase_quotation_line.quantity,
                    prakruti_purchase_quotation_line.requisition_line_id,
                    prakruti_purchase_quotation_line.product_id,
                    prakruti_purchase_order_quotation.vendor_id,
                    prakruti_purchase_quotation_line.description,
                    prakruti_purchase_quotation_line.required_date,
                    prakruti_purchase_quotation_line.uom_id,
                    prakruti_purchase_quotation_line.hsn_code
            FROM 
                    prakruti_purchase_quotation_line JOIN 
                    prakruti_purchase_order_quotation ON 
                    prakruti_purchase_order_quotation.id = prakruti_purchase_quotation_line.purchase_line_id
            WHERE 
                    prakruti_purchase_order_quotation.id = $1 AND 
                    prakruti_purchase_order_quotation.pr_no = $2 AND 
                    prakruti_purchase_quotation_line.purchase_line_id = $1
        ) AS b 
    WHERE 
            a.requisition_line_id = b.requisition_line_id  AND a.send_to = 'Price Request';
   
    UPDATE 
            prakruti_price_request AS a 
    SET 
            revise_remarks_update = revise_remarks_update ||e'\n' 
            || '--------------------------' ||e'\n' 
            || 'Revision Done in ' ||e'\n'
            || 'Purchase Quotation' ||e'\n'
            || 'Remarks which was entered was ' ||e'\n' 
            || b.revise_remarks ||e'\n'
            || 'Which was Revised By ' ||e'\n' 
            || b.revise_done_by 
    FROM(
            SELECT 
                    res_partner.name AS revise_done_by,
                    prakruti_purchase_order_quotation.revise_remarks,
                    prakruti_purchase_order_quotation.pr_no 
            FROM 
                    prakruti_purchase_order_quotation JOIN 
                    res_users ON 
                    prakruti_purchase_order_quotation.revise_id = res_users.id JOIN 
                    res_partner ON 
                    res_users.partner_id = res_partner.id 
            WHERE 
                    prakruti_purchase_order_quotation.id = $1 AND 
                    prakruti_purchase_order_quotation.pr_no = $2 
        ) AS b 
    WHERE 
            a.request_no = b.pr_no AND 
            a.state != 'rejected' AND 
            a.request_no = $2;
            
    UPDATE 
            prakruti_price_request_line AS a 
    SET 
            quantity_req = b.quantity,
            product_id = b.product_id,
            description = b.description,
            required_date = b.required_date,
            uom_id = b.uom_id,
            hsn_code = b.hsn_code 
    FROM(
            SELECT 
                    prakruti_purchase_quotation_line.quantity,
                    prakruti_purchase_quotation_line.requisition_line_id,
                    prakruti_purchase_quotation_line.product_id,
                    prakruti_purchase_quotation_line.description,
                    prakruti_purchase_quotation_line.required_date,
                    prakruti_purchase_quotation_line.uom_id,
                    prakruti_purchase_quotation_line.hsn_code
            FROM 
                    prakruti_purchase_quotation_line JOIN 
                    prakruti_purchase_order_quotation ON 
                    prakruti_purchase_order_quotation.id = prakruti_purchase_quotation_line.purchase_line_id
            WHERE 
                    prakruti_purchase_order_quotation.id = $1 AND 
                    prakruti_purchase_order_quotation.pr_no = $2 AND 
                    prakruti_purchase_quotation_line.purchase_line_id = $1
        ) AS b 
    WHERE 
            a.requisition_line_id = b.requisition_line_id;
            
    UPDATE 
            prakruti_vendor_list_line AS a 
    SET 
            vendor_id = b.vendor_id 
    FROM(
            SELECT 
                    prakruti_purchase_order_quotation.vendor_id,
                    prakruti_purchase_order_quotation.vendor_grid_id
            FROM 
                    prakruti_purchase_order_quotation
            WHERE 
                    prakruti_purchase_order_quotation.id = $1 AND 
                    prakruti_purchase_order_quotation.pr_no = $2
        ) AS b 
    WHERE 
            a.id = b.vendor_grid_id AND a.id = $1;
      
    UPDATE prakruti_purchase_order_quotation SET revise_id = NULL,revise_remarks = '' WHERE id = $1;
	
ELSE
    RETURN 'Record Cannot Be Revised';
END IF;	
	
	
	
RETURN qty;
                                
END;
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION public.revise_purchase_quotation(integer,character varying)
  OWNER TO odoo;
  
  
  
  
  
  
CREATE OR REPLACE FUNCTION public.revise_purchase_quotation_analysis(integer,character varying)
  RETURNS character varying AS
$BODY$
DECLARE qty   integer;
line_id INTEGER;
BEGIN

qty = 0;
line_id = 0;

SELECT 
	requisition_line_id INTO line_id 
FROM 
	prakruti_purchase_quotation_analysis_line 
WHERE 
	purchase_line_id = $1;

IF line_id >0 THEN

    UPDATE 	
            prakruti_purchase_order_quotation_analysis 
    SET 
            revise_status = 'revise_done',
            revise_no = revise_no + 1,
            revise_remarks_update = revise_remarks_update ||e'\n' 
            || '--------------------------' ||e'\n' 
            || 'Revision Done in ' ||e'\n' 
            || 'Purchase Quotation' ||e'\n' 
            || 'Revision No ' ||e'\n' 
            || revise_no + 1 ||e'\n' 
            || 'Remarks which was entered was ' ||e'\n' 
            || revise_remarks ||e'\n' 
            || 'Which was Revised By ' ||e'\n' 
            || revise_done_by 
    FROM(
            SELECT 
                    res_partner.name AS revise_done_by 
            FROM 
                    prakruti_purchase_order_quotation_analysis JOIN 
                    res_users ON 
                    prakruti_purchase_order_quotation_analysis.revise_id = res_users.id JOIN 
                    res_partner ON 
                    res_users.partner_id = res_partner.id 
            WHERE 
                    prakruti_purchase_order_quotation_analysis.id = $1
        ) AS revise_done_person_name 
    WHERE 
            prakruti_purchase_order_quotation_analysis.id = $1;

    UPDATE 
            prakruti_purchase_requisition_approve AS a 
    SET 
            revise_remarks_update = revise_remarks_update ||e'\n' 
            || '--------------------------' ||e'\n' 
            || 'Revision Done in ' ||e'\n'
            || 'Purchase Quotation Analysis' ||e'\n'
            || 'Remarks which was entered was ' ||e'\n' 
            || b.revise_remarks ||e'\n'
            || 'Which was Revised By ' ||e'\n' 
            || b.revise_done_by 
    FROM(
            SELECT 
                    res_partner.name AS revise_done_by,
                    prakruti_purchase_order_quotation_analysis.revise_remarks,
                    prakruti_purchase_order_quotation_analysis.pr_no 
            FROM 
                    prakruti_purchase_order_quotation_analysis JOIN 
                    res_users ON 
                    prakruti_purchase_order_quotation_analysis.revise_id = res_users.id JOIN 
                    res_partner ON 
                    res_users.partner_id = res_partner.id 
            WHERE 
                    prakruti_purchase_order_quotation_analysis.id = $1 AND 
                    prakruti_purchase_order_quotation_analysis.pr_no = $2
        ) AS b 
    WHERE 
            a.requisition_no = b.pr_no AND 
            a.state != 'rejected' AND 
            a.requisition_no = $2;

    UPDATE 
            prakruti_purchase_requisition_approve_line AS a 
    SET 
            quantity = b.quantity,
            quantity_req = b.quantity,
            description = b.description,
            required_date = b.required_date,
            uom_id = b.uom_id,
            hsn_code=b.hsn_code,
            product_id = b.product_id 
    FROM(
            SELECT 
                    prakruti_purchase_quotation_analysis_line.quantity,
                    prakruti_purchase_quotation_analysis_line.requisition_line_id,
                    prakruti_purchase_quotation_analysis_line.product_id,                    prakruti_purchase_quotation_analysis_line.description,
                    prakruti_purchase_quotation_analysis_line.required_date,
                    prakruti_purchase_quotation_analysis_line.uom_id,
                    prakruti_purchase_quotation_analysis_line.hsn_code,
                    prakruti_purchase_quotation_analysis_line.discount_id
            FROM 
                    prakruti_purchase_quotation_analysis_line JOIN 
                    prakruti_purchase_order_quotation_analysis ON 
                    prakruti_purchase_order_quotation_analysis.id = prakruti_purchase_quotation_analysis_line.purchase_line_id 
            WHERE 
                    prakruti_purchase_order_quotation_analysis.id = $1 AND 
                    prakruti_purchase_order_quotation_analysis.pr_no = $2 AND 
                    prakruti_purchase_quotation_analysis_line.purchase_line_id = $1
        ) AS b 
    WHERE 
            a.requisition_line_id = b.requisition_line_id ;	
            

    UPDATE 
            prakruti_purchase_requisition AS a 
    SET 
            revise_remarks_update = revise_remarks_update ||e'\n' 
            || '--------------------------' ||e'\n' 
            || 'Revision Done in ' ||e'\n'
            || 'Purchase Quotation Analysis' ||e'\n'
            || 'Remarks which was entered was ' ||e'\n' 
            || b.revise_remarks ||e'\n'
            || 'Which was Revised By ' ||e'\n' 
            || b.revise_done_by 
    FROM(
            SELECT 
                    res_partner.name AS revise_done_by,
                    prakruti_purchase_order_quotation_analysis.revise_remarks,
                    prakruti_purchase_order_quotation_analysis.pr_no 
            FROM 
                    prakruti_purchase_order_quotation_analysis JOIN 
                    res_users ON 
                    prakruti_purchase_order_quotation_analysis.revise_id = res_users.id JOIN 
                    res_partner ON 
                    res_users.partner_id = res_partner.id 
            WHERE 
                    prakruti_purchase_order_quotation_analysis.id = $1 AND 
                    prakruti_purchase_order_quotation_analysis.pr_no = $2
        ) AS b 
    WHERE 
            a.requisition_no = b.pr_no AND 
            a.state != 'rejected' AND 
            a.requisition_no = $2;
            
    UPDATE 
            prakruti_purchase_requisition_line AS a 
    SET 
            quantity_req = b.quantity,
            description = b.description,
            required_date = b.required_date,
            uom_id = b.uom_id,
            hsn_code=b.hsn_code,
            product_id = b.product_id 
    FROM(
            SELECT 
                    prakruti_purchase_quotation_analysis_line.quantity, 
                    prakruti_purchase_quotation_analysis_line.requisition_line_id,
                    prakruti_purchase_quotation_analysis_line.product_id,                    prakruti_purchase_quotation_analysis_line.description,
                    prakruti_purchase_quotation_analysis_line.required_date,
                    prakruti_purchase_quotation_analysis_line.uom_id,
                    prakruti_purchase_quotation_analysis_line.hsn_code,
                    prakruti_purchase_quotation_analysis_line.discount_id 
            FROM 
                    prakruti_purchase_quotation_analysis_line JOIN 
                    prakruti_purchase_order_quotation_analysis ON 
                    prakruti_purchase_order_quotation_analysis.id = prakruti_purchase_quotation_analysis_line.purchase_line_id 
            WHERE 
                    prakruti_purchase_order_quotation_analysis.id = $1 AND 
                    prakruti_purchase_order_quotation_analysis.pr_no = $2 AND 
                    prakruti_purchase_quotation_analysis_line.purchase_line_id = $1
        ) AS b 
    WHERE 
            a.id = b.requisition_line_id ;
            
    UPDATE 
            prakruti_purchase_requistion_analysis AS a 
    SET 
            revise_remarks_update = revise_remarks_update ||e'\n' 
            || '--------------------------' ||e'\n' 
            || 'Revision Done in ' ||e'\n'
            || 'Purchase Quotation Analysis' ||e'\n'
            || 'Remarks which was entered was ' ||e'\n' 
            || b.revise_remarks ||e'\n'
            || 'Which was Revised By ' ||e'\n' 
            || b.revise_done_by 
    FROM(
            SELECT 
                    res_partner.name AS revise_done_by,
                    prakruti_purchase_order_quotation_analysis.revise_remarks,
                    prakruti_purchase_order_quotation_analysis.pr_no 
            FROM 
                    prakruti_purchase_order_quotation_analysis JOIN 
                    res_users ON 
                    prakruti_purchase_order_quotation_analysis.revise_id = res_users.id JOIN 
                    res_partner ON 
                    res_users.partner_id = res_partner.id 
            WHERE 
                    prakruti_purchase_order_quotation_analysis.id = $1 AND 
                    prakruti_purchase_order_quotation_analysis.pr_no = $2 
        ) AS b 
    WHERE 
            a.request_no = b.pr_no AND 
            a.state != 'rejected' AND 
            a.request_no = $2;
            

    UPDATE 
            prakruti_purchase_requistion_analysis_line AS a 
    SET 
            quantity_req = b.quantity,
            vendor_id = b.vendor_id,
            description = b.description,
            required_date = b.required_date,
            uom_id = b.uom_id,
            hsn_code=b.hsn_code,
            product_id = b.product_id 
    FROM(
            SELECT 
                    prakruti_purchase_quotation_analysis_line.quantity,
                    prakruti_purchase_quotation_analysis_line.requisition_line_id,
                    prakruti_purchase_quotation_analysis_line.product_id,
                    prakruti_purchase_order_quotation_analysis.vendor_id,                    prakruti_purchase_quotation_analysis_line.description,
                    prakruti_purchase_quotation_analysis_line.required_date,
                    prakruti_purchase_quotation_analysis_line.uom_id,
                    prakruti_purchase_quotation_analysis_line.hsn_code,
                    prakruti_purchase_quotation_analysis_line.discount_id 
            FROM 
                    prakruti_purchase_quotation_analysis_line JOIN 
                    prakruti_purchase_order_quotation_analysis ON 
                    prakruti_purchase_order_quotation_analysis.id = prakruti_purchase_quotation_analysis_line.purchase_line_id
            WHERE 
                    prakruti_purchase_order_quotation_analysis.id = $1 AND 
                    prakruti_purchase_order_quotation_analysis.pr_no = $2 AND 
                    prakruti_purchase_quotation_analysis_line.purchase_line_id = $1
        ) AS b 
    WHERE 
            a.requisition_line_id = b.requisition_line_id  AND a.send_to = 'Price Request';
            
            
    UPDATE 
            prakruti_price_request AS a 
    SET 
            revise_remarks_update = revise_remarks_update ||e'\n' 
            || '--------------------------' ||e'\n' 
            || 'Revision Done in ' ||e'\n'
            || 'Purchase Quotation Analysis' ||e'\n'
            || 'Remarks which was entered was ' ||e'\n' 
            || b.revise_remarks ||e'\n'
            || 'Which was Revised By ' ||e'\n' 
            || b.revise_done_by 
    FROM(
            SELECT 
                    res_partner.name AS revise_done_by,
                    prakruti_purchase_order_quotation_analysis.revise_remarks,
                    prakruti_purchase_order_quotation_analysis.pr_no 
            FROM 
                    prakruti_purchase_order_quotation_analysis JOIN 
                    res_users ON 
                    prakruti_purchase_order_quotation_analysis.revise_id = res_users.id JOIN 
                    res_partner ON 
                    res_users.partner_id = res_partner.id 
            WHERE 
                    prakruti_purchase_order_quotation_analysis.id = $1 AND 
                    prakruti_purchase_order_quotation_analysis.pr_no = $2 
        ) AS b 
    WHERE 
            a.request_no = b.pr_no AND 
            a.state != 'rejected' AND 
            a.request_no = $2;
            
    UPDATE 
            prakruti_price_request_line AS a 
    SET 
            quantity_req = b.quantity,
            description = b.description,
            required_date = b.required_date,
            uom_id = b.uom_id,
            hsn_code=b.hsn_code,
            product_id = b.product_id
    FROM(
            SELECT 
                    prakruti_purchase_quotation_analysis_line.quantity,
                    prakruti_purchase_quotation_analysis_line.requisition_line_id,
                    prakruti_purchase_quotation_analysis_line.product_id,                    prakruti_purchase_quotation_analysis_line.description,
                    prakruti_purchase_quotation_analysis_line.required_date,
                    prakruti_purchase_quotation_analysis_line.uom_id,
                    prakruti_purchase_quotation_analysis_line.hsn_code,
                    prakruti_purchase_quotation_analysis_line.discount_id
            FROM 
                    prakruti_purchase_quotation_analysis_line JOIN 
                    prakruti_purchase_order_quotation_analysis ON 
                    prakruti_purchase_order_quotation_analysis.id = prakruti_purchase_quotation_analysis_line.purchase_line_id
            WHERE 
                    prakruti_purchase_order_quotation_analysis.id = $1 AND 
                    prakruti_purchase_order_quotation_analysis.pr_no = $2 AND 
                    prakruti_purchase_quotation_analysis_line.purchase_line_id = $1
        ) AS b 
    WHERE 
            a.requisition_line_id = b.requisition_line_id;
            
    UPDATE 
            prakruti_vendor_list_line AS a 
    SET 
            vendor_id = b.vendor_id 
    FROM(
            SELECT 
                    prakruti_purchase_order_quotation_analysis.vendor_id,
                    prakruti_purchase_order_quotation_analysis.vendor_grid_id
            FROM 
                    prakruti_purchase_order_quotation_analysis
            WHERE 
                    prakruti_purchase_order_quotation_analysis.id = $1 AND 
                    prakruti_purchase_order_quotation_analysis.pr_no = $2
        ) AS b 
    WHERE 
            a.id = b.vendor_grid_id AND a.id = $1;
            
            
    UPDATE 
            prakruti_purchase_order_quotation AS a 
    SET 
            vendor_id = b.vendor_id,
            delivery_address = b.delivery_address,
            revise_remarks_update = revise_remarks_update ||e'\n' 
            || '--------------------------' ||e'\n' 
            || 'Revision Done in ' ||e'\n'
            || 'Purchase Quotation Analysis' ||e'\n'
            || 'Remarks which was entered was ' ||e'\n' 
            || b.revise_remarks ||e'\n'
            || 'Which was Revised By ' ||e'\n' 
            || b.revise_done_by 
    FROM(
            SELECT 
                    res_partner.name AS revise_done_by,
                    prakruti_purchase_order_quotation_analysis.delivery_address,
                    prakruti_purchase_order_quotation_analysis.revise_remarks,
                    prakruti_purchase_order_quotation_analysis.pr_no,
                    prakruti_purchase_order_quotation_analysis.vendor_id  
            FROM 
                    prakruti_purchase_order_quotation_analysis JOIN 
                    res_users ON 
                    prakruti_purchase_order_quotation_analysis.revise_id = res_users.id JOIN 
                    res_partner ON 
                    res_users.partner_id = res_partner.id 
            WHERE 
                    prakruti_purchase_order_quotation_analysis.id = $1 AND 
                    prakruti_purchase_order_quotation_analysis.pr_no = $2 
        ) AS b 
    WHERE 
            a.pr_no = b.pr_no AND 
            a.state != 'rejected' AND 
            a.pr_no = $2;
            
            
    UPDATE 
            prakruti_purchase_quotation_line AS a 
    SET 
            quantity = b.quantity,
            unit_price = b.unit_price,
            cgst_id = b.cgst_id,
            sgst_id = b.sgst_id,
            igst_id = b.igst_id,
            description = b.description,
            scheduled_date = b.scheduled_date,
            required_date = b.required_date,
            uom_id = b.uom_id,
            hsn_code=b.hsn_code,
            discount_id= b.discount_id,
            product_id = b.product_id
    FROM(
            SELECT 
                    prakruti_purchase_quotation_analysis_line.quantity,
                    prakruti_purchase_quotation_analysis_line.igst_id,
                    prakruti_purchase_quotation_analysis_line.sgst_id,
                    prakruti_purchase_quotation_analysis_line.cgst_id,
                    prakruti_purchase_quotation_analysis_line.requisition_line_id,
                    prakruti_purchase_quotation_analysis_line.product_id,
                    prakruti_purchase_quotation_analysis_line.unit_price,
                    prakruti_purchase_quotation_analysis_line.description,
                    prakruti_purchase_quotation_analysis_line.scheduled_date,
                    prakruti_purchase_quotation_analysis_line.required_date,
                    prakruti_purchase_quotation_analysis_line.uom_id,
                    prakruti_purchase_quotation_analysis_line.hsn_code,
                    prakruti_purchase_quotation_analysis_line.discount_id
                FROM 
                    prakruti_purchase_quotation_analysis_line JOIN 
                    prakruti_purchase_order_quotation_analysis ON 
                    prakruti_purchase_order_quotation_analysis.id = prakruti_purchase_quotation_analysis_line.purchase_line_id
            WHERE 
                    prakruti_purchase_order_quotation_analysis.id = $1 AND 
                    prakruti_purchase_order_quotation_analysis.pr_no = $2 AND 
                    prakruti_purchase_quotation_analysis_line.purchase_line_id = $1
        ) AS b 
    WHERE 
            a.requisition_line_id = b.requisition_line_id;

    UPDATE prakruti_purchase_order_quotation_analysis SET revise_id = NULL,revise_remarks = '' WHERE id = $1;
    
ELSE
    RETURN 'Record Cannot Be Revised';
END IF;	
	
	
	
	
RETURN qty;
                                
END;
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION public.revise_purchase_quotation_analysis(integer,character varying)
  OWNER TO odoo;
  


  
  
  
CREATE OR REPLACE FUNCTION public.revise_purchase_order(integer,character varying)
  RETURNS character varying AS
$BODY$
DECLARE qty   integer;
line_id INTEGER;
BEGIN

qty = 0;
line_id =0;

SELECT 
	requisition_line_id INTO line_id 
FROM 
	prakruti_purchase_line 
WHERE 
	prakruti_purchase_line.purchase_line_id = $1;

IF line_id >0 THEN


    UPDATE 
            prakruti_purchase_order 
    SET 
            revise_status = 'revise_done',
            revise_no = revise_no + 1,
            revise_remarks_update = revise_remarks_update ||e'\n' 
            || '--------------------------' ||e'\n' 
            || 'Revision Done in ' ||e'\n' 
            || 'Purchase Order' ||e'\n' 
            || 'Revision No ' ||e'\n' 
            || revise_no + 1 ||e'\n' 
            || 'Remarks which was entered was ' ||e'\n' 
            || revise_remarks ||e'\n' 
            || 'Which was Revised By ' ||e'\n' 
            || revise_done_by 
    FROM(
            SELECT 
                    res_partner.name AS revise_done_by 
            FROM 
                    prakruti_purchase_order JOIN 
                    res_users ON 
                    prakruti_purchase_order.revise_id = res_users.id JOIN 
                    res_partner ON 
                    res_users.partner_id = res_partner.id 
            WHERE 
                    prakruti_purchase_order.id = $1
        ) AS revise_done_person_name 
    WHERE 
            prakruti_purchase_order.id = $1;

    UPDATE 
            prakruti_purchase_requisition_approve AS a 
    SET 
            revise_remarks_update = revise_remarks_update ||e'\n' 
            || '--------------------------' ||e'\n' 
            || 'Revision Done in ' ||e'\n'
            || 'Purchase Order' ||e'\n'
            || 'Remarks which was entered was ' ||e'\n' 
            || b.revise_remarks ||e'\n'
            || 'Which was Revised By ' ||e'\n' 
            || b.revise_done_by 
    FROM(
            SELECT 
                    res_partner.name AS revise_done_by,
                    prakruti_purchase_order.revise_remarks,
                    prakruti_purchase_order.pr_no 
            FROM 
                    prakruti_purchase_order JOIN 
                    res_users ON 
                    prakruti_purchase_order.revise_id = res_users.id JOIN 
                    res_partner ON 
                    res_users.partner_id = res_partner.id 
            WHERE 
                    prakruti_purchase_order.id = $1 AND 
                    prakruti_purchase_order.pr_no = $2
        ) AS b 
    WHERE 
            a.requisition_no = b.pr_no AND 
            a.state != 'rejected' AND 
            a.requisition_no = $2;

    UPDATE 
            prakruti_purchase_requisition_approve_line AS a 
    SET 
            quantity_req = b.quantity, 
            quantity = b.quantity,
            product_id = b.product_id,
            description = b.description,
            required_date= b.required_date,
            uom_id= b.uom_id,
            remarks= b.remarks,
            hsn_code= b.hsn_code
    FROM( 
            SELECT 
                    prakruti_purchase_line.quantity, 
                    prakruti_purchase_line.requisition_line_id, 
                    prakruti_purchase_line.product_id,
                    prakruti_purchase_line.description,
                    prakruti_purchase_line.required_date,
                    prakruti_purchase_line.uom_id,
                    prakruti_purchase_line.remarks,
                    prakruti_purchase_line.hsn_code
            FROM 
                    prakruti_purchase_line JOIN 
                    prakruti_purchase_order ON 
                    prakruti_purchase_order.id = prakruti_purchase_line.purchase_line_id 
            WHERE 
                    prakruti_purchase_order.id = $1 AND 
                    prakruti_purchase_order.pr_no = $2 AND 
                    prakruti_purchase_line.purchase_line_id = $1 
        ) AS b 
    WHERE 
            a.requisition_line_id = b.requisition_line_id AND  
            a.product_id = b.product_id;	
            

    UPDATE 
            prakruti_purchase_requisition AS a 
    SET 
            revise_remarks_update = revise_remarks_update ||e'\n' 
            || '--------------------------' ||e'\n' 
            || 'Revision Done in ' ||e'\n'
            || 'Purchase Order' ||e'\n'
            || 'Remarks which was entered was ' ||e'\n' 
            || b.revise_remarks ||e'\n'
            || 'Which was Revised By ' ||e'\n' 
            || b.revise_done_by 
    FROM(
            SELECT 
                    res_partner.name AS revise_done_by,
                    prakruti_purchase_order.revise_remarks,
                    prakruti_purchase_order.pr_no 
            FROM 
                    prakruti_purchase_order JOIN 
                    res_users ON 
                    prakruti_purchase_order.revise_id = res_users.id JOIN 
                    res_partner ON 
                    res_users.partner_id = res_partner.id 
            WHERE 
                    prakruti_purchase_order.id = $1 AND 
                    prakruti_purchase_order.pr_no = $2
        ) AS b 
    WHERE 
            a.requisition_no = b.pr_no AND 
            a.state != 'rejected' AND 
            a.requisition_no = $2;
            
    UPDATE 
            prakruti_purchase_requisition_line AS a 
    SET 
            quantity_req = b.quantity,
            product_id = b.product_id,
            description = b.description,
            required_date= b.required_date,
            uom_id= b.uom_id,
            remarks= b.remarks,
            hsn_code= b.hsn_code
    FROM( 
            SELECT 
                    prakruti_purchase_line.quantity, 
                    prakruti_purchase_line.requisition_line_id, 
                    prakruti_purchase_line.product_id,
                    prakruti_purchase_line.description,
                    prakruti_purchase_line.required_date,
                    prakruti_purchase_line.uom_id,
                    prakruti_purchase_line.remarks,
                    prakruti_purchase_line.hsn_code
            FROM 
                    prakruti_purchase_line JOIN 
                    prakruti_purchase_order ON 
                    prakruti_purchase_order.id = prakruti_purchase_line.purchase_line_id 
            WHERE 
                    prakruti_purchase_order.id = $1 AND 
                    prakruti_purchase_order.pr_no = $2 AND 
                    prakruti_purchase_line.purchase_line_id = $1 
        ) AS b 
    WHERE 
            a.id = b.requisition_line_id AND  
            a.product_id = b.product_id;
            
    UPDATE 
            prakruti_purchase_requistion_analysis AS a 
    SET 
            revise_remarks_update = revise_remarks_update ||e'\n' 
            || '--------------------------' ||e'\n' 
            || 'Revision Done in ' ||e'\n'
            || 'Purchase Order' ||e'\n'
            || 'Remarks which was entered was ' ||e'\n' 
            || b.revise_remarks ||e'\n'
            || 'Which was Revised By ' ||e'\n' 
            || b.revise_done_by 
    FROM(
            SELECT 
                    res_partner.name AS revise_done_by,
                    prakruti_purchase_order.revise_remarks,
                    prakruti_purchase_order.pr_no 
            FROM 
                    prakruti_purchase_order JOIN 
                    res_users ON 
                    prakruti_purchase_order.revise_id = res_users.id JOIN 
                    res_partner ON 
                    res_users.partner_id = res_partner.id 
            WHERE 
                    prakruti_purchase_order.id = $1 AND 
                    prakruti_purchase_order.pr_no = $2
        ) AS b 
    WHERE 
            a.request_no = b.pr_no AND 
            a.state != 'rejected' AND 
            a.request_no = $2;
            

    UPDATE 
            prakruti_purchase_requistion_analysis_line AS a 
    SET 
            quantity_req = b.quantity,
            vendor_id = b.vendor_id,
            product_id = b.product_id,
            description = b.description,
            required_date= b.required_date,
            uom_id= b.uom_id,
            remarks= b.remarks,
            hsn_code= b.hsn_code
    FROM( 
            SELECT 
                    prakruti_purchase_line.quantity, 
                    prakruti_purchase_line.requisition_line_id, 
                    prakruti_purchase_line.product_id,
                    prakruti_purchase_order.vendor_id,
                    prakruti_purchase_line.description,
                    prakruti_purchase_line.required_date,
                    prakruti_purchase_line.uom_id,
                    prakruti_purchase_line.remarks,
                    prakruti_purchase_line.hsn_code
            FROM 
                    prakruti_purchase_line JOIN 
                    prakruti_purchase_order ON 
                    prakruti_purchase_order.id = prakruti_purchase_line.purchase_line_id 
            WHERE 
                    prakruti_purchase_order.id = $1 AND 
                    prakruti_purchase_order.pr_no = $2 AND 
                    prakruti_purchase_line.purchase_line_id = $1 
        ) AS b 
    WHERE 
            a.requisition_line_id = b.requisition_line_id AND  
            a.product_id = b.product_id AND   
            (a.send_to = 'Purchase Order' OR 
            a.send_to = 'Price Request');
            
    UPDATE 
            prakruti_purchase_order_quotation AS a 
    SET 
            vendor_id = b.vendor_id,
            delivery_address = b.delivery_address,
            revise_remarks_update = revise_remarks_update ||e'\n' 
            || '--------------------------' ||e'\n' 
            || 'Revision Done in ' ||e'\n'
            || 'Purchase Order' ||e'\n'
            || 'Remarks which was entered was ' ||e'\n' 
            || b.revise_remarks ||e'\n'
            || 'Which was Revised By ' ||e'\n' 
            || b.revise_done_by 
    FROM(
            SELECT 
                    res_partner.name AS revise_done_by,
                    prakruti_purchase_order.revise_remarks,
                    prakruti_purchase_order.pr_no,
                    prakruti_purchase_order.vendor_id,
                    prakruti_purchase_order.vendor_grid_id,
                    prakruti_purchase_order.delivery_address 
            FROM 
                    prakruti_purchase_order JOIN 
                    res_users ON 
                    prakruti_purchase_order.revise_id = res_users.id JOIN 
                    res_partner ON 
                    res_users.partner_id = res_partner.id 
            WHERE 
                    prakruti_purchase_order.id = $1 AND 
                    prakruti_purchase_order.pr_no = $2 
        ) AS b 
    WHERE 
            a.pr_no = b.pr_no AND 
            a.state != 'rejected' AND 
            a.pr_no = $2 AND 
            a.coming_from = 'Price Request' AND 
            a.vendor_grid_id = b.vendor_grid_id;
            

    UPDATE 
            prakruti_purchase_quotation_line AS a 
    SET 
            quantity = b.quantity,
            unit_price = b.unit_price,
            scheduled_date = b.scheduled_date,
            cgst_id = b.cgst_id,
            sgst_id = b.sgst_id,
            igst_id = b.igst_id,
            product_id = b.product_id,
            description = b.description,
            required_date= b.required_date,
            uom_id= b.uom_id,
            hsn_code= b.hsn_code,
            discount_id = b.discount_id
    FROM(
            SELECT 
                    prakruti_purchase_line.quantity,
                    prakruti_purchase_line.igst_id,
                    prakruti_purchase_line.sgst_id,
                    prakruti_purchase_line.cgst_id,
                    prakruti_purchase_line.requisition_line_id,
                    prakruti_purchase_line.product_id,
                    prakruti_purchase_line.unit_price,
                    prakruti_purchase_line.scheduled_date,
                    prakruti_purchase_line.description,
                    prakruti_purchase_line.required_date,
                    prakruti_purchase_line.uom_id,
                    prakruti_purchase_line.remarks,
                    prakruti_purchase_line.hsn_code,
                    prakruti_purchase_line.discount_id
            FROM 
                    prakruti_purchase_line JOIN 
                    prakruti_purchase_order ON 
                    prakruti_purchase_order.id = prakruti_purchase_line.purchase_line_id
            WHERE 
                    prakruti_purchase_order.id = $1 AND 
                    prakruti_purchase_order.pr_no = $2 AND 
                    prakruti_purchase_line.purchase_line_id = $1
        ) AS b 
    WHERE 
            a.requisition_line_id = b.requisition_line_id ;
            
    UPDATE 
            prakruti_purchase_order_quotation_analysis AS a 
    SET 
            vendor_id = b.vendor_id,
            delivery_address = b.delivery_address,
            revise_remarks_update = revise_remarks_update ||e'\n' 
            || '--------------------------' ||e'\n' 
            || 'Revision Done in ' ||e'\n'
            || 'Purchase Order' ||e'\n'
            || 'Remarks which was entered was ' ||e'\n' 
            || b.revise_remarks ||e'\n'
            || 'Which was Revised By ' ||e'\n' 
            || b.revise_done_by 
    FROM(
            SELECT 
                    res_partner.name AS revise_done_by,
                    prakruti_purchase_order.revise_remarks,
                    prakruti_purchase_order.pr_no,
                    prakruti_purchase_order.vendor_id,
                    prakruti_purchase_order.vendor_grid_id,
                    prakruti_purchase_order.delivery_address
            FROM 
                    prakruti_purchase_order JOIN 
                    res_users ON 
                    prakruti_purchase_order.revise_id = res_users.id JOIN 
                    res_partner ON 
                    res_users.partner_id = res_partner.id 
            WHERE 
                    prakruti_purchase_order.id = $1 AND 
                    prakruti_purchase_order.pr_no = $2 
        ) AS b 
    WHERE 
            a.pr_no = b.pr_no AND 
            a.state != 'rejected' AND 
            a.pr_no = $2 AND 
            a.coming_from = 'Purchase Quotation' AND 
            a.vendor_grid_id = b.vendor_grid_id;
            
    UPDATE 
            prakruti_purchase_quotation_analysis_line AS a 
    SET 
            quantity = b.quantity,
            unit_price = b.unit_price,
            scheduled_date = b.scheduled_date,
            cgst_id = b.cgst_id,
            sgst_id = b.sgst_id,
            igst_id = b.igst_id,
            discount_id = b.discount_id,
            product_id = b.product_id,
            description = b.description,
            required_date= b.required_date,
            uom_id= b.uom_id,
            hsn_code= b.hsn_code
    FROM(
            SELECT 
                    prakruti_purchase_line.quantity,
                    prakruti_purchase_line.igst_id,
                    prakruti_purchase_line.sgst_id,
                    prakruti_purchase_line.cgst_id,
                    prakruti_purchase_line.requisition_line_id,
                    prakruti_purchase_line.product_id,
                    prakruti_purchase_line.unit_price,
                    prakruti_purchase_line.scheduled_date,
                    prakruti_purchase_line.description,
                    prakruti_purchase_line.required_date,
                    prakruti_purchase_line.uom_id,
                    prakruti_purchase_line.remarks,
                    prakruti_purchase_line.hsn_code,
                    prakruti_purchase_line.discount_id
            FROM 
                    prakruti_purchase_line JOIN 
                    prakruti_purchase_order ON 
                    prakruti_purchase_order.id = prakruti_purchase_line.purchase_line_id
            WHERE 
                    prakruti_purchase_order.id = $1 AND 
                    prakruti_purchase_order.pr_no = $2 AND 
                    prakruti_purchase_line.purchase_line_id = $1
        ) AS b 
    WHERE 
            a.requisition_line_id = b.requisition_line_id ;
            
    UPDATE 
            prakruti_price_request AS a 
    SET 
            revise_remarks_update = revise_remarks_update ||e'\n' 
            || '--------------------------' ||e'\n' 
            || 'Revision Done in ' ||e'\n'
            || 'Purchase Order' ||e'\n'
            || 'Remarks which was entered was ' ||e'\n' 
            || b.revise_remarks ||e'\n'
            || 'Which was Revised By ' ||e'\n' 
            || b.revise_done_by 
    FROM(
            SELECT 
                    res_partner.name AS revise_done_by,
                    prakruti_purchase_order.revise_remarks,
                    prakruti_purchase_order.pr_no 
            FROM 
                    prakruti_purchase_order JOIN 
                    res_users ON 
                    prakruti_purchase_order.revise_id = res_users.id JOIN 
                    res_partner ON 
                    res_users.partner_id = res_partner.id 
            WHERE 
                    prakruti_purchase_order.id = $1 AND 
                    prakruti_purchase_order.pr_no = $2 
        ) AS b 
    WHERE 
            a.request_no = b.pr_no AND 
            a.state != 'rejected' AND 
            a.request_no = $2 AND 
            a.coming_from = 'Purchase Quotation';
            
            
    UPDATE 
            prakruti_price_request_line AS a 
    SET 
            quantity_req = b.quantity,
            product_id = b.product_id,
            description = b.description,
            required_date= b.required_date,
            uom_id= b.uom_id,
            remarks= b.remarks,
            hsn_code= b.hsn_code
    FROM(
            SELECT 
                    prakruti_purchase_line.quantity,
                    prakruti_purchase_line.requisition_line_id,
                    prakruti_purchase_line.product_id,
                    prakruti_purchase_line.description,
                    prakruti_purchase_line.scheduled_date,
                    prakruti_purchase_line.required_date,
                    prakruti_purchase_line.uom_id,
                    prakruti_purchase_line.remarks,
                    prakruti_purchase_line.hsn_code,
                    prakruti_purchase_line.discount_id,
                    prakruti_purchase_line.cgst_id,
                    prakruti_purchase_line.sgst_id,
                    prakruti_purchase_line.igst_id 
            FROM 
                    prakruti_purchase_line JOIN 
                    prakruti_purchase_order ON 
                    prakruti_purchase_order.id = prakruti_purchase_line.purchase_line_id
            WHERE 
                    prakruti_purchase_order.id = $1 AND 
                    prakruti_purchase_order.pr_no = $2 AND 
                    prakruti_purchase_line.purchase_line_id = $1
        ) AS b 
    WHERE 
            a.requisition_line_id = b.requisition_line_id ;
            
            
    UPDATE 
            prakruti_vendor_list_line AS a 
    SET 
            vendor_id = b.vendor_id 
    FROM(
            SELECT 
                    prakruti_purchase_order.vendor_id,
                    prakruti_purchase_order.vendor_grid_id
            FROM 
                    prakruti_purchase_order
            WHERE 
                    prakruti_purchase_order.id = $1 AND 
                    prakruti_purchase_order.pr_no = $2
        ) AS b 
    WHERE 
            a.id = b.vendor_grid_id AND a.id = $1;
            
            
            
    UPDATE 
            prakruti_logistics_po_tracking AS a 
    SET
            vendor_id = b.vendor_id,
            revise_remarks_update = revise_remarks_update ||e'\n' 
            || '--------------------------' ||e'\n' 
            || 'Revision Done in ' ||e'\n'
            || 'Purchase Order' ||e'\n'
            || 'Remarks which was entered was ' ||e'\n' 
            || b.revise_remarks ||e'\n'
            || 'Which was Revised By ' ||e'\n' 
            || b.revise_done_by 
    FROM(
            SELECT 
                    res_partner.name AS revise_done_by,
                    prakruti_purchase_order.revise_remarks,
                    prakruti_purchase_order.pr_no,
                    prakruti_purchase_order.vendor_id  
            FROM 
                    prakruti_purchase_order JOIN 
                    res_users ON 
                    prakruti_purchase_order.revise_id = res_users.id JOIN 
                    res_partner ON 
                    res_users.partner_id = res_partner.id 
            WHERE 
                    prakruti_purchase_order.id = $1 AND 
                    prakruti_purchase_order.pr_no = $2
        ) AS b 
    WHERE 
            a.pr_no = b.pr_no AND 
            a.state != 'reject' AND 
            a.pr_no = $2;
            
            
    UPDATE 
            prakruti_purchase_line_in_logistics AS a 
    SET 
            quantity = b.quantity 
    FROM( 
            SELECT 
                    prakruti_purchase_line.quantity, 
                    prakruti_purchase_line.requisition_line_id, 
                    prakruti_purchase_line.product_id,
                    prakruti_purchase_line.description,
                    prakruti_purchase_line.scheduled_date,
                    prakruti_purchase_line.required_date,
                    prakruti_purchase_line.unit_price,
                    prakruti_purchase_line.uom_id,
                    prakruti_purchase_line.remarks,
                    prakruti_purchase_line.hsn_code,
                    prakruti_purchase_line.discount_id,
                    prakruti_purchase_line.cgst_id,
                    prakruti_purchase_line.sgst_id,
                    prakruti_purchase_line.igst_id  
            FROM 
                    prakruti_purchase_line JOIN 
                    prakruti_purchase_order ON 
                    prakruti_purchase_order.id = prakruti_purchase_line.purchase_line_id 
            WHERE 
                    prakruti_purchase_order.id = $1 AND 
                    prakruti_purchase_order.pr_no = $2 AND 
                    prakruti_purchase_line.purchase_line_id = $1 
        ) AS b 
    WHERE 
            a.requisition_line_id = b.requisition_line_id ;
            
            
            
    UPDATE 
            prakruti_gate_pass AS a 
    SET
            vendor_id = b.vendor_id,
            revise_remarks_update = revise_remarks_update ||e'\n' 
            || '--------------------------' ||e'\n' 
            || 'Revision Done in ' ||e'\n'
            || 'Purchase Order' ||e'\n'
            || 'Remarks which was entered was ' ||e'\n' 
            || b.revise_remarks ||e'\n'
            || 'Which was Revised By ' ||e'\n' 
            || b.revise_done_by 
    FROM(
            SELECT 
                    res_partner.name AS revise_done_by,
                    prakruti_purchase_order.revise_remarks,
                    prakruti_purchase_order.pr_no,
                    prakruti_purchase_order.vendor_id  
            FROM 
                    prakruti_purchase_order JOIN 
                    res_users ON 
                    prakruti_purchase_order.revise_id = res_users.id JOIN 
                    res_partner ON 
                    res_users.partner_id = res_partner.id 
            WHERE 
                    prakruti_purchase_order.id = $1 AND 
                    prakruti_purchase_order.pr_no = $2
        ) AS b 
    WHERE 
            a.pr_no = b.pr_no AND 
            a.state != 'reject' AND 
            a.pr_no = $2;
            
            
            
    UPDATE 
            prakruti_gate_pass_line AS a 
    SET 
            quantity = b.quantity 
    FROM( 
            SELECT 
                    prakruti_purchase_line.quantity, 
                    prakruti_purchase_line.requisition_line_id, 
                    prakruti_purchase_line.product_id,
                    prakruti_purchase_line.description,
                    prakruti_purchase_line.scheduled_date,
                    prakruti_purchase_line.required_date,
                    prakruti_purchase_line.unit_price,
                    prakruti_purchase_line.uom_id,
                    prakruti_purchase_line.remarks,
                    prakruti_purchase_line.hsn_code,
                    prakruti_purchase_line.discount_id,
                    prakruti_purchase_line.cgst_id,
                    prakruti_purchase_line.sgst_id,
                    prakruti_purchase_line.igst_id 
            FROM 
                    prakruti_purchase_line JOIN 
                    prakruti_purchase_order ON 
                    prakruti_purchase_order.id = prakruti_purchase_line.purchase_line_id 
            WHERE 
                    prakruti_purchase_order.id = $1 AND 
                    prakruti_purchase_order.pr_no = $2 AND 
                    prakruti_purchase_line.purchase_line_id = $1 
        ) AS b 
    WHERE 
            a.requisition_line_id = b.requisition_line_id ;
	
    UPDATE prakruti_purchase_order SET revise_id = NULL,revise_remarks = '' WHERE id = $1;

ELSE
    RETURN 'Record Cannot Be Revised';
END IF;	
	
	
RETURN qty;
                                
END;
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION public.revise_purchase_order(integer,character varying)
  OWNER TO odoo;
  
CREATE OR REPLACE FUNCTION public.sales_dispatch_list_products(integer,integer)
  RETURNS integer AS
$BODY$
DECLARE qty   integer;
BEGIN

qty = 0;

--FOR LISTING THE PRODUCTS i.e., FOR -> action_list_products
INSERT INTO prakruti_dispatch_line
    (
    create_uid,
    write_uid,
    create_date,
    write_date,
    product_id,
    uom_id,
    specification_id,
    description,
    ordered_qty,
    scheduled_date,
    scheduled_qty,
    previous_dispatch_qty,
    dispatched_qty,
    unit_price,
    total,
    total_dispatch_qty,
    total_scheduled_qty,
    remaining_dispatched_qty,
    hsn_code,
    amount,
    discount_id,
    discount,
    taxable_value,
    proportionate_amount_to_products,
    taxable_value_with_charges,
    gst_rate,
    cgst_id,
    cgst_value,
    cgst_amount,
    sgst_id,
    sgst_value,
    sgst_amount,
    igst_id,
    igst_value,
    igst_amount,
    main_id,
    dispatch_status,
    send_status,
    qc_flag,
    send_flag,
    state
    )
SELECT
    create_uid,
    write_uid,
    create_date,
    write_date,
    product_id,
    uom_id,
    specification_id,
    description,
    ordered_qty,
    scheduled_date,
    scheduled_qty,
    previous_dispatch_qty,
    dispatched_qty,
    unit_price,
    total,
    total_dispatch_qty,
    total_scheduled_qty,
    remaining_dispatched_qty,
    hsn_code,
    amount,
    discount_id,
    discount,
    taxable_value,
    proportionate_amount_to_products,
    taxable_value_with_charges,
    gst_rate,
    cgst_id,
    cgst_value,
    cgst_amount,
    sgst_id,
    sgst_value,
    sgst_amount,
    igst_id,
    igst_value,
    igst_amount,
    main_id,
    dispatch_status,
    send_status,
    qc_flag,
    send_flag,
    state
FROM(
    SELECT 
        prakruti_sales_order.create_uid,
        prakruti_sales_order.write_uid,
        prakruti_sales_order.create_date,
        prakruti_sales_order.write_date,
        product_id,
        uom_id,
        specification_id,
        description,
        quantity AS ordered_qty,
        scheduled_date,        
        scheduled_qty,
        dispatched_qty AS previous_dispatch_qty,
        (total_scheduled_qty - total_dispatched_qty) AS dispatched_qty,
        unit_price,
        total,
        total_dispatched_qty AS total_dispatch_qty,
        total_scheduled_qty,
        (total_scheduled_qty - total_dispatched_qty) AS remaining_dispatched_qty,
        hsn_code,
        amount,
        discount_id,
        discount,
        taxable_value,
        prakruti_sales_order_item.proportionate_amount_to_products,
        taxable_value_with_charges,
        gst_rate,
        cgst_id,
        cgst_value,
        cgst_amount,
        sgst_id,
        sgst_value,
        sgst_amount,
        igst_id,
        igst_value,
        igst_amount,
        prakruti_dispatch.id AS main_id,
        'Not Yet Dispatched' AS dispatch_status,
        'dispatch' AS send_status,
        0 AS qc_flag,
        0 AS send_flag,
        'draft' as state
    FROM 
        prakruti_sales_order_item JOIN 
        prakruti_sales_order ON 
        prakruti_sales_order.id=prakruti_sales_order_item.main_id JOIN
        prakruti_dispatch ON 
        prakruti_sales_order.id = prakruti_dispatch.order_no
    WHERE 
        prakruti_sales_order_item.main_id = CAST($1 AS INTEGER) AND 
        total_dispatched_qty != quantity AND 
        (total_scheduled_qty - total_dispatched_qty) > 0 AND
        prakruti_dispatch.id = $2
    ) AS sales_order_selection_table ;
	
	
UPDATE 
	prakruti_dispatch 
SET 
	flag_count_display_product = 1 
WHERE 
	prakruti_dispatch.id = cast($2 AS INTEGER);
	
RETURN qty;
                                
END;
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION public.sales_dispatch_list_products(integer,integer)
  OWNER TO odoo;
  
CREATE OR REPLACE FUNCTION public.sales_dispatch_to_qc(integer,character varying)
  RETURNS character varying AS
$BODY$
DECLARE

store_status INTEGER;
total_items INTEGER;
dispatch_line INTEGER;
qty INTEGER;

BEGIN

qty = 0;
store_status = 0;
total_items = 0;
dispatch_line = 0;

SELECT 
	count(id) INTO store_status 
FROM 
	prakruti_dispatch_line 
WHERE 
	main_id = $1  AND 
	send_status = 'dispatch' AND 
	dispatch_status='Not Yet Dispatched';
	
	
SELECT 
	count(id) INTO total_items 
FROM 
	prakruti_dispatch_line 
WHERE 
	send_status = 'dispatch' AND 
	main_id = $1  AND 
	qc_flag=0;


IF (store_status = total_items) THEN

    INSERT INTO prakruti_quality_check
        (
        create_uid,
        write_uid,
        create_date,
        write_date,
        dispatch_no,
        dispatch_date,
        dispatch_to,
        order_no,
        order_date,
        customer_id,
        terms,
        inquiry_no,
        inquiry_date,
        quotation_no,
        quotation_date,
        shipping_id,
        billing_id,
        remarks,
        requested_id,
        order_id,
        quotation_id,
        dispatch_id,
        reference_no,
        state,
        qc_date,
        flag_rejected_count,
        coming_from,
        revision_no,
        company_id,
        reference_date 
        )
    SELECT
        create_uid,
        write_uid,
        create_date,
        write_date,
        dispatch_no,
        dispatch_date,
        dispatch_to,
        order_no,
        order_date,
        customer_id,
        terms,
        inquiry_no,
        inquiry_date,
        quotation_no,
        quotation_date,
        shipping_id,
        billing_id,
        remarks,
        requested_id,
        order_id,
        quotation_id,
        dispatch_id,
        reference_no,
        state,
        qc_date,
        flag_rejected_count,
        coming_from,
        revision_no,
        company_id,
        reference_date
    FROM(
        SELECT
            create_uid,
            write_uid,
            create_date,
            write_date,
            dispatch_no,
            dispatch_date,
            dispatch_to,
            order_no,
            order_date,
            customer_id,
            terms,
            inquiry_no,
            inquiry_date,
            quotation_no,
            quotation_date,
            shipping_id,
            billing_id,
            remarks,
            requested_id,
            order_id,
            quotation_id,
            dispatch_id,
            reference_no,
            'draft' AS state,
            create_date AS qc_date,
            1 AS flag_rejected_count,
            'qc_check' AS coming_from,
            revision_no,
            company_id,
            reference_date
        FROM
            prakruti_dispatch
        WHERE
            prakruti_dispatch.id = $1
        ) AS prakruti_dispatch_table;

    INSERT INTO prakruti_process_quality_control_qa
        (
        create_uid,
        write_uid,
        create_date,
        write_date,
        dispatch_no,
        dispatch_date,
        dispatch_to,
        order_no,
        order_date,
        customer_id,
        requested_id,
        order_id,
        quotation_id,
        dispatch_id,
        reference_no,
        qc_check_flag,
        coming_from,
        state,
        qc_date,
        flag_rejected_count,
        revision_no,
        reference_date,
        terms,
        company_id,
        remarks   
        )
    SELECT        
        create_uid,
        write_uid,
        create_date,
        write_date,
        dispatch_no,
        dispatch_date,
        dispatch_to,
        order_no,
        order_date,
        customer_id,
        requested_id,
        order_id,
        quotation_id,
        dispatch_id,
        reference_no,
        qc_check_flag,
        coming_from,
        state,
        qc_date,
        flag_rejected_count,
        revision_no,
        reference_date,
        terms,
        company_id,
        remarks   
    FROM(
    SELECT   
        create_uid,
        write_uid,
        create_date,
        write_date,     
        dispatch_no,
        dispatch_date,
        dispatch_to,
        order_no,
        order_date,
        customer_id,
        requested_id,
        order_id,
        quotation_id,
        dispatch_id,
        reference_no,
        qc_check_flag,
        'dispatch' AS coming_from,
        'draft' AS state,
        create_date AS qc_date,
        1 AS flag_rejected_count,
        revision_no,
        reference_date,
        terms,
        company_id,
        remarks   
    FROM
        prakruti_dispatch
    WHERE
        prakruti_dispatch.id = $1
        ) AS prakruti_dispatch_table;
        
    SELECT 
            count(prakruti_dispatch_line.id) INTO dispatch_line 
    FROM 
            prakruti_dispatch_line 
    WHERE 
            main_id = $1 AND 
            send_status = 'dispatch' AND 
            qc_flag=0;
            
    IF (dispatch_line > 0) THEN

        INSERT INTO prakruti_dispatch_qc_batch_list_line
            (
            create_uid,
            write_uid,
            create_date,
            write_date,            
            dispatch_qc_id,            
            product_id,
            uom_id,
            dispatched_qty,
            batch_no,
            packing_details,
            batch_size,
            batch_qty,
            remarks,
            dispatch_batch_line_id
            )
        SELECT
            create_uid,
            write_uid,
            create_date,
            write_date,            
            dispatch_qc_id,            
            product_id,
            uom_id,
            dispatched_qty,
            batch_no,
            packing_details,
            batch_size,
            batch_qty,
            remarks,
            dispatch_batch_line_id
        FROM(
            SELECT 
                prakruti_dispatch_batch_list_line.create_uid,
                prakruti_dispatch_batch_list_line.write_uid,
                prakruti_dispatch_batch_list_line.create_date,
                prakruti_dispatch_batch_list_line.write_date,                
                prakruti_dispatch_batch_list_line.product_id,
                prakruti_dispatch_batch_list_line.uom_id,
                prakruti_dispatch_batch_list_line.dispatched_qty,
                prakruti_dispatch_batch_list_line.batch_no,                
                prakruti_dispatch_batch_list_line.packing_details,                
                prakruti_dispatch_batch_list_line.batch_size,
                prakruti_dispatch_batch_list_line.batch_qty,
                prakruti_dispatch_batch_list_line.remarks,
                prakruti_dispatch_batch_list_line.id AS dispatch_batch_line_id,
                prakruti_dispatch.dispatch_no
            FROM 
                prakruti_dispatch_batch_list_line JOIN
                prakruti_dispatch ON 
                prakruti_dispatch_batch_list_line.dispatch_id = prakruti_dispatch.id 
            WHERE 
                prakruti_dispatch_batch_list_line.dispatch_id = $1 AND
                prakruti_dispatch.dispatch_no = $2
                ) AS a JOIN (
                SELECT 
                    prakruti_quality_check.id AS dispatch_qc_id,
                    prakruti_quality_check.dispatch_no
                FROM  
                    prakruti_quality_check
                WHERE
                    prakruti_quality_check.dispatch_no = $2 
                ORDER BY id desc limit 1
                            ) AS b ON a.dispatch_no = b.dispatch_no;

        INSERT INTO prakruti_quality_check_line
            (
            create_uid,
            write_uid,
            create_date,
            write_date,
            product_id,
            uom_id,
            description,
            specification_id,
            ordered_qty,
            dispatched_qty,
            remarks,
            unit_price,
            batch_no,
            total,
            state,
            dispatch_line_grid_id,
            check_line_id,
            qc_flag,
            status,
            batch_list
            )
        SELECT
            create_uid,
            write_uid,
            create_date,
            write_date,
            product_id,
            uom_id,
            description,
            specification_id,
            ordered_qty,
            dispatched_qty,
            remarks,
            unit_price,
            batch_no,
            total,
            state,
            dispatch_line_grid_id,
            check_line_id,
            qc_flag,
            status,
            batch_list
        FROM(
            SELECT 
                prakruti_dispatch_line.create_uid,
                prakruti_dispatch_line.write_uid,
                prakruti_dispatch_line.create_date,
                prakruti_dispatch_line.write_date,
                prakruti_dispatch_line.id AS dispatch_line_grid_id,
                prakruti_dispatch_line.product_id,
                prakruti_dispatch_line.description,
                prakruti_dispatch_line.uom_id,
                prakruti_dispatch_line.specification_id,
                prakruti_dispatch_line.ordered_qty,
                prakruti_dispatch_line.dispatched_qty,
                prakruti_dispatch_line.unit_price,
                prakruti_dispatch_line.remarks,
                prakruti_dispatch_line.batch_no,
                prakruti_dispatch_line.total,
                prakruti_dispatch_line.send_flag,
                'draft' AS state,
                prakruti_dispatch.dispatch_no,
                0 AS qc_flag,
                'rejected' AS status,
                prakruti_dispatch_line.batch_list
            FROM 
                prakruti_dispatch_line JOIN
                prakruti_dispatch ON 
                prakruti_dispatch_line.main_id = prakruti_dispatch.id 
            WHERE 
                prakruti_dispatch_line.main_id = $1 AND 
                prakruti_dispatch_line.send_status = 'dispatch'  AND 
                prakruti_dispatch_line.qc_flag=0 AND
                prakruti_dispatch.dispatch_no = $2
                ) AS a JOIN (
                SELECT 
                    prakruti_quality_check.id AS check_line_id,
                    prakruti_quality_check.dispatch_no
                FROM  
                    prakruti_quality_check
                WHERE
                    prakruti_quality_check.dispatch_no = $2 
                ORDER BY id desc limit 1
                            ) AS b ON a.dispatch_no = b.dispatch_no;

        INSERT INTO prakruti_dispatch_qa_batch_list_line
            (
            create_uid,
            write_uid,
            create_date,
            write_date,            
            dispatch_qa_id,            
            product_id,
            uom_id,
            dispatched_qty,
            batch_no,
            packing_details,
            batch_size,
            batch_qty,
            remarks,
            dispatch_batch_line_id
            )
        SELECT
            create_uid,
            write_uid,
            create_date,
            write_date,            
            dispatch_qa_id,            
            product_id,
            uom_id,
            dispatched_qty,
            batch_no,
            packing_details,
            batch_size,
            batch_qty,
            remarks,
            dispatch_batch_line_id
        FROM(
            SELECT 
                prakruti_dispatch_batch_list_line.create_uid,
                prakruti_dispatch_batch_list_line.write_uid,
                prakruti_dispatch_batch_list_line.create_date,
                prakruti_dispatch_batch_list_line.write_date,                
                prakruti_dispatch_batch_list_line.product_id,
                prakruti_dispatch_batch_list_line.uom_id,
                prakruti_dispatch_batch_list_line.dispatched_qty,
                prakruti_dispatch_batch_list_line.batch_no,                
                prakruti_dispatch_batch_list_line.packing_details,                
                prakruti_dispatch_batch_list_line.batch_size,
                prakruti_dispatch_batch_list_line.batch_qty,
                prakruti_dispatch_batch_list_line.remarks,
                prakruti_dispatch_batch_list_line.id AS dispatch_batch_line_id,
                prakruti_dispatch.dispatch_no
            FROM 
                prakruti_dispatch_batch_list_line JOIN
                prakruti_dispatch ON 
                prakruti_dispatch_batch_list_line.dispatch_id = prakruti_dispatch.id 
            WHERE 
                prakruti_dispatch_batch_list_line.dispatch_id = $1 AND
                prakruti_dispatch.dispatch_no = $2
                ) AS a JOIN (
                SELECT 
                    prakruti_process_quality_control_qa.id AS dispatch_qa_id,
                    prakruti_process_quality_control_qa.dispatch_no
                FROM  
                    prakruti_process_quality_control_qa
                WHERE
                    prakruti_process_quality_control_qa.dispatch_no = $2 
                ORDER BY id desc limit 1
                            ) AS b ON a.dispatch_no = b.dispatch_no;

        INSERT INTO prakruti_process_quality_control_line_qa
            (
            create_uid,
            write_uid,
            create_date,
            write_date,
            product_id,
            uom_id,
            description,
            specification_id,
            ordered_qty,
            dispatched_qty,
            rejected_qty,
            accepted_qty,
            remarks,
            batch_no,
            send_flag,
            state,
            dispatch_line_grid_id,
            qc_check_line_id,
            status,
            qc_flag,
            batch_list
            )
        SELECT
            create_uid,
            write_uid,
            create_date,
            write_date,
            product_id,
            uom_id,
            description,
            specification_id,
            ordered_qty,
            dispatched_qty,
            dispatched_qty AS rejected_qty,
            accepted_qty,
            remarks,
            batch_no,
            send_flag,
            state,
            dispatch_line_grid_id,
            qc_check_line_id,
            status,
            qc_flag,
            batch_list
        FROM(
            SELECT 
                prakruti_dispatch_line.create_uid,
                prakruti_dispatch_line.write_uid,
                prakruti_dispatch_line.create_date,
                prakruti_dispatch_line.write_date,
                prakruti_dispatch_line.id AS dispatch_line_grid_id,
                prakruti_dispatch_line.product_id,
                prakruti_dispatch_line.description,
                prakruti_dispatch_line.uom_id,
                prakruti_dispatch_line.specification_id,
                prakruti_dispatch_line.ordered_qty,
                prakruti_dispatch_line.dispatched_qty,
                COALESCE(prakruti_dispatch_line.accepted_qty,0) as accepted_qty,
                COALESCE(prakruti_dispatch_line.rejected_qty,0) as rejected_qty,
                prakruti_dispatch_line.remarks,
                prakruti_dispatch_line.batch_no,
                prakruti_dispatch_line.send_flag,
                'draft' AS state,
                prakruti_dispatch.dispatch_no,
                'rejected' AS status,
                0 AS qc_flag,
                prakruti_dispatch_line.batch_list
            FROM 
                prakruti_dispatch_line JOIN
                prakruti_dispatch ON 
                prakruti_dispatch_line.main_id = prakruti_dispatch.id
            WHERE 
                prakruti_dispatch_line.main_id = $1 AND 
                prakruti_dispatch_line.send_status = 'dispatch' AND 
                prakruti_dispatch_line.qc_flag=0 AND
                prakruti_dispatch.dispatch_no = $2
                ) AS a JOIN (
                SELECT 
                    prakruti_process_quality_control_qa.id AS qc_check_line_id,
                    prakruti_process_quality_control_qa.dispatch_no
                FROM  
                    prakruti_process_quality_control_qa
                WHERE
                    prakruti_process_quality_control_qa.dispatch_no = $2 
                ORDER BY id desc limit 1
                            ) AS b ON a.dispatch_no = b.dispatch_no;
        
        
        
        UPDATE 
            prakruti_dispatch_batch_list_line 
        SET 
            send_to_qc_qa_flag = 1 
        WHERE 
            dispatch_id = $1 AND 
            send_to_qc_qa_flag = 0;
        
        UPDATE  
                prakruti_dispatch_line 
        SET 
                qc_flag=1 
        WHERE  
                send_status = 'dispatch' AND 
                prakruti_dispatch_line.main_id = $1;
                
        UPDATE  
                prakruti_dispatch 
        SET 
                state = 'sent_to_qc' 
        WHERE 
                prakruti_dispatch.id = $1;        
                
                
    ELSE
         RETURN 'Please select the Status as Dispatch...';
    END IF;
    
ELSE
     RETURN 'Not Enough Stock (OR)... No Any Products To Send For Further Process';
END IF;

RETURN qty;

END;
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION public.sales_dispatch_to_qc(integer,character varying)
  OWNER TO odoo;
  
CREATE OR REPLACE FUNCTION public.sales_order_to_production_slip(integer,character varying,character varying,character varying)
  RETURNS character varying AS
$BODY$
DECLARE 
no_of_open_line INTEGER;
no_of_req_date_entry_line INTEGER;
balance_line_count INTEGER;
qty INTEGER;
BEGIN


no_of_open_line = 0;
no_of_req_date_entry_line = 0;
balance_line_count = 0;
qty = 0;

SELECT 
    count(id) INTO no_of_open_line 
FROM 
    prakruti_sales_order_item 
WHERE 
    total_scheduled_qty != quantity AND 
    main_id = $1;

SELECT 
    count(id) INTO no_of_req_date_entry_line 
FROM 
    prakruti_sales_order_item 
WHERE 
    total_scheduled_qty != quantity AND 
    cast(extract (month from req_date) as integer) > 0 AND 
    main_id = $1;
    
IF (no_of_open_line = no_of_req_date_entry_line) THEN
    SELECT 
        count(id) INTO balance_line_count 
    FROM 
        prakruti_sales_order_item 
    WHERE 
        total_scheduled_qty != quantity AND 
        main_id = $1;
    IF balance_line_count > 0 THEN
        INSERT INTO prakruti_production_slip
            (
            create_uid,
            write_uid,
            create_date,
            write_date,
            order_no,
            order_date,
            product_type_id,
            produc_remarks,
            customer_id,
            terms,
            inquiry_no,
            inquiry_date,
            quotation_no,
            quotation_date,
            remarks,
            requested_id,
            quotation_id,
            order_id,
            reference_no,
            slip_no,
            slip_date,
            req_no_control_id,
            state,
            all_send_to_request,
            all_send_to_planning,
            revise_no,
            is_revise,
            revise_remarks_update,
            company_id,
            revise_flag,
            slip_type,
            revision_no,
            reference_date,
            po_no
            )
        SELECT
            create_uid,
            write_uid,
            create_date,
            write_date,
            order_no,
            order_date,
            product_type_id,
            produc_remarks,
            customer_id,
            terms,
            inquiry_no,
            inquiry_date,
            quotation_no,
            quotation_date,
            remarks,
            requested_id,
            quotation_id,
            order_id,
            reference_no,
            slip_no,
            slip_date,
            req_no_control_id,
            state,
            all_send_to_request,
            all_send_to_planning,
            revise_no,
            is_revise,
            revise_remarks_update,
            company_address,
            revise_flag,
            slip_type,
            revision_no,
            reference_date,
            po_no
        FROM(
        SELECT 
            create_uid,
            write_uid,
            create_date,
            write_date,
            order_no,
            order_date,
            product_type_id,
            remarks AS produc_remarks,
            customer_id,
            terms,
            inquiry_no,
            inquiry_date,
            quotation_no,
            quotation_date,
            remarks,
            requested_id,
            quotation_id,
            order_id,
            reference_no,
            'New' AS slip_no,
            create_date AS slip_date,
            0 AS req_no_control_id,
            'slip_request' AS state,
            0 AS all_send_to_request,
            0 AS all_send_to_planning,
            0 AS revise_no,
            False AS is_revise,
            '-' AS revise_remarks_update,
            company_address,
            0 AS revise_flag,
            'based_on_order' AS slip_type,
            revision_no,
            reference_date,
            po_no
        FROM
            prakruti_sales_order 
        WHERE
            prakruti_sales_order.id =$1           
            ) AS a;            
            
            
        INSERT INTO prakruti_production_slip_line
                    (
                    create_uid,
                    write_uid,
                    create_date,
                    write_date,
                    product_id,
                    quantity,
                    balance_qty,
                    uom_id,
                    description,
                    specification_id,
                    req_date,
                    unit_price,
                    total,
                    remarks,
                    so_line_grid_id,
                    total_ordered_qty,
                    ordered_qty,
                    total_scheduled_qty,
                    total_dispatch_qty,
                    inquiry_line_id,
                    main_id,
                    scheduled_qty,
                    bmr_status,
                    bmr_flag,
                    planning_status,
                    planning_flag,
                    planning_done,
                    slip_type
                    )
                SELECT
                    create_uid,
                    write_uid,
                    create_date,
                    write_date,
                    product_id,
                    quantity,
                    balance_qty,
                    uom_id,
                    description,
                    specification_id,
                    req_date,
                    unit_price,
                    total,
                    remarks,
                    so_line_grid_id,
                    total_ordered_qty,
                    ordered_qty,
                    total_scheduled_qty,
                    total_dispatch_qty,
                    inquiry_line_id,
                    main_id,
                    scheduled_qty,
                    bmr_status,
                    bmr_flag,
                    planning_status,
                    planning_flag,
                    planning_done,
                    slip_type
                FROM(
                    SELECT
                        prakruti_sales_order_item.create_uid,
                        prakruti_sales_order_item.write_uid,
                        prakruti_sales_order_item.create_date,
                        prakruti_sales_order_item.write_date,
                        prakruti_sales_order_item.product_id,
                        prakruti_sales_order_item.balance_qty AS quantity,
                        prakruti_sales_order_item.balance_qty,
                        prakruti_sales_order_item.uom_id,
                        prakruti_sales_order_item.description,
                        prakruti_sales_order_item.specification_id,
                        prakruti_sales_order_item.req_date,
                        prakruti_sales_order_item.unit_price,
                        prakruti_sales_order_item.total,
                        prakruti_sales_order_item.remarks,
                        prakruti_sales_order_item.id AS so_line_grid_id,
                        prakruti_sales_order_item.quantity AS total_ordered_qty,
                        prakruti_sales_order_item.quantity AS ordered_qty,
                        prakruti_sales_order_item.total_scheduled_qty,
                        prakruti_sales_order_item.total_dispatched_qty AS total_dispatch_qty,
                        prakruti_sales_order_item.inquiry_line_id,
                        0 AS scheduled_qty,
                        0 AS total_dispatched_qty,
                        True AS bmr_status,
                        0 AS bmr_flag,
                        True AS planning_status,
                        0 AS planning_flag,
                        False AS planning_done,
                        'based_on_order' AS slip_type,
                        prakruti_sales_order.order_no
                        
                    FROM 
                        prakruti_sales_order_item JOIN
                        prakruti_sales_order ON
                        prakruti_sales_order_item.main_id = prakruti_sales_order.id
                    WHERE 
                        prakruti_sales_order_item.total_scheduled_qty != prakruti_sales_order_item.quantity AND 
                        prakruti_sales_order_item.main_id = $1 AND
                        prakruti_sales_order.order_no = $4 AND 
                        prakruti_sales_order.id = $1
                        ) AS a JOIN (
                        SELECT 
                            prakruti_production_slip.id AS main_id,
                            prakruti_production_slip.order_no
                        FROM  
                            prakruti_production_slip
                        WHERE
                            prakruti_production_slip.order_no = $4 
                        ORDER BY id desc limit 1
                                    ) AS b ON a.order_no = b.order_no;
            
        UPDATE  
            prakruti_sales_order 
        SET 
            state = 'slip_request' 
        WHERE 
            prakruti_sales_order.id = $1;
            
        UPDATE  
            prakruti_sales_inquiry 
        SET 
            state = 'slip_request' 
        WHERE 
            prakruti_sales_inquiry.inquiry_no = $2 AND 
            prakruti_sales_inquiry.state != 'rejected';
            
        UPDATE 
            prakruti_sales_quotation 
        SET 
            state = 'slip_request' 
        WHERE 
            prakruti_sales_quotation.inquiry_no = $2 AND 
            prakruti_sales_quotation.quotation_no = $3 AND 
            (prakruti_sales_quotation.state != 'short_close' OR prakruti_sales_quotation.state != 'rejected');            
            
    ELSE
        RETURN 'No Item to give to an Production';
    END IF;
        
ELSE
    RETURN 'Please Enter Required Date...';
END IF;
    
    


RETURN qty;
                                
END;
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION public.sales_order_to_production_slip(integer,character varying,character varying,character varying)
  OWNER TO odoo;
  
CREATE OR REPLACE FUNCTION public.short_close_purchase(integer,character varying,character varying,character varying,character varying)
  RETURNS integer AS
$BODY$
DECLARE qty   integer;
BEGIN

qty = 0;


UPDATE  
	prakruti_purchase_order 
SET 
	state = 'short_close' 
WHERE 
	prakruti_purchase_order.id = CAST($1 AS INTEGER);

UPDATE  
	prakruti_purchase_order_quotation_analysis 
SET 
	state = 'short_close' 
WHERE 
	prakruti_purchase_order_quotation_analysis.pr_no = $2 AND 
	prakruti_purchase_order_quotation_analysis.qa_no = $3;

UPDATE  
	prakruti_purchase_order_quotation 
SET 
	state = 'short_close' 
WHERE 
	prakruti_purchase_order_quotation.pr_no = $2 AND 
	prakruti_purchase_order_quotation.qo_no = $4;	
	

UPDATE  
	prakruti_price_request 
SET 
	state = 'short_close' 
WHERE 
	prakruti_price_request.request_no = $2 AND 
	prakruti_price_request.inquiry_no = $5;
	
-- REQUISITION ANALYSIS SCREEN GRID UPDATE

UPDATE  
	prakruti_purchase_requistion_analysis 
SET 
	state = 'requisition_analysis' 
WHERE 
	prakruti_purchase_requistion_analysis.request_no = $2 AND
	prakruti_purchase_requistion_analysis.state != 'rejected';
	
UPDATE  
	prakruti_purchase_requistion_analysis_line 
SET 
	short_close_status = 'Yes',
	send_to = ' ',
	send_status = 0,
	status = 'hold'
FROM(
	SELECT
		prakruti_purchase_line.product_id,
		prakruti_purchase_line.requisition_line_id
	FROM
		prakruti_purchase_line JOIN
		prakruti_purchase_order ON
		prakruti_purchase_line.purchase_line_id = prakruti_purchase_order.id
	WHERE
		prakruti_purchase_order.id = $1 AND
		prakruti_purchase_order.pr_no = $2 AND
		prakruti_purchase_line.purchase_line_id = $1
    ) AS purchase_order_grid_line
WHERE 
	prakruti_purchase_requistion_analysis_line.requisition_line_id = purchase_order_grid_line.requisition_line_id AND
	prakruti_purchase_requistion_analysis_line.product_id = purchase_order_grid_line.product_id AND
	prakruti_purchase_requistion_analysis_line.status != 'rejected';
	
RETURN qty;
                                
END;
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION public.short_close_purchase(integer,character varying,character varying,character varying,character varying)
  OWNER TO odoo;
  
CREATE OR REPLACE FUNCTION public.short_close_sales(integer,character varying,character varying)
  RETURNS integer AS
$BODY$
DECLARE qty   integer;
BEGIN

qty = 0;

UPDATE  
	prakruti_sales_order 
SET 
	state = 'short_close' 
WHERE 
	prakruti_sales_order.id = $1 AND
	prakruti_sales_order.state != 'rejected' AND 
	prakruti_sales_order.inquiry_no = $2 AND 
	prakruti_sales_order.quotation_no = $3;

UPDATE  
	prakruti_sales_quotation 
SET 
	state = 'short_close' 
WHERE 
	prakruti_sales_quotation.inquiry_no = $2 AND
	prakruti_sales_quotation.state != 'rejected' AND
	prakruti_sales_quotation.quotation_no = $3;

UPDATE  
	prakruti_sales_inquiry 
SET 
	state = 'inquiry' 
WHERE 
	prakruti_sales_inquiry.inquiry_no = $2 AND
	prakruti_sales_inquiry.state != 'rejected';

UPDATE  
	prakruti_production_slip 
SET 
	state = 'short_close' 
WHERE 
	prakruti_production_slip.inquiry_no = $2 AND
	prakruti_production_slip.state != 'rejected' AND
	prakruti_production_slip.quotation_no = $3;
	
RETURN qty;
                                
END;
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION public.short_close_sales(integer,character varying,character varying)
  OWNER TO odoo;
  
  
CREATE OR REPLACE FUNCTION public.stock_adjustments(integer)
  RETURNS integer AS
$BODY$
BEGIN

INSERT INTO prakruti_stock
        (
        product_id,
        uom_id,
        entered_date,
        location_id,
        origin,
        company_id,
        --grn_id,
        --issue_id,
        --batch_id,
        --dispatch_id,
        --slip_id,
        adjustment_id,
        --inward_id,
        --sales_grn_id,
        virtual_qty,
        product_qty,
        --reserved_qty,
        --customer_id,
        --vendor_id,
        --remarks,
        create_date,
        create_uid,
        write_date,
        write_uid
        )

SELECT 
        product_id,
        uom_id,
        entered_date,
        location_id,
        origin,
        company_id,
        --grn_id,
        --issue_id,
        --batch_id,
        --dispatch_id,
        --slip_id,
        adjustment_id,
        --inward_id,
        --sales_grn_id,
        virtual_qty,
        product_qty,
        --reserved_qty,
        --customer_id,
        --vendor_id,
        --remarks,
        create_date,
        create_uid,
        write_date,
        write_uid
FROM(
    SELECT
        prakruti_stock_adjustments_line.product_id,
        prakruti_stock_adjustments_line.uom_id, 
        prakruti_stock_adjustments.write_date AS entered_date, 
        prakruti_stock_adjustments.location_id,
        prakruti_stock_adjustments.adjustment_name AS origin,
        prakruti_stock_adjustments.company_id, 
        --prakruti_stock_adjustments.id AS grn_id, 
        --prakruti_stock_adjustments.issue_id, 
        --prakruti_stock_adjustments.batch_id, 
        --prakruti_stock_adjustments.dispatch_id, 
        --prakruti_stock_adjustments.slip_id, 
        prakruti_stock_adjustments.id AS adjustment_id, 
        --prakruti_stock_adjustments.inward_id, 
        --prakruti_stock_adjustments.sales_grn_id,
        prakruti_stock_adjustments_line.real_qty AS virtual_qty,                            
        prakruti_stock_adjustments_line.real_qty AS product_qty, 
        --prakruti_stock_adjustments.reserved_qty, 
        --prakruti_stock_adjustments.customer_id, 
        --prakruti_stock_adjustments.vendor_id, 
        --prakruti_stock_adjustments.remarks,
        prakruti_stock_adjustments.write_date AS create_date,
        prakruti_stock_adjustments.write_date AS write_date,
        prakruti_stock_adjustments.write_uid AS write_uid,
        prakruti_stock_adjustments.create_uid AS create_uid
    FROM 
        prakruti_stock_adjustments JOIN
        prakruti_stock_adjustments_line ON 
        prakruti_stock_adjustments.id = prakruti_stock_adjustments_line.adjustment_id 
    WHERE
        prakruti_stock_adjustments_line.adjustment_id = $1
    ) AS C;


RETURN 0;
                                
END;
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION public.stock_adjustments(integer)
  OWNER TO odoo;
  
CREATE OR REPLACE FUNCTION public.stock_dispatch(integer,character varying,integer,character varying)
  RETURNS character varying AS
$BODY$
DECLARE

qty INTEGER;
send_flag_status INTEGER;
flag_count_accepted INTEGER;
flag_count_par_rejected INTEGER;
number_of_pack INTEGER;
pack_style INTEGER;
packing_detail INTEGER;
accept_line INTEGER;
quality_check_flag INTEGER;
close_line INTEGER;
total_line INTEGER;
extra_quantity_line INTEGER;
all_close_line INTEGER;
all_total_line INTEGER;
all_extra_quantity_line INTEGER;
flag_line INTEGER;
totaled_line INTEGER;
reject_line INTEGER;
total_items INTEGER;
count_flag INTEGER;
hold_flag INTEGER;
BEGIN

qty = 0;
send_flag_status = 0;
flag_count_accepted = 0;
flag_count_par_rejected = 0;
number_of_pack = 0;
pack_style = 0;
packing_detail = 0;
accept_line = 0;
quality_check_flag = 0;
close_line = 0;
total_line = 0;
extra_quantity_line = 0;
all_close_line = 0;
all_total_line = 0;
all_extra_quantity_line = 0;
flag_line = 0;
totaled_line = 0;
reject_line = 0;
total_items=0;
count_flag =0;
hold_flag =0;
SELECT 
	count(id) INTO send_flag_status 
FROM 
	prakruti_dispatch_line 
WHERE 
	main_id = $1 AND 
	store_qty >= dispatched_qty AND 
	send_status = 'dispatch' AND 
	dispatch_status='Not Yet Dispatched' AND 
	send_flag = 0 AND 
	qc_flag=1;	
SELECT 
	count(id) INTO total_items 
FROM 
	prakruti_dispatch_line 
WHERE 
	send_status = 'dispatch' AND 
        dispatch_status='Not Yet Dispatched' AND 
	main_id = $1  AND 
	qc_flag=1;


IF (send_flag_status = total_items) THEN

    SELECT 
        flag_count_accept INTO flag_count_accepted
    FROM 
        prakruti_dispatch 
    WHERE 
        prakruti_dispatch.id = $1;
        
    SELECT 
        flag_count_par_reject INTO flag_count_par_rejected
    FROM 
        prakruti_dispatch 
    WHERE 
        prakruti_dispatch.id = $1;
        
    IF (flag_count_accepted > 0 OR flag_count_par_rejected > 0) THEN
        
        SELECT 
            no_of_packings INTO number_of_pack 
        FROM 
            prakruti_dispatch_line 
        WHERE 
            main_id = $1 AND 
            store_qty >= dispatched_qty AND 
            send_status = 'dispatch' AND 
            dispatch_status='Not Yet Dispatched' AND 
            send_flag = 0;
        
        SELECT 
            packing_style INTO pack_style 
        FROM 
            prakruti_dispatch_line 
        WHERE 
            main_id = $1 AND 
            store_qty >= dispatched_qty AND 
            send_status = 'dispatch' AND 
            dispatch_status='Not Yet Dispatched' AND 
            send_flag = 0;
        
        SELECT
            SUM(LENGTH(packing_details)) INTO packing_detail 
        FROM 
            prakruti_dispatch_line 
        WHERE 
            main_id = $1 AND 
            store_qty >= dispatched_qty AND 
            send_status = 'dispatch' AND 
            dispatch_status='Not Yet Dispatched' AND 
            send_flag = 0;
        
            
        IF (packing_detail > 0) THEN            
            
            INSERT INTO prakruti_sales_invoice
                    (
                    po_no,
                    dispatch_no,
                    dispatch_date,
                    order_no,
                    order_date,
                    customer_id,
                    shipping_id,
                    billing_id,
                    product_type_id,
                    remarks,
                    vehicle_no,
                    state,
                    cash_amount,
                    cash_remarks,
                    cheque_amount,
                    cheque_no,
                    cheque_remarks,
                    draft_amount,
                    draft_no,
                    draft_remarks,
                    advance_payment_type,
                    any_adv_payment,
                    requested_id,
                    order_id,
                    quotation_id,
                    dispatch_id,
                    slip_no,
                    reference_no,
                    reference_date,
                    freight_charges,
                    loading_and_packing_charges,
                    insurance_charges,
                    other_charges,
                    invoice_date,
                    invoice_type,
                    req_no_control_id,
                    invoice_no,
                    type_of_gst,
                    terms,
                    company_address,
                    revision_no
                    )
                SELECT                
                    po_no,
                    dispatch_no,
                    dispatch_date,
                    order_no,
                    order_date,
                    customer_id,
                    shipping_id,
                    billing_id,
                    product_type_id,
                    remarks,
                    vehicle_no,
                    state,
                    cash_amount,
                    cash_remarks,
                    cheque_amount,
                    cheque_no,
                    cheque_remarks,
                    draft_amount,
                    draft_no,
                    draft_remarks,
                    advance_payment_type,
                    any_adv_payment,
                    requested_id,
                    order_id,
                    quotation_id,
                    dispatch_id,
                    slip_no,
                    reference_no,
                    reference_date,
                    freight_charges,
                    loading_and_packing_charges,
                    insurance_charges,
                    other_charges,
                    invoice_date,
                    invoice_type,
                    req_no_control_id,
                    invoice_no,
                    type_of_gst,
                    terms,
                    company_id,
                    revision_no
                FROM(
                SELECT
                    po_no,
                    dispatch_no,
                    dispatch_date,
                    order_no,
                    order_date,
                    dispatch_to AS customer_id,
                    shipping_id,
                    billing_id,
                    product_type_id,
                    remarks,
                    vehicle_no,
                    'invoice' AS state,
                    cash_amount,
                    cash_remarks,
                    cheque_amount,
                    cheque_no,
                    cheque_remarks,
                    draft_amount,
                    draft_no,
                    draft_remarks,
                    advance_payment_type,
                    any_adv_payment,
                    requested_id,
                    order_id,
                    quotation_id,
                    dispatch_id,
                    slip_no,
                    reference_no,
                    reference_date,
                    freight_charges,
                    loading_and_packing_charges,
                    insurance_charges,
                    other_charges,
                    create_date AS invoice_date,
                    'commercial_invoice' AS invoice_type,
                    0 AS req_no_control_id,
                    'New' AS invoice_no,
                    'cgst_sgst' AS type_of_gst,
                    terms,
                    company_id,
                    revision_no
                FROM
                    prakruti_dispatch
                WHERE
                    prakruti_dispatch.id = $1
                    ) AS prakruti_dispatch_table;
            
            SELECT 
                count(id) INTO accept_line 
            FROM 
                prakruti_dispatch_line 
            WHERE 
                (status = 'accepted' or status = 'par_reject' or status = 'accept_under_deviation') AND 
                main_id = $1 AND 
                store_qty >= dispatched_qty AND 
                dispatch_status='Not Yet Dispatched' AND 
                send_status = 'dispatch' 
                AND send_flag = 0;
                
            IF (accept_line > 0 ) THEN
                PERFORM stock_sales_dispatch($1);
                
                UPDATE 
                    prakruti_production 
                SET
                    available_qty = available_qty - b.dispatched_qty
                FROM(
                    SELECT
                        prakruti_dispatch_batch_list_line.batch_no,
                        prakruti_dispatch_batch_list_line.dispatched_qty
                    FROM
                        prakruti_dispatch_batch_list_line
                    WHERE
                        prakruti_dispatch_batch_list_line.dispatch_id = $1
                    ) AS b
                WHERE
                    b.batch_no = prakruti_production.batch_id;
                
                UPDATE 
                    prakruti_tablet_production 
                SET
                    available_qty = available_qty - b.dispatched_qty
                FROM(
                    SELECT
                        prakruti_dispatch_batch_list_line.batch_no,
                        prakruti_dispatch_batch_list_line.dispatched_qty
                    FROM
                        prakruti_dispatch_batch_list_line
                    WHERE
                        prakruti_dispatch_batch_list_line.dispatch_id = $1
                    ) AS b
                WHERE
                    b.batch_no = prakruti_tablet_production.batch_id;
                
                UPDATE 
                    prakruti_syrup_production 
                SET
                    available_qty = available_qty - b.dispatched_qty
                FROM(
                    SELECT
                        prakruti_dispatch_batch_list_line.batch_no,
                        prakruti_dispatch_batch_list_line.dispatched_qty
                    FROM
                        prakruti_dispatch_batch_list_line
                    WHERE
                        prakruti_dispatch_batch_list_line.dispatch_id = $1
                    ) AS b
                WHERE
                    b.batch_no = prakruti_syrup_production.batch_id;
                
                UPDATE 
                    prakruti_powder_production 
                SET
                    available_qty = available_qty - b.dispatched_qty
                FROM(
                    SELECT
                        prakruti_dispatch_batch_list_line.batch_no,
                        prakruti_dispatch_batch_list_line.dispatched_qty
                    FROM
                        prakruti_dispatch_batch_list_line
                    WHERE
                        prakruti_dispatch_batch_list_line.dispatch_id = $1
                    ) AS b
                WHERE
                    b.batch_no = prakruti_powder_production.batch_id;
                
                INSERT INTO prakruti_sales_invoice_line
                    (
                    create_uid,
                    write_uid,
                    create_date,
                    write_date,
                    product_id,
                    uom_id,
                    specification_id,
                    description,
                    external_reference,
                    status,
                    quantity,
                    unit_price,
                    packing_details,
                    hsn_code,
                    discount,
                    cgst_id,
                    cgst_value,
                    cgst_amount,
                    sgst_id,
                    sgst_value,
                    sgst_amount,
                    igst_id,
                    igst_value,
                    igst_amount,
                    main_id,
                    extra_packing,
                    packing_style,
                    no_of_packings,
                    batch_list,
                    batch_wise_dispatch
                    )
                SELECT
                    create_uid,
                    write_uid,
                    create_date,
                    write_date,
                    product_id,
                    uom_id,
                    specification_id,
                    description,
                    external_reference,
                    status,
                    quantity,
                    unit_price,
                    packing_details,
                    hsn_code,
                    discount,
                    cgst_id,
                    cgst_value,
                    cgst_amount,
                    sgst_id,
                    sgst_value,
                    sgst_amount,
                    igst_id,
                    igst_value,
                    igst_amount,
                    main_id,
                    extra_packing,
                    packing_style,
                    no_of_packings,
                    batch_list,
                    batch_wise_dispatch
                FROM(
                    SELECT
                        prakruti_dispatch_line.create_uid,
                        prakruti_dispatch_line.write_uid,
                        prakruti_dispatch_line.create_date,
                        prakruti_dispatch_line.write_date,
                        prakruti_dispatch_line.product_id,
                        prakruti_dispatch_line.uom_id,
                        prakruti_dispatch_line.specification_id,
                        prakruti_dispatch_line.description,
                        prakruti_dispatch_line.description AS external_reference,
                        prakruti_dispatch_line.status,
                        prakruti_dispatch_line.dispatched_qty AS quantity,
                        prakruti_dispatch_line.unit_price,
                        prakruti_dispatch_line.total,
                        prakruti_dispatch_line.packing_details,
                        prakruti_dispatch_line.hsn_code,
                        prakruti_dispatch_line.amount,
                        prakruti_dispatch_line.discount,
                        prakruti_dispatch_line.taxable_value,
                        prakruti_dispatch_line.taxable_value_with_charges,
                        prakruti_dispatch_line.gst_rate,
                        prakruti_dispatch_line.cgst_id,
                        prakruti_dispatch_line.cgst_value,
                        prakruti_dispatch_line.cgst_amount,
                        prakruti_dispatch_line.sgst_id,
                        prakruti_dispatch_line.sgst_value,
                        prakruti_dispatch_line.sgst_amount,
                        prakruti_dispatch_line.igst_id,
                        prakruti_dispatch_line.igst_value,
                        prakruti_dispatch_line.igst_amount,
                        prakruti_dispatch.dispatch_no,
                        0 AS packing_style,
                        0 AS extra_packing,
                        0 AS no_of_packings,
                        prakruti_dispatch_line.batch_list,
                        prakruti_dispatch_line.batch_wise_dispatch
                    FROM 
                        prakruti_dispatch_line JOIN
                        prakruti_dispatch ON
                        prakruti_dispatch_line.main_id = prakruti_dispatch.id 
                    WHERE
                        (prakruti_dispatch_line.status = 'accepted' OR prakruti_dispatch_line.status = 'par_reject' OR prakruti_dispatch_line.status = 'accept_under_deviation') AND 
                        prakruti_dispatch_line.main_id = $1 AND 
                        prakruti_dispatch_line.store_qty >= prakruti_dispatch_line.dispatched_qty AND 
                        prakruti_dispatch_line.send_status = 'dispatch' AND 
                        prakruti_dispatch_line.dispatch_status='Not Yet Dispatched' AND 
                        prakruti_dispatch_line.send_flag = 0 AND 
                        prakruti_dispatch.dispatch_no = $2
                    ) AS a JOIN (
                    SELECT 
                        prakruti_sales_invoice.id AS main_id,
                        prakruti_sales_invoice.dispatch_no
                    FROM  
                        prakruti_sales_invoice
                    WHERE
                        prakruti_sales_invoice.dispatch_no = $2 
                    ORDER BY id desc limit 1
                                ) AS b ON a.dispatch_no = b.dispatch_no;
                
                
                
                INSERT INTO prakruti_sales_invoice_batch_list_line
                    (
                    create_uid,
                    write_uid,
                    create_date,
                    write_date,
                    product_id,
                    dispatched_qty,
                    batch_no,
                    packing_details,
                    batch_size,
                    batch_qty,
                    remarks,
                    sales_invoice_id
                    )
                SELECT
                    create_uid,
                    write_uid,
                    create_date,
                    write_date,
                    product_id,
                    dispatched_qty,
                    batch_no,
                    packing_details,
                    batch_size,
                    batch_qty,
                    remarks,
                    sales_invoice_id
                FROM(
                    SELECT
                        prakruti_dispatch_batch_list_line.create_uid,
                        prakruti_dispatch_batch_list_line.write_uid,
                        prakruti_dispatch_batch_list_line.create_date,
                        prakruti_dispatch_batch_list_line.write_date,
                        prakruti_dispatch_batch_list_line.product_id,
                        prakruti_dispatch_batch_list_line.dispatched_qty,
                        prakruti_dispatch_batch_list_line.batch_no,
                        prakruti_dispatch_batch_list_line.packing_details,
                        prakruti_dispatch_batch_list_line.batch_size,
                        prakruti_dispatch_batch_list_line.batch_qty,
                        prakruti_dispatch_batch_list_line.remarks,
                        prakruti_dispatch.dispatch_no
                    FROM 
                        prakruti_dispatch_batch_list_line JOIN
                        prakruti_dispatch ON
                        prakruti_dispatch_batch_list_line.dispatch_id = prakruti_dispatch.id 
                    WHERE 
                        prakruti_dispatch_batch_list_line.dispatch_id = $1 AND prakruti_dispatch_batch_list_line.send_to_invoice_flag = 0 AND
                        prakruti_dispatch.dispatch_no = $2
                    ) AS a JOIN (
                    SELECT 
                        prakruti_sales_invoice.id AS sales_invoice_id,
                        prakruti_sales_invoice.dispatch_no
                    FROM  
                        prakruti_sales_invoice
                    WHERE
                        prakruti_sales_invoice.dispatch_no = $2 
                    ORDER BY id desc limit 1
                                ) AS b ON a.dispatch_no = b.dispatch_no;
                
                UPDATE 
                    prakruti_sales_order_item AS b 
                SET 
                    status =a.status,
                    dispatched_qty =a.dispatched_qty,
                    accepted_qty=a.accepted_qty,
                    total_dispatched_qty =a.dispatched_qty + total_dispatched_qty,
                    previous_dispatched_qty=a.dispatched_qty,
                    remaining_dispatched_qty =a.total_scheduled_qty - a.dispatched_qty - a.total_dispatch_qty 
                FROM 
                    (
                    SELECT 
                        product_id,
                        sum(dispatched_qty) as dispatched_qty,
                        accepted_qty,
                        total_scheduled_qty,
                        total_dispatch_qty,
                        prakruti_dispatch.order_no,
                        prakruti_dispatch_line.status 
                    FROM 
                        prakruti_dispatch INNER JOIN 
                        prakruti_dispatch_line ON 
                        prakruti_dispatch.id = prakruti_dispatch_line.main_id 
                    WHERE 
                        prakruti_dispatch_line.main_id = $1 AND 
                        dispatch_status='Not Yet Dispatched' AND 
                        send_status = 'dispatch' 
                    GROUP BY    
                        prakruti_dispatch.order_no,
                        prakruti_dispatch_line.product_id,
                        prakruti_dispatch_line.accepted_qty,
                        prakruti_dispatch_line.total_scheduled_qty,
                        prakruti_dispatch_line.total_dispatch_qty,
                        prakruti_dispatch_line.status
                    ) AS a 
                WHERE 
                    a.order_no = b.main_id AND 
                    a.product_id = b.product_id;
                
                SELECT 
                    qa_check_flag INTO quality_check_flag
                FROM
                    prakruti_dispatch
                WHERE
                    prakruti_dispatch.id = $1;
                
                IF (quality_check_flag = 2 OR quality_check_flag = 3)  THEN
                    SELECT 
                        count(prakruti_sales_order_item.id) INTO close_line 
                    FROM 
                        prakruti_sales_order_item JOIN 
                        prakruti_sales_order ON 
                        prakruti_sales_order_item.main_id = prakruti_sales_order.id JOIN 
                        prakruti_dispatch ON 
                        prakruti_dispatch.order_no = prakruti_sales_order.id 
                    WHERE 
                        total_dispatched_qty >= quantity AND 
                        prakruti_dispatch.id= $1;
                        
                    SELECT 
                        count(prakruti_sales_order_item.id) INTO total_line 
                    FROM 
                        prakruti_sales_order_item JOIN 
                        prakruti_sales_order ON 
                        prakruti_sales_order_item.main_id = prakruti_sales_order.id JOIN 
                        prakruti_dispatch ON 
                        prakruti_dispatch.order_no = prakruti_sales_order.id 
                    WHERE 
                        prakruti_dispatch.id= $1;
                    
                    SELECT 
                        count(id) INTO extra_quantity_line 
                    FROM 
                        prakruti_dispatch_line 
                    WHERE 
                        (status = 'accepted' or status = 'par_reject' or status = 'accept_under_deviation') AND 
                        main_id = $1 AND 
                        store_qty >= dispatched_qty AND 
                        send_status = 'dispatch' AND 
                        dispatch_status='Not Yet Dispatched' AND 
                        send_flag = 0 AND 
                        dispatched_qty > ordered_qty - total_dispatch_qty;
                        
                    IF (total_line = close_line) THEN
                        IF (extra_quantity_line > 0) THEN
                            UPDATE prakruti_sales_order SET state = 'extra_confirm' WHERE prakruti_sales_order.id = $3;
                            UPDATE prakruti_sales_quotation SET state = 'extra_confirm' WHERE prakruti_sales_quotation.inquiry_no = $4;
                            UPDATE prakruti_sales_inquiry SET state = 'extra_confirm' WHERE prakruti_sales_inquiry.inquiry_no = $4;
                            UPDATE prakruti_sales_order SET countflag = 1 WHERE prakruti_sales_order.id = $3;
                            UPDATE prakruti_dispatch SET state = 'extra_invoice' WHERE prakruti_dispatch.id = $1;
                            UPDATE prakruti_production_slip SET state = 'extra_confirm' WHERE prakruti_production_slip.inquiry_no = $4;
                        ELSE
                            UPDATE prakruti_sales_order SET state = 'confirm' WHERE prakruti_sales_order.id = $3;
                            UPDATE prakruti_sales_quotation SET state = 'confirm' WHERE prakruti_sales_quotation.inquiry_no = $4;
                            UPDATE prakruti_sales_inquiry SET state = 'confirm' WHERE prakruti_sales_inquiry.inquiry_no = $4;
                            UPDATE prakruti_sales_order SET countflag = 1 WHERE prakruti_sales_order.id = $3;
                            UPDATE prakruti_dispatch SET state = 'invoice' WHERE prakruti_dispatch.id = $1;
                            UPDATE prakruti_production_slip SET state = 'confirm' WHERE prakruti_production_slip.inquiry_no = $4;
                        END IF;
                    ELSE
                        IF (extra_quantity_line > 0) THEN
                            UPDATE prakruti_sales_order SET state = 'extra_partial_order' WHERE prakruti_sales_order.id = $3;
                            UPDATE prakruti_production_slip SET state = 'extra_partial_order' WHERE prakruti_production_slip.inquiry_no = $4;
                            UPDATE prakruti_sales_quotation SET state = 'extra_partial_order' WHERE prakruti_sales_quotation.inquiry_no = $4;
                            UPDATE prakruti_sales_inquiry SET state = 'extra_partial_order' WHERE prakruti_sales_inquiry.inquiry_no = $4;
                            UPDATE prakruti_sales_order SET countflag = 2 WHERE prakruti_sales_order.id = $3;
                            UPDATE prakruti_dispatch SET state = 'extra_partially_confirmed' WHERE prakruti_dispatch.id = $1;
                        ELSE
                            UPDATE prakruti_sales_order SET state = 'partial_order' WHERE prakruti_sales_order.id = $3;
                            UPDATE prakruti_production_slip SET state = 'partial_order' WHERE prakruti_production_slip.inquiry_no = $4;
                            UPDATE prakruti_sales_quotation SET state = 'partial_order' WHERE prakruti_sales_quotation.inquiry_no = $4;
                            UPDATE prakruti_sales_inquiry SET state = 'partial_order' WHERE prakruti_sales_inquiry.inquiry_no = $4;
                            UPDATE prakruti_sales_order SET countflag = 2 WHERE prakruti_sales_order.id = $3;
                            UPDATE prakruti_dispatch SET state = 'partially_confirmed' WHERE prakruti_dispatch.id = $1;
                        END IF;
                    END IF;
                ELSE
                    SELECT 
                        count(prakruti_sales_order_item.id) INTO all_close_line 
                    FROM 
                        prakruti_sales_order_item JOIN 
                        prakruti_sales_order ON 
                        prakruti_sales_order_item.main_id = prakruti_sales_order.id JOIN 
                        prakruti_dispatch ON 
                        prakruti_dispatch.order_no = prakruti_sales_order.id 
                    WHERE 
                        total_dispatched_qty >= quantity AND 
                        prakruti_dispatch.id= $1;
                    
                    SELECT 
                        count(prakruti_sales_order_item.id) INTO all_total_line 
                    FROM 
                        prakruti_sales_order_item JOIN 
                        prakruti_sales_order ON 
                        prakruti_sales_order_item.main_id = prakruti_sales_order.id JOIN 
                        prakruti_dispatch ON 
                        prakruti_dispatch.order_no = prakruti_sales_order.id 
                    WHERE 
                        prakruti_dispatch.id= $1;
                    
                    SELECT 
                        count(id) INTO all_extra_quantity_line 
                    FROM 
                        prakruti_dispatch_line 
                    WHERE 
                        (status = 'accepted' or status = 'par_reject' or status = 'accept_under_deviation') AND 
                        main_id = $1 AND 
                        store_qty >= dispatched_qty AND 
                        send_status = 'dispatch' AND 
                        dispatch_status='Not Yet Dispatched' AND 
                        send_flag = 0 AND 
                        dispatched_qty > ordered_qty - total_dispatch_qty;
                        
                    IF (all_total_line = all_close_line) AND (all_extra_quantity_line > 0) THEN
                        UPDATE prakruti_sales_order SET state = 'extra_confirm' WHERE prakruti_sales_order.id = $3;
                        UPDATE prakruti_sales_quotation SET state = 'extra_confirm' WHERE prakruti_sales_quotation.inquiry_no = $4;
                        UPDATE prakruti_sales_inquiry SET state = 'extra_confirm' WHERE prakruti_sales_inquiry.inquiry_no = $4;
                        UPDATE prakruti_sales_order SET countflag = 3 wHERE prakruti_sales_order.id = $3;
                        UPDATE prakruti_dispatch SET state = 'extra_invoice' WHERE prakruti_dispatch.id = $1;
                        UPDATE prakruti_production_slip SET state = 'extra_confirm' WHERE prakruti_production_slip.inquiry_no = $4;
                    ELSIF (all_total_line = all_close_line) AND (all_extra_quantity_line = 0) THEN
                        UPDATE prakruti_sales_order SET state = 'confirm' WHERE prakruti_sales_order.id = $3;
                        UPDATE prakruti_sales_quotation SET state = 'confirm' WHERE prakruti_sales_quotation.inquiry_no = $4;
                        UPDATE prakruti_sales_inquiry SET state = 'confirm' WHERE prakruti_sales_inquiry.inquiry_no = $4;
                        UPDATE prakruti_sales_order SET countflag = 3 wHERE prakruti_sales_order.id = $3;
                        UPDATE prakruti_dispatch SET state = 'invoice' WHERE prakruti_dispatch.id = $1;
                        UPDATE prakruti_production_slip SET state = 'confirm' WHERE prakruti_production_slip.inquiry_no = $4;
                    ELSIF (all_total_line != all_close_line) AND (all_extra_quantity_line > 0) THEN
                        UPDATE prakruti_sales_order SET state = 'extra_partial_order' WHERE prakruti_sales_order.id = $3;
                        UPDATE prakruti_production_slip SET state = 'extra_partial_order' WHERE prakruti_production_slip.inquiry_no = $4;
                        UPDATE prakruti_sales_quotation SET state = 'extra_partial_order' WHERE prakruti_sales_quotation.inquiry_no = $4;
                        UPDATE prakruti_sales_inquiry SET state = 'extra_partial_order' WHERE prakruti_sales_inquiry.inquiry_no = $4;
                        UPDATE prakruti_sales_order SET countflag = 4 WHERE prakruti_sales_order.id = $3;
                        UPDATE prakruti_dispatch SET state = 'extra_partially_confirmed' WHERE prakruti_dispatch.id = $1;
                    ELSIF (all_total_line != all_close_line) AND (all_extra_quantity_line = 0) THEN
                        UPDATE prakruti_sales_order SET state = 'partial_order' WHERE prakruti_sales_order.id = $3;
                        UPDATE prakruti_production_slip SET state = 'partial_order' WHERE prakruti_production_slip.inquiry_no = $4;
                        UPDATE prakruti_sales_quotation SET state = 'partial_order' WHERE prakruti_sales_quotation.inquiry_no = $4;
                        UPDATE prakruti_sales_inquiry SET state = 'partial_order' WHERE prakruti_sales_inquiry.inquiry_no = $4;
                        UPDATE prakruti_sales_order SET countflag = 4 WHERE prakruti_sales_order.id = $3;
                        UPDATE prakruti_dispatch SET state = 'partially_confirmed' WHERE prakruti_dispatch.id = $1;
                    ELSE
                        RETURN 'Oops...! Something Went Wrong.';
                    END IF;
                    
                END IF;
            END IF;
        ELSE
            RETURN 'Oops...! Please Enter Packing Details.';
        END IF;
    END IF;

    UPDATE 
        prakruti_dispatch_line 
    SET 
        send_flag = 1,
        dispatch_status = 'Partially Dispatched' 
    WHERE 
        total_dispatch_qty + dispatched_qty < ordered_qty AND 
        (status = 'accepted' or status = 'par_reject' or status = 'accept_under_deviation') AND 
        main_id = $1 AND 
        store_qty >= dispatched_qty AND 
        send_status = 'dispatch' AND 
        send_flag = 0;
        
        
    UPDATE 
        prakruti_dispatch_batch_list_line 
    SET 
        send_to_invoice_flag = 1 
    WHERE 
        dispatch_id = $1 AND 
        send_to_invoice_flag = 0;
    SELECT 
	count(id) INTO count_flag 
    FROM 
            prakruti_dispatch_line 
    WHERE 
            main_id = $1 AND
            qc_flag=1;

    SELECT 
            count(id) INTO hold_flag 
    FROM 
            prakruti_dispatch_line 
    WHERE 
            main_id = $1 AND 
            store_qty >= dispatched_qty AND 
            send_status = 'dispatch' AND
            qc_flag=1;
    IF (count_flag = hold_flag) THEN
         UPDATE prakruti_dispatch SET countflag = 2 WHERE id = $1;
    ELSE
        UPDATE prakruti_dispatch SET countflag = 1 WHERE id = $1; 
    END IF;
    
    UPDATE 
        prakruti_dispatch_line 
    SET 
        dispatch_status = 'Rejected' 
    WHERE 
        status = 'rejected' AND 
        main_id = $1  AND 
        send_status = 'dispatch' AND 
        send_flag = 0;
    
    UPDATE 
        prakruti_dispatch_line 
    SET 
        send_flag = 1,
        dispatch_status = 'Dispatched' 
    WHERE 
        (status = 'accepted' or status = 'par_reject' or status = 'accept_under_deviation') AND 
        main_id = $1 AND 
        store_qty >= dispatched_qty AND 
        send_status = 'dispatch' AND 
        send_flag = 0;

    
    
    SELECT 
        count(id) INTO flag_line 
    FROM 
        prakruti_dispatch_line 
    WHERE 
        (status = 'accepted' or status = 'par_reject' or status = 'accept_under_deviation') AND 
        main_id = $1 AND 
        store_qty >= dispatched_qty AND 
        send_status = 'dispatch'  AND 
        send_flag = 1;
        
    SELECT 
        count(id) INTO totaled_line 
    FROM 
        prakruti_dispatch_line 
    WHERE 
        main_id = $1;
    
    SELECT 
        count(prakruti_dispatch_line.id) INTO reject_line 
    FROM 
        prakruti_dispatch_line 
    WHERE 
        prakruti_dispatch_line.status= 'rejected' AND 
        prakruti_dispatch_line.main_id = $1;
    
    
    IF (totaled_line = flag_line) THEN
        UPDATE prakruti_dispatch SET all_send_to_invoice = 1 WHERE id = $1;        
    END IF;
    
    IF (reject_line = totaled_line) THEN
        UPDATE prakruti_dispatch SET reject_flag = 1 WHERE id = $1;
        UPDATE prakruti_dispatch SET state='done' WHERE id = $1;
    END IF;


    
ELSE
     RETURN 'Not Enough Stock (OR)... No Any Products To Send For Further Process';
END IF;

RETURN qty;

END;
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION public.stock_dispatch(integer,character varying,integer,character varying)
  OWNER TO odoo;
  
  
  
  
  
CREATE OR REPLACE FUNCTION public.stock_inward(integer)
  RETURNS integer AS
$BODY$
DECLARE qty   integer;
BEGIN

qty = 0;

 
INSERT INTO prakruti_stock
        (
        product_id,
        uom_id,
        entered_date,
        location_id,
        origin,
        company_id,
        --grn_id,
        --issue_id,
        batch_id,
        --dispatch_id,
        --slip_id,
        --adjustment_id,
        inward_id,
        --sales_grn_id,
        virtual_qty,
        product_qty,
        --reserved_qty,
        --customer_id,
        --vendor_id,
        remarks,
        create_date,
        create_uid,
        write_date,
        write_uid
        )

SELECT 
        product_id,
        uom_id,
        entered_date,
        location_id,
        origin,
        company_id,
        --grn_id,
        --issue_id,
        batch_id,
        --dispatch_id,
        --slip_id,
        --adjustment_id,
        inward_id,
        --sales_grn_id,
        virtual_qty,
        product_qty,
        --reserved_qty,
        --customer_id,
        --vendor_id,
        remarks,
        create_date,
        create_uid,
        write_date,
        write_uid
FROM(
    SELECT
        prakruti_production_inward_line.product_id,
        prakruti_production_inward_line.uom_id, 
        prakruti_production_inward.write_date AS entered_date, 
        prakruti_production_inward.location_id,
        prakruti_production_inward.inward_no AS origin,
        prakruti_production_inward.company_id, 
        --prakruti_production_inward.id AS grn_id, 
        --prakruti_production_inward.issue_id, 
        prakruti_production_inward.batch_no AS batch_id, 
        --prakruti_production_inward.dispatch_id, 
        --prakruti_production_inward.slip_id, 
        --prakruti_production_inward.adjustment_id, 
        prakruti_production_inward.id AS inward_id, 
        --prakruti_production_inward.sales_grn_id,
        prakruti_production_inward_line.accepted_qty AS virtual_qty,                            
        prakruti_production_inward_line.accepted_qty AS product_qty, 
        --prakruti_production_inward.reserved_qty, 
        --prakruti_production_inward.customer_id, 
        --prakruti_production_inward.vendor_id, 
        prakruti_production_inward.remarks,
        prakruti_production_inward.write_date AS create_date,
        prakruti_production_inward.write_date AS write_date,
        prakruti_production_inward.write_uid AS write_uid,
        prakruti_production_inward.create_uid AS create_uid
    FROM 
        prakruti_production_inward JOIN
        prakruti_production_inward_line ON 
        prakruti_production_inward.id = prakruti_production_inward_line.main_id 
    WHERE
        prakruti_production_inward.id = $1
    ) AS C;

RETURN qty;
                                
END;
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION public.stock_inward(integer)
  OWNER TO odoo;
  
  
  
  
CREATE OR REPLACE FUNCTION public.stock_production_slip(integer)
  RETURNS integer AS
$BODY$
DECLARE qty   integer;
BEGIN

qty = 0;


UPDATE 
    prakruti_production_slip_line 
SET 
    store_qty = product_qty 
FROM ( 
    SELECT 
        product_id,
        sum(product_qty) as product_qty,
        id 
    FROM ( 
        SELECT 
            prakruti_stock.product_id, 
            prakruti_stock.product_qty,
            main_id,
            prakruti_production_slip_line.id 
        FROM 
            product_template JOIN 
            product_product  ON 
            product_product.product_tmpl_id = product_template.id JOIN 
            prakruti_stock ON 
            prakruti_stock.product_id = product_product.id JOIN 
            prakruti_production_slip_line ON 
            prakruti_production_slip_line.product_id = prakruti_stock.product_id 
        WHERE 
            prakruti_production_slip_line.main_id = $1
        )as a 
        GROUP BY product_id,id
    ) as b 
WHERE 
    b.id = prakruti_production_slip_line.id;

	
RETURN qty;
                                
END;
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION public.stock_production_slip(integer)
  OWNER TO odoo;
  
CREATE OR REPLACE FUNCTION public.stock_purchase(integer)
  RETURNS integer AS
$BODY$
DECLARE qty   integer;
BEGIN

qty = 0;



                            
INSERT INTO prakruti_stock
        (
        product_id,
        uom_id,
        entered_date,
        location_id,
        origin,
        company_id,
        grn_id,
        --issue_id,
        --batch_id,
        --dispatch_id,
        slip_id,
        --adjustment_id,
        --inward_id,
        --sales_grn_id,
        virtual_qty,
        product_qty,
        reserved_qty,
        --customer_id,
        vendor_id,
        remarks,
        create_date,
        create_uid,
        write_date,
        write_uid
        )

SELECT 
        product_id,
        uom_id,
        entered_date,
        location_id,
        origin,
        company_id,
        grn_id,
        --issue_id,
        --batch_id,
        --dispatch_id,
        slip_id,
        --adjustment_id,
        --inward_id,
        --sales_grn_id,
        virtual_qty,
        product_qty,
        reserved_qty,
        --customer_id,
        vendor_id,
        remarks,
        create_date,
        create_uid,
        write_date,
        write_uid
FROM(
    SELECT
        prakruti_grn_inspection_details_line.product_id,
        prakruti_grn_inspection_details_line.uom_id, 
        prakruti_grn_inspection_details.write_date AS entered_date, 
        prakruti_grn_inspection_details.location_id,
        prakruti_grn_inspection_details.grn_no AS origin,
        prakruti_grn_inspection_details.company_address AS company_id, 
        prakruti_grn_inspection_details.id AS grn_id, 
        --prakruti_grn_inspection_details.issue_id, 
        --prakruti_grn_inspection_details.batch_id, 
        --prakruti_grn_inspection_details.dispatch_id, 
        prakruti_grn_inspection_details_line.slip_id, 
        --prakruti_grn_inspection_details.adjustment_id, 
        --prakruti_grn_inspection_details.inward_id, 
        --prakruti_grn_inspection_details.sales_grn_id,
        prakruti_grn_inspection_details_line.accepted_qty AS virtual_qty,                            
        prakruti_grn_inspection_details_line.accepted_qty AS product_qty, 
        case 
            when prakruti_grn_inspection_details_line.slip_id != 0 then prakruti_grn_inspection_details_line.accepted_qty end as reserved_qty,        
        --prakruti_grn_inspection_details.customer_id, 
        prakruti_grn_inspection_details.vendor_id, 
        prakruti_grn_inspection_details.remarks,
        prakruti_grn_inspection_details.write_date AS create_date,
        prakruti_grn_inspection_details.write_date AS write_date,
        prakruti_grn_inspection_details.write_uid AS write_uid,
        prakruti_grn_inspection_details.create_uid AS create_uid
    FROM 
        prakruti_grn_inspection_details JOIN
        prakruti_grn_inspection_details_line ON 
        prakruti_grn_inspection_details.id = prakruti_grn_inspection_details_line.inspection_line_id 
    WHERE
        prakruti_grn_inspection_details.id = $1
    ) AS C;
    
    
INSERT INTO prakruti_stock
        (
        product_id,
        uom_id,
        entered_date,
        location_id,
        origin,
        company_id,
        grn_id,
        --issue_id,
        --batch_id,
        --dispatch_id,
        slip_id,
        --adjustment_id,
        --inward_id,
        --sales_grn_id,
        virtual_qty,
        product_qty,
        reserved_qty,
        --customer_id,
        vendor_id,
        remarks,
        create_date,
        create_uid,
        write_date,
        write_uid
        )

SELECT 
        product_id,
        uom_id,
        entered_date,
        location_id,
        origin,
        company_id,
        grn_id,
        --issue_id,
        --batch_id,
        --dispatch_id,
        slip_id,
        --adjustment_id,
        --inward_id,
        --sales_grn_id,
        virtual_qty,
        product_qty,
        reserved_qty,
        --customer_id,
        vendor_id,
        remarks,
        create_date,
        create_uid,
        write_date,
        write_uid
FROM(
    SELECT
        pgindl.product_id,
        pgindl.uom_id, 
        grn.write_date AS entered_date, 
        grn.location_id,
        grn.grn_no AS origin,
        grn.company_address AS company_id, 
        grn.id AS grn_id, 
        --grn.issue_id, 
        --grn.batch_id, 
        --grn.dispatch_id, 
        pgindl.slip_id, 
        --grn.adjustment_id, 
        --grn.inward_id, 
        --grn.sales_grn_id,
        pml.qty*pgindl.packing_style AS virtual_qty,                            
        pml.qty*pgindl.packing_style AS product_qty, 
         
        case 
            when pgindl.slip_id != 0 then pgindl.accepted_qty end as reserved_qty, 
        --grn.customer_id, 
        grn.vendor_id, 
        grn.remarks,
        grn.write_date AS create_date,
        grn.write_date AS write_date,
        grn.write_uid AS write_uid,
        grn.create_uid AS create_uid
    FROM    
        packing_material_line as pml JOIN 
        product_template as pt ON 
        pml.packing_id = pt.id JOIN 
        product_product as pp ON
        pt.id = pp.product_tmpl_id JOIN
        prakruti_grn_inspection_details_line as pgindl ON
        pgindl.product_id = pp.id JOIN 
        prakruti_grn_inspection_details as grn ON
        grn.id = pgindl.inspection_line_id
    WHERE 
        grn.id = $1 
    )AS D;
                            
                            


RETURN qty;
                                
END;
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION public.stock_purchase(integer)
  OWNER TO odoo;
  
  
-- Function: public.stock_sales_dispatch(integer)

-- DROP FUNCTION public.stock_sales_dispatch(integer);

CREATE OR REPLACE FUNCTION public.stock_sales_dispatch(integer)
  RETURNS integer AS
$BODY$
DECLARE qty   integer;
BEGIN

qty = 0;


INSERT INTO prakruti_stock
        (
        product_id,
        uom_id,
        entered_date,
        --location_id,
        origin,
        company_id,
        --grn_id,
        --issue_id,
        batch_id,
        dispatch_id,
        --slip_id,
        --adjustment_id,
        --inward_id,
        --sales_grn_id,
        --virtual_qty,
        product_qty,
        --reserved_qty,
        customer_id,
        --vendor_id,
        remarks,
        create_date,
        create_uid,
        write_date,
        write_uid
        )

SELECT 
        product_id,
        uom_id,
        entered_date,
        --location_id,
        origin,
        company_id,
        --grn_id,
        --issue_id,
        batch_id,
        dispatch_id,
        --slip_id,
        --adjustment_id,
        --inward_id,
        --sales_grn_id,
        --virtual_qty,
        -product_qty,
        --reserved_qty,
        customer_id,
        --vendor_id,
        remarks,
        create_date,
        create_uid,
        write_date,
        write_uid
FROM(
    SELECT
        prakruti_dispatch_batch_list_line.product_id,
        prakruti_dispatch_line.uom_id, 
        prakruti_dispatch.write_date AS entered_date, 
        --prakruti_dispatch.location_id,
        prakruti_dispatch.dispatch_no AS origin,
        prakruti_dispatch.company_id, 
        --prakruti_dispatch.id AS grn_id, 
        --prakruti_dispatch.issue_id, 
        prakruti_dispatch_batch_list_line.batch_no AS batch_id, 
        prakruti_dispatch.id AS dispatch_id, 
        --prakruti_dispatch.slip_id, 
        --prakruti_dispatch.adjustment_id, 
        --prakruti_dispatch.inward_id, 
        --prakruti_dispatch.sales_grn_id,
        --prakruti_dispatch_batch_list_line.dispatched_qty AS virtual_qty,                            
        prakruti_dispatch_batch_list_line.dispatched_qty AS product_qty, 
        --prakruti_dispatch.reserved_qty, 
        prakruti_dispatch.customer_id, 
        --prakruti_dispatch.vendor_id, 
        prakruti_dispatch.remarks,
        prakruti_dispatch.write_date AS create_date,
        prakruti_dispatch.write_date AS write_date,
        prakruti_dispatch.write_uid AS write_uid,
        prakruti_dispatch.create_uid AS create_uid
    FROM 
        prakruti_dispatch JOIN
        prakruti_dispatch_line ON 
        prakruti_dispatch.id = prakruti_dispatch_line.main_id JOIN
        prakruti_dispatch_batch_list_line ON prakruti_dispatch_batch_list_line.dispatch_id = prakruti_dispatch.id
    WHERE
        prakruti_dispatch.id = $1 AND prakruti_dispatch_batch_list_line.dispatch_id = $1 AND prakruti_dispatch_line.send_status = 'dispatch'
    ) AS C;

RETURN qty;
                                
END;
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION public.stock_sales_dispatch(integer)
  OWNER TO odoo;
  
  
  CREATE OR REPLACE FUNCTION public.stock_sales_grn(integer)
  RETURNS integer AS
$BODY$
DECLARE qty   integer;
BEGIN

qty = 0;


INSERT INTO prakruti_stock
        (
        product_id,
        uom_id,
        entered_date,
        location_id,
        origin,
        company_id,
        --grn_id,
        --issue_id,
        --batch_id,
        --dispatch_id,
        --slip_id,
        --adjustment_id,
        --inward_id,
        sales_grn_id,
        virtual_qty,
        product_qty,
        --reserved_qty,
        customer_id,
        --vendor_id,
        remarks,
        create_date,
        create_uid,
        write_date,
        write_uid
        )

SELECT 
        product_id,
        uom_id,
        entered_date,
        location_id,
        origin,
        company_id,
        --grn_id,
        --issue_id,
        --batch_id,
        --dispatch_id,
        --slip_id,
        --adjustment_id,
        --inward_id,
        sales_grn_id,
        virtual_qty,
        product_qty,
        --reserved_qty,
        customer_id,
        --vendor_id,
        remarks,
        create_date,
        create_uid,
        write_date,
        write_uid
FROM(
    SELECT
        prakruti_sales_return_grn_line.product_id,
        prakruti_sales_return_grn_line.uom_id, 
        prakruti_sales_return_grn.write_date AS entered_date, 
        prakruti_sales_return_grn.location_id,
        prakruti_sales_return_grn.grn_no AS origin,
        prakruti_sales_return_grn.company_id, 
        --prakruti_sales_return_grn.id AS grn_id, 
        --prakruti_sales_return_grn.issue_id, 
        --prakruti_sales_return_grn.batch_id, 
        --prakruti_sales_return_grn.dispatch_id, 
        --prakruti_sales_return_grn.slip_id, 
        --prakruti_sales_return_grn.adjustment_id, 
        --prakruti_sales_return_grn.inward_id, 
        prakruti_sales_return_grn.id AS sales_grn_id,
        prakruti_sales_return_grn_line.accepted_qty AS virtual_qty,                            
        prakruti_sales_return_grn_line.accepted_qty AS product_qty, 
        --prakruti_sales_return_grn.reserved_qty, 
        prakruti_sales_return_grn.customer_id, 
        --prakruti_sales_return_grn.vendor_id, 
        prakruti_sales_return_grn.remarks,
        prakruti_sales_return_grn.write_date AS create_date,
        prakruti_sales_return_grn.write_date AS write_date,
        prakruti_sales_return_grn.write_uid AS write_uid,
        prakruti_sales_return_grn.create_uid AS create_uid
    FROM 
        prakruti_sales_return_grn JOIN
        prakruti_sales_return_grn_line ON 
        prakruti_sales_return_grn.id = prakruti_sales_return_grn_line.grn_line_id 
    WHERE
        prakruti_sales_return_grn.id = $1
    ) AS C;
    
RETURN qty;
                                
END;
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION public.stock_sales_grn(integer)
  OWNER TO odoo;
 
  
  
  
  
CREATE OR REPLACE FUNCTION public.stock_store_extra_issue(integer)
  RETURNS integer AS
$BODY$
DECLARE qty   integer;
BEGIN

qty = 0;


INSERT INTO prakruti_stock
        (
        product_id,
        uom_id,
        entered_date,
        location_id,
        origin,
        company_id,
        grn_id,
        issue_id,
        batch_id,
        --dispatch_id,
        --slip_id,
        --adjustment_id,
        --inward_id,
        --sales_grn_id,
        --virtual_qty,
        product_qty,
        --reserved_qty,
        --customer_id,
        --vendor_id,
        remarks,
        create_date,
        create_uid,
        write_date,
        write_uid
        )

SELECT 
        product_id,
        uom_id,
        entered_date,
        location_id,
        origin,
        company_id,
        grn_id,
        issue_id,
        batch_id,
        --dispatch_id,
        --slip_id,
        --adjustment_id,
        --inward_id,
        --sales_grn_id,
        --virtual_qty,
        -product_qty,
        --reserved_qty,
        --customer_id,
        --vendor_id,
        remarks,
        create_date,
        create_uid,
        write_date,
        write_uid
FROM(
    SELECT distinct
        prakruti_issue_grn_list_line.product_id,
        prakruti_store_issue_item.uom_id, 
        prakruti_store_issue.write_date AS entered_date, 
        prakruti_store_issue.location_id,
        prakruti_store_issue.issue_no AS origin,
        prakruti_store_issue.company_id, 
        prakruti_issue_grn_list_line.grn_id, 
        prakruti_store_issue.id AS issue_id, 
        prakruti_store_issue.batch_no AS batch_id, 
        --prakruti_store_issue.id AS dispatch_id, 
        --prakruti_store_issue.slip_id, 
        --prakruti_store_issue.adjustment_id, 
        --prakruti_store_issue.inward_id, 
        --prakruti_store_issue.sales_grn_id,
        --prakruti_store_issue_item.extra_issued_qty AS virtual_qty,                            
        prakruti_store_issue_item.extra_issued_qty AS product_qty, 
        --prakruti_store_issue.reserved_qty, 
        --prakruti_store_issue.customer_id, 
        --prakruti_store_issue.vendor_id, 
        prakruti_store_issue.remarks,
        prakruti_store_issue.write_date AS create_date,
        prakruti_store_issue.write_date AS write_date,
        prakruti_store_issue.write_uid AS write_uid,
        prakruti_store_issue.create_uid AS create_uid
    FROM 
        prakruti_store_issue JOIN
        prakruti_store_issue_item ON 
        prakruti_store_issue.id = prakruti_store_issue_item.main_id JOIN
        prakruti_issue_grn_list_line ON prakruti_issue_grn_list_line.issue_id = prakruti_store_issue.id
    WHERE
        prakruti_store_issue.id = $1 AND prakruti_issue_grn_list_line.issue_id = $1
    ) AS C;

INSERT INTO prakruti_stock
        (
        product_id,
        uom_id,
        entered_date,
        location_id,
        origin,
        company_id,
        grn_id,
        issue_id,
        batch_id,
        --dispatch_id,
        --slip_id,
        --adjustment_id,
        --inward_id,
        --sales_grn_id,
        --virtual_qty,
        product_qty,
        --reserved_qty,
        --customer_id,
        --vendor_id,
        remarks,
        create_date,
        create_uid,
        write_date,
        write_uid
        )

SELECT 
        product_id,
        uom_id,
        entered_date,
        location_id,
        origin,
        company_id,
        grn_id,
        issue_id,
        batch_id,
        --dispatch_id,
        --slip_id,
        --adjustment_id,
        --inward_id,
        --sales_grn_id,
        --virtual_qty,
        -product_qty,
        --reserved_qty,
        --customer_id,
        --vendor_id,
        remarks,
        create_date,
        create_uid,
        write_date,
        write_uid
FROM(
    SELECT distinct
        pigll.product_id,
        psit.uom_id, 
        psi.write_date AS entered_date, 
        psi.location_id,
        psi.issue_no AS origin,
        psi.company_id, 
        pigll.grn_id, 
        psi.id AS issue_id, 
        psi.batch_no AS batch_id, 
        --psi.id AS dispatch_id, 
        --psi.slip_id, 
        --psi.adjustment_id, 
        --psi.inward_id, 
        --psi.sales_grn_id,
        --pml.qty*pigll.packing_style AS virtual_qty,                            
        pml.qty*pigll.packing_style AS product_qty, 
        --psi.reserved_qty, 
        --psi.customer_id, 
        --psi.vendor_id, 
        psi.remarks,
        psi.write_date AS create_date,
        psi.write_date AS write_date,
        psi.write_uid AS write_uid,
        psi.create_uid AS create_uid
    FROM    
                packing_material_line as pml
        JOIN 
                product_template as pt ON 
                pml.packing_id = pt.id
        JOIN 
                prakruti_store_issue_item as psit ON
                psit.product_id = pml.packing_id
        JOIN 
                prakruti_store_issue as psi ON
                psi.id = psit.main_id
        JOIN
                prakruti_issue_grn_list_line pigll ON
                psi.id = pigll.issue_id
        WHERE 
                psi.id = $1 AND pigll.issue_id = $1)AS P;

RETURN qty;
                                
END;
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION public.stock_store_extra_issue(integer)
  OWNER TO odoo;



-- Function: public.stock_store_extra_packing_issue(integer)

-- DROP FUNCTION public.stock_store_extra_packing_issue(integer);

CREATE OR REPLACE FUNCTION public.stock_store_extra_packing_issue(integer)
  RETURNS integer AS
$BODY$
DECLARE qty   integer;
BEGIN

qty = 0;

INSERT INTO prakruti_stock
        (
        product_id,
        uom_id,
        entered_date,
        location_id,
        origin,
        company_id,
        grn_id,
        issue_id,
        batch_id,
        --dispatch_id,
        --slip_id,
        --adjustment_id,
        --inward_id,
        --sales_grn_id,
        --virtual_qty,
        product_qty,
        --reserved_qty,
        --customer_id,
        --vendor_id,
        remarks,
        create_date,
        create_uid,
        write_date,
        write_uid
        )

SELECT 
        product_id,
        uom_id,
        entered_date,
        location_id,
        origin,
        company_id,
        grn_id,
        issue_id,
        batch_id,
        --dispatch_id,
        --slip_id,
        --adjustment_id,
        --inward_id,
        --sales_grn_id,
        --virtual_qty,
        -product_qty,
        --reserved_qty,
        --customer_id,
        --vendor_id,
        remarks,
        create_date,
        create_uid,
        write_date,
        write_uid
FROM(
    SELECT distinct
        prakruti_issue_grn_list_line.product_id,
        prakruti_store_issue_item.uom_id, 
        prakruti_store_issue.write_date AS entered_date, 
        prakruti_store_issue.location_id,
        prakruti_store_issue.issue_no AS origin,
        prakruti_store_issue.company_id, 
        prakruti_issue_grn_list_line.grn_id, 
        prakruti_store_issue.id AS issue_id, 
        prakruti_store_issue.batch_no AS batch_id, 
        --prakruti_store_issue.id AS dispatch_id, 
        --prakruti_store_issue.slip_id, 
        --prakruti_store_issue.adjustment_id, 
        --prakruti_store_issue.inward_id, 
        --prakruti_store_issue.sales_grn_id,
        --prakruti_store_issue_item.extra_issued_packing AS virtual_qty,                            
        prakruti_store_issue_item.extra_issued_packing AS product_qty, 
        --prakruti_store_issue.reserved_qty, 
        --prakruti_store_issue.customer_id, 
        --prakruti_store_issue.vendor_id, 
        prakruti_store_issue.remarks,
        prakruti_store_issue.write_date AS create_date,
        prakruti_store_issue.write_date AS write_date,
        prakruti_store_issue.write_uid AS write_uid,
        prakruti_store_issue.create_uid AS create_uid
    FROM 
        prakruti_store_issue JOIN
        prakruti_store_issue_item ON 
        prakruti_store_issue.id = prakruti_store_issue_item.main_id JOIN
        prakruti_issue_grn_list_line ON prakruti_issue_grn_list_line.issue_id = prakruti_store_issue.id
    WHERE
        prakruti_store_issue.id = $1 AND prakruti_issue_grn_list_line.issue_id = $1
    ) AS C;

INSERT INTO prakruti_stock
        (
        product_id,
        uom_id,
        entered_date,
        location_id,
        origin,
        company_id,
        grn_id,
        issue_id,
        batch_id,
        --dispatch_id,
        --slip_id,
        --adjustment_id,
        --inward_id,
        --sales_grn_id,
        --virtual_qty,
        product_qty,
        --reserved_qty,
        --customer_id,
        --vendor_id,
        remarks,
        create_date,
        create_uid,
        write_date,
        write_uid
        )

SELECT 
        product_id,
        uom_id,
        entered_date,
        location_id,
        origin,
        company_id,
        grn_id,
        issue_id,
        batch_id,
        --dispatch_id,
        --slip_id,
        --adjustment_id,
        --inward_id,
        --sales_grn_id,
        --virtual_qty,
        -product_qty,
        --reserved_qty,
        --customer_id,
        --vendor_id,
        remarks,
        create_date,
        create_uid,
        write_date,
        write_uid
FROM(
    SELECT distinct
        pigll.product_id,
        psit.uom_id, 
        psi.write_date AS entered_date, 
        psi.location_id,
        psi.issue_no AS origin,
        psi.company_id, 
        pigll.grn_id, 
        psi.id AS issue_id, 
        psi.batch_no AS batch_id, 
        --psi.id AS dispatch_id, 
        --psi.slip_id, 
        --psi.adjustment_id, 
        --psi.inward_id, 
        --psi.sales_grn_id,
        --pml.qty*pigll.packing_style AS virtual_qty,                            
        pml.qty*pigll.packing_style AS product_qty, 
        --psi.reserved_qty, 
        --psi.customer_id, 
        --psi.vendor_id, 
        psi.remarks,
        psi.write_date AS create_date,
        psi.write_date AS write_date,
        psi.write_uid AS write_uid,
        psi.create_uid AS create_uid
    FROM    
                packing_material_line as pml
        JOIN 
                product_template as pt ON 
                pml.packing_id = pt.id
        JOIN 
                prakruti_store_issue_item as psit ON
                psit.product_id = pml.packing_id
        JOIN 
                prakruti_store_issue as psi ON
                psi.id = psit.main_id
        JOIN
                prakruti_issue_grn_list_line pigll ON
                psi.id = pigll.issue_id
        WHERE 
                psi.id = $1 AND pigll.issue_id = $1)AS P;

RETURN qty;
                                
END;
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION public.stock_store_extra_packing_issue(integer)
  OWNER TO odoo;

  
  
CREATE OR REPLACE FUNCTION public.stock_store_issue(integer)
  RETURNS integer AS
$BODY$
DECLARE qty   integer;
BEGIN

qty = 0;


INSERT INTO prakruti_stock
        (
        product_id,
        uom_id,
        entered_date,
        location_id,
        origin,
        company_id,
        grn_id,
        issue_id,
        batch_id,
        --dispatch_id,
        --slip_id,
        --adjustment_id,
        --inward_id,
        --sales_grn_id,
        --virtual_qty,
        product_qty,
        --reserved_qty,
        --customer_id,
        --vendor_id,
        remarks,
        create_date,
        create_uid,
        write_date,
        write_uid
        )

SELECT 
        product_id,
        uom_id,
        entered_date,
        location_id,
        origin,
        company_id,
        grn_id,
        issue_id,
        batch_id,
        --dispatch_id,
        --slip_id,
        --adjustment_id,
        --inward_id,
        --sales_grn_id,
        --virtual_qty,
        -product_qty,
        --reserved_qty,
        --customer_id,
        --vendor_id,
        remarks,
        create_date,
        create_uid,
        write_date,
        write_uid
FROM(
    SELECT distinct
        prakruti_issue_grn_list_line.product_id,
        prakruti_store_issue_item.uom_id, 
        prakruti_store_issue.write_date AS entered_date, 
        prakruti_store_issue.location_id,
        prakruti_store_issue.issue_no AS origin,
        prakruti_store_issue.company_id, 
        prakruti_issue_grn_list_line.grn_id, 
        prakruti_store_issue.id AS issue_id, 
        prakruti_store_issue.batch_no AS batch_id, 
        --prakruti_store_issue.id AS dispatch_id, 
        --prakruti_store_issue.slip_id, 
        --prakruti_store_issue.adjustment_id, 
        --prakruti_store_issue.inward_id, 
        --prakruti_store_issue.sales_grn_id,
        --prakruti_issue_grn_list_line.issued_qty AS virtual_qty,                            
        prakruti_issue_grn_list_line.issued_qty AS product_qty, 
        --prakruti_store_issue.reserved_qty, 
        --prakruti_store_issue.customer_id, 
        --prakruti_store_issue.vendor_id, 
        prakruti_store_issue.remarks,
        prakruti_store_issue.write_date AS create_date,
        prakruti_store_issue.write_date AS write_date,
        prakruti_store_issue.write_uid AS write_uid,
        prakruti_store_issue.create_uid AS create_uid
    FROM 
        prakruti_store_issue JOIN
        prakruti_store_issue_item ON 
        prakruti_store_issue.id = prakruti_store_issue_item.main_id JOIN
        prakruti_issue_grn_list_line ON prakruti_issue_grn_list_line.issue_id = prakruti_store_issue.id
    WHERE
        prakruti_store_issue.id = $1 AND prakruti_issue_grn_list_line.issue_id = $1
    ) AS C;

INSERT INTO prakruti_stock
        (
        product_id,
        uom_id,
        entered_date,
        location_id,
        origin,
        company_id,
        grn_id,
        issue_id,
        batch_id,
        --dispatch_id,
        --slip_id,
        --adjustment_id,
        --inward_id,
        --sales_grn_id,
        --virtual_qty,
        product_qty,
        --reserved_qty,
        --customer_id,
        --vendor_id,
        remarks,
        create_date,
        create_uid,
        write_date,
        write_uid
        )

SELECT 
        product_id,
        uom_id,
        entered_date,
        location_id,
        origin,
        company_id,
        grn_id,
        issue_id,
        batch_id,
        --dispatch_id,
        --slip_id,
        --adjustment_id,
        --inward_id,
        --sales_grn_id,
        --virtual_qty,
        -product_qty,
        --reserved_qty,
        --customer_id,
        --vendor_id,
        remarks,
        create_date,
        create_uid,
        write_date,
        write_uid
FROM(
    SELECT distinct
        pigll.product_id,
        psit.uom_id, 
        psi.write_date AS entered_date, 
        psi.location_id,
        psi.issue_no AS origin,
        psi.company_id, 
        pigll.grn_id, 
        psi.id AS issue_id, 
        psi.batch_no AS batch_id, 
        --psi.id AS dispatch_id, 
        --psi.slip_id, 
        --psi.adjustment_id, 
        --psi.inward_id, 
        --psi.sales_grn_id,
        --pml.qty*pigll.packing_style AS virtual_qty,                            
        pml.qty*pigll.packing_style AS product_qty, 
        --psi.reserved_qty, 
        --psi.customer_id, 
        --psi.vendor_id, 
        psi.remarks,
        psi.write_date AS create_date,
        psi.write_date AS write_date,
        psi.write_uid AS write_uid,
        psi.create_uid AS create_uid
    FROM    
                packing_material_line as pml
        JOIN 
                product_template as pt ON 
                pml.packing_id = pt.id
        JOIN 
                prakruti_store_issue_item as psit ON
                psit.product_id = pml.packing_id
        JOIN 
                prakruti_store_issue as psi ON
                psi.id = psit.main_id
        JOIN
                prakruti_issue_grn_list_line pigll ON
                psi.id = pigll.issue_id
        WHERE 
                psi.id = $1 AND pigll.issue_id = $1)AS P;

RETURN qty;
                                
END;
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION public.stock_store_issue(integer)
  OWNER TO odoo;
  
  
-- Function: public.update_planning(integer)

-- DROP FUNCTION public.update_planning(integer);

CREATE OR REPLACE FUNCTION public.update_planning(integer)
  RETURNS integer AS
$BODY$
DECLARE qty   integer;
BEGIN

qty = 0;


INSERT INTO prakruti_stock
        (
        product_id,
        uom_id,
        entered_date,
        location_id,
        origin,
        company_id,
        --grn_id,
        --issue_id,
        --batch_id,
        --dispatch_id,
        slip_id,
        --adjustment_id,
        --inward_id,
        --sales_grn_id,
        virtual_qty,
        --product_qty,
        --reserved_qty,
        --customer_id,
        --vendor_id,
        remarks,
        create_date,
        create_uid,
        write_date,
        write_uid
        )

SELECT 
        product_id,
        uom_id,
        entered_date,
        location_id,
        origin,
        company_id,
        --grn_id,
        --issue_id,
        --batch_id,
        --dispatch_id,
        slip_id,
        --adjustment_id,
        --inward_id,
        --sales_grn_id,
        -virtual_qty,
        --product_qty,
        --reserved_qty,
        --customer_id,
        --vendor_id,
        remarks,
        create_date,
        create_uid,
        write_date,
        write_uid
FROM(
    SELECT 
        prakruti_production_planning_line.product_id,
        prakruti_production_planning_line.uom_id, 
        prakruti_production_planning.write_date AS entered_date, 
        prakruti_production_planning.location_id,
        prakruti_production_planning.slip_no AS origin,
        prakruti_production_planning.company_id, 
        --prakruti_production_planning.id AS grn_id, 
        --prakruti_production_planning.issue_id, 
        --prakruti_production_planning.batch_no AS batch_id, 
        --prakruti_production_planning.dispatch_id, 
        prakruti_production_planning.slip_id, 
        --prakruti_production_planning.adjustment_id, 
        --prakruti_production_planning.id AS inward_id, 
        --prakruti_production_planning.sales_grn_id,
        (prakruti_production_planning.output_yield_qty * prakruti_production_planning_line.standard_value)/prakruti_production_planning.standard_yield_qty AS virtual_qty,                            
        --(prakruti_production_planning.output_yield_qty * prakruti_production_planning_line.standard_value)/prakruti_production_planning.standard_yield_qty AS product_qty, 
        --prakruti_production_planning.reserved_qty, 
        --prakruti_production_planning.customer_id, 
        --prakruti_production_planning.vendor_id, 
        prakruti_production_planning.remarks,
        prakruti_production_planning.write_date AS create_date,
        prakruti_production_planning.write_date AS write_date,
        prakruti_production_planning.write_uid AS write_uid,
        prakruti_production_planning.create_uid AS create_uid
    FROM 
        prakruti_production_planning JOIN
        prakruti_production_planning_line ON 
        prakruti_production_planning.id = prakruti_production_planning_line.planning_id 
    WHERE
        prakruti_production_planning.id = $1
    ) AS C;

RETURN qty;
                                
END;
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION public.update_planning(integer)
  OWNER TO odoo;
  
  
  
CREATE OR REPLACE FUNCTION public.purchase_invoice_to_purchase_order_lower_po(integer,integer)
  RETURNS integer AS
$BODY$
DECLARE

c_line INTEGER;
t_line INTEGER;

BEGIN

c_line = 0;
t_line = 0;
    
    
    
    
UPDATE 
	prakruti_purchase_line AS b 
SET 
	status = a.status 
FROM(
	SELECT 
		invoice_line_id,
		purchase_line_common_id,
		product_id,
		status 
	FROM 
		prakruti_purchase_invoice_line 
	WHERE 
		invoice_line_id= $1 
	) AS a 
WHERE 
	a.purchase_line_common_id = b.id AND 
	a.product_id = b.product_id;

SELECT 
	count(prakruti_purchase_line.id) INTO c_line 
FROM 
	prakruti_purchase_line INNER JOIN 
	prakruti_purchase_order ON 
	prakruti_purchase_order.id = prakruti_purchase_line.purchase_line_id INNER JOIN 
	prakruti_purchase_invoice ON 
	prakruti_purchase_order.id = prakruti_purchase_invoice.po_num 
WHERE 
	prakruti_purchase_line.status = 'close' AND 
	prakruti_purchase_invoice.id = CAST($1 AS INTEGER);

SELECT 
	count(prakruti_purchase_line.id) INTO t_line 
FROM 
	prakruti_purchase_line INNER JOIN 
	prakruti_purchase_order ON 
	prakruti_purchase_order.id = prakruti_purchase_line.purchase_line_id INNER JOIN 
	prakruti_purchase_invoice ON 
	prakruti_purchase_order.id = prakruti_purchase_invoice.po_num 
WHERE 
	prakruti_purchase_invoice.id = CAST($1 AS INTEGER);

IF c_line = t_line THEN
	UPDATE 
		prakruti_purchase_order 
	SET 
		state = 'order_close' ,order_close_flag=1
	WHERE 
		prakruti_purchase_order.id = $2;
	UPDATE 
		prakruti_purchase_invoice 
	SET 
		order_close_flag = 1 
	WHERE 
		id = $1;
	UPDATE 
		prakruti_purchase_invoice 
	SET 
		status = 'close' 
	WHERE 
		po_num = $2;
ELSE	
	UPDATE 
		prakruti_purchase_invoice 
	SET 
		order_close_pending = 1 
	WHERE 
		id = $1;
	UPDATE 
		prakruti_purchase_invoice 
	SET 
		status = 'pending' 
	WHERE 
		id = $1;
END IF;

RETURN 0;

END;
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION public.purchase_invoice_to_purchase_order_lower_po(integer,integer)
  OWNER TO odoo;
  
  
CREATE OR REPLACE FUNCTION public.purchase_invoice_to_purchase_order_upper_po(integer,integer)
  RETURNS integer AS
$BODY$
DECLARE

close_line INTEGER;
total_line INTEGER;

BEGIN

close_line = 0;
total_line = 0;


UPDATE 
	prakruti_purchase_line AS b 
SET 
	status = a.status 
FROM(
	SELECT 
		invoice_line_id,
		purchase_line_common_id,
		product_id,
		status 
	FROM 
		prakruti_purchase_invoice_line 
	WHERE 
		invoice_line_id = $1 
	) AS a 
WHERE 	
	a.purchase_line_common_id = b.id AND 
	a.product_id = b.product_id;

SELECT 
	count(prakruti_purchase_line.id) INTO close_line 
FROM 
	prakruti_purchase_line INNER JOIN 
	prakruti_purchase_order ON 
	prakruti_purchase_order.id = prakruti_purchase_line.purchase_line_id INNER JOIN 
	prakruti_purchase_invoice ON 
	prakruti_purchase_order.id = prakruti_purchase_invoice.po_num 
WHERE 
	prakruti_purchase_line.status = 'close' AND 
	prakruti_purchase_invoice.id = CAST($1 AS INTEGER);

SELECT 
	count(prakruti_purchase_line.id) INTO total_line 
FROM 
	prakruti_purchase_line INNER JOIN 
	prakruti_purchase_order ON 
	prakruti_purchase_order.id = prakruti_purchase_line.purchase_line_id INNER JOIN 
	prakruti_purchase_invoice ON 
	prakruti_purchase_order.id = prakruti_purchase_invoice.po_num 
WHERE 	
	prakruti_purchase_invoice.id = CAST($1 AS INTEGER);

IF close_line = total_line THEN
	UPDATE 
		prakruti_purchase_order 
	SET 
		state = 'order_close' ,order_close_flag=1
	WHERE 
		prakruti_purchase_order.id= $2;
	UPDATE 
		prakruti_purchase_invoice 
	SET 
		order_close_flag = 1 
	WHERE 
		id = $1;
	UPDATE 
		prakruti_purchase_invoice 
	SET 
		status = 'close' 
	WHERE 
		po_num = $2;
ELSE	
	UPDATE 
		prakruti_purchase_invoice 
	SET 
		order_close_pending = 1 
	WHERE 
		id = $1;
	UPDATE 
		prakruti_purchase_invoice 
	SET 
		status = 'pending' 
	WHERE 
		id = $1;
END IF;

RETURN 0;

END;
$BODY$
LANGUAGE plpgsql VOLATILE
COST 100;
ALTER FUNCTION public.purchase_invoice_to_purchase_order_upper_po(integer,integer)
OWNER TO odoo;



  
  
CREATE OR REPLACE FUNCTION public.revise_store_approve_request(integer,character varying)
  RETURNS character varying AS
$BODY$
DECLARE 
qty   integer;
line_id INTEGER;
approve_qty INTEGER;
BEGIN

qty = 0;
line_id = 0;
approve_qty=0;

SELECT 
	prakruti_store_approve_request_item.request_line_id INTO line_id
FROM 
	prakruti_store_approve_request_item JOIN
	prakruti_store_approve_request ON 
	prakruti_store_approve_request_item.main_id = prakruti_store_approve_request.id 
WHERE 
	prakruti_store_approve_request_item.main_id = $1 AND 
	prakruti_store_approve_request.id =$1 AND 
	prakruti_store_approve_request.request_no = $2;
	
SELECT 
	prakruti_store_approve_request_item.approved_quantity INTO approve_qty
FROM 
	prakruti_store_approve_request_item JOIN
	prakruti_store_approve_request ON 
	prakruti_store_approve_request_item.main_id = prakruti_store_approve_request.id 
WHERE 
	prakruti_store_approve_request_item.main_id = $1 AND 
	prakruti_store_approve_request.id =$1 AND 
	prakruti_store_approve_request.request_no = $2;
	
IF (line_id > 0 AND approve_qty > 0) THEN

    UPDATE 
            prakruti_store_approve_request 
    SET 
            revise_status = 'revise_done',
            revise_no = revise_no + 1,
            revise_remarks_update = revise_remarks_update ||e'\n' 
            || '--------------------------' ||e'\n' 
            || 'Revision Done in ' ||e'\n' 
            || 'Store Approve Request' ||e'\n' 
            || 'Revision No ' ||e'\n' 
            || revise_no + 1 ||e'\n' 
            || 'Remarks which was entered was ' ||e'\n' 
            || revise_remarks ||e'\n' 
            || 'Which was Revised By ' ||e'\n' 
            || revise_done_by 
    FROM
        ( 
            SELECT 
                    res_partner.name AS revise_done_by 
            FROM 
                    prakruti_store_approve_request JOIN 
                    res_users ON 
                    prakruti_store_approve_request.revise_id = res_users.id JOIN 
                    res_partner ON res_users.partner_id = res_partner.id 
            WHERE 
                    prakruti_store_approve_request.id =$1 
                    ) AS revise_done_person_name 
    WHERE 
            prakruti_store_approve_request.id = $1;

    UPDATE 
            prakruti_store_request AS a 
    SET     
            revise_remarks_update = revise_remarks_update ||e'\n' 
            || '--------------------------' ||e'\n' 
            || 'Revision Done in ' ||e'\n' 
            || 'Store Approve Request' ||e'\n' 
            || 'Remarks which was entered was ' ||e'\n' 
            || b.revise_remarks ||e'\n' 
            || 'Which was Revised By ' ||e'\n' 
            || b.revise_done_by 
    FROM( 
            SELECT 
                    res_partner.name AS revise_done_by,
                    prakruti_store_approve_request.revise_remarks,
                    prakruti_store_approve_request.request_no 
            FROM 
                    prakruti_store_approve_request JOIN 
                    res_users ON 
                    prakruti_store_approve_request.revise_id = res_users.id JOIN 
                    res_partner ON res_users.partner_id = res_partner.id 
            WHERE 
                    prakruti_store_approve_request.id = $1 AND 
                    prakruti_store_approve_request.request_no = $2
        ) AS b 
    WHERE 
            a.store_request_no = b.request_no AND
            a.store_request_no = $2;

    UPDATE 
            prakruti_store_request_item AS a 
    SET 
            product_id = b.product_id,
            requested_quantity = b.requested_quantity,
            uom_id = b.uom_id,
            description= b.description,
            remarks= b.remarks 
    FROM( 
            SELECT 
                    prakruti_store_approve_request_item.product_id,
                    prakruti_store_approve_request_item.requested_quantity,
                    prakruti_store_approve_request_item.request_line_id,                    prakruti_store_approve_request_item.uom_id,
                    prakruti_store_approve_request_item.description,
                    prakruti_store_approve_request_item.remarks 
            FROM 
                    prakruti_store_approve_request_item JOIN 
                    prakruti_store_approve_request ON 
                    prakruti_store_approve_request.id = prakruti_store_approve_request_item.main_id 
            WHERE 
                    prakruti_store_approve_request.id = $1 AND 
                    prakruti_store_approve_request.request_no = $2 AND 
                    prakruti_store_approve_request_item.main_id = $1
        ) AS b 
    WHERE 
            a.id = b.request_line_id ;	
            

    UPDATE 
            prakruti_store_issue AS a 
    SET  
            revise_remarks_update = revise_remarks_update ||e'\n' 
            || '--------------------------' ||e'\n' 
            || 'Revision Done in ' ||e'\n' 
            || 'Store Approve Request' ||e'\n' 
            || 'Remarks which was entered was ' ||e'\n' 
            || b.revise_remarks ||e'\n' 
            || 'Which was Revised By ' ||e'\n' 
            || b.revise_done_by 
    FROM( 
            SELECT 
                    res_partner.name AS revise_done_by,
                    prakruti_store_approve_request.revise_remarks,
                    prakruti_store_approve_request.request_no 
            FROM 
                    prakruti_store_approve_request JOIN 
                    res_users ON 
                    prakruti_store_approve_request.revise_id = res_users.id JOIN 
                    res_partner ON 
                    res_users.partner_id = res_partner.id 
            WHERE
                    prakruti_store_approve_request.id = $1 AND 
                    prakruti_store_approve_request.request_no = $2
        ) AS b 
    WHERE 
            a.request_no = b.request_no AND
            a.request_no = $2;
            
    UPDATE 
            prakruti_store_issue_item AS a 
    SET 
            product_id = b.product_id,
            approved_quantity = b.approved_quantity,
            uom_id = b.uom_id,
            description= b.description,
            remarks= b.remarks
    FROM( 
            SELECT 
                    prakruti_store_approve_request_item.product_id,
                    prakruti_store_approve_request_item.approved_quantity,
                    prakruti_store_approve_request_item.request_line_id,
                    prakruti_store_approve_request_item.uom_id,
                    prakruti_store_approve_request_item.description,
                    prakruti_store_approve_request_item.remarks
            FROM 
                    prakruti_store_approve_request_item JOIN 
                    prakruti_store_approve_request ON 
                    prakruti_store_approve_request.id = prakruti_store_approve_request_item.main_id 
            WHERE 
                    prakruti_store_approve_request.id = $1 AND 
                    prakruti_store_approve_request.request_no = $2 AND
                    prakruti_store_approve_request_item.main_id = $1
                    ) AS b 
    WHERE 
            a.request_line_id = b.request_line_id ;
    UPDATE 
        prakruti_store_approve_request 
    SET 
        revise_id = NULL,
        revise_remarks = '' 
    WHERE 
        id = $1;
        
ELSE
        RETURN 'Record Cannot be Revised';
END IF;

RETURN qty;
                                
END;
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION public.revise_store_approve_request(integer,character varying)
  OWNER TO odoo;
  
  
  
  
  CREATE OR REPLACE FUNCTION public.revise_store_issue(INTEGER,INTEGER,INTEGER,INTEGER,INTEGER,INTEGER,INTEGER,INTEGER,INTEGER,INTEGER)
  RETURNS INTEGER AS
$BODY$
DECLARE 


line_id INTEGER;
issue_qty INTEGER;
extra_qty INTEGER;
come_from CHARACTER VARYING;
syrup_packing_bm_id INTEGER;
syrup_bm_id INTEGER;

BEGIN

line_id = 0;
issue_qty=0;
extra_qty=0;
come_from='';
syrup_packing_bm_id=0;
syrup_bm_id=0;
		

-- STORE ISSUE MAIN TABLE
		
UPDATE
        prakruti_store_issue
SET 
        revise_status = 'revise_done',
        revise_no = revise_no + 1,
        revise_remarks_update = revise_remarks_update ||e'\n' 
        || '--------------------------' ||e'\n' 
        || 'Revision Done in ' ||e'\n' 
        || 'Store Issue' ||e'\n' 
        || 'Revision No ' ||e'\n' 
        || revise_no + 1 ||e'\n' 
        || 'Remarks which was entered was ' ||e'\n' 
        || revise_remarks ||e'\n' 
        || 'Which was Revised By ' ||e'\n' 
        || revise_done_by 
FROM
    ( 
        SELECT
                res_partner.name AS revise_done_by 
        FROM 
                prakruti_store_issue JOIN 
                res_users ON 
                prakruti_store_issue.revise_id = res_users.id JOIN 
                res_partner ON res_users.partner_id = res_partner.id 
        WHERE 
                prakruti_store_issue.id =$1 
    ) AS revise_done_person_name 
WHERE 
    prakruti_store_issue.id = $1;
    
-- STORE REQUEST MAIN TABLE FOR EXTRACTION BOM


UPDATE 
        prakruti_store_request AS a 
SET     
        revise_remarks_update = revise_remarks_update ||e'\n' 
        || '--------------------------' ||e'\n' 
        || 'Revision Done in ' ||e'\n' 
        || 'Store Issue' ||e'\n' 
        || 'Remarks which was entered was ' ||e'\n' 
        || b.revise_remarks ||e'\n' 
        || 'Which was Revised By ' ||e'\n' 
        || b.revise_done_by 
FROM( 
        SELECT 
                res_partner.name AS revise_done_by,
                prakruti_store_issue.revise_remarks,
                prakruti_store_issue.subplant_id,
                prakruti_store_issue.extraction_bom_id 
        FROM 
                prakruti_store_issue JOIN 
                res_users ON 
                prakruti_store_issue.revise_id = res_users.id JOIN 
                res_partner ON res_users.partner_id = res_partner.id 
        WHERE 
                prakruti_store_issue.id = $1
    ) AS b 
WHERE
    a.subplant_id = $2 AND
    a.batch_no = $3 AND 
    a.extraction_bom_id = $4 AND
    a.coming_from = 'Extraction BOM' AND
    a.store_request_no = 'From Production';

    
-- STORE REQUEST GRID TABLE FOR ALL BOM

UPDATE 
        prakruti_store_request_item AS a 
SET 
        product_id = b.product_id,
        requested_quantity = b.approved_quantity,
        uom_id = b.uom_id,
        description = b.description  
FROM( 
        SELECT 
                prakruti_store_issue_item.product_id,
                prakruti_store_issue_item.approved_quantity,
                prakruti_store_issue_item.grid_common_id_bom,
                prakruti_store_issue_item.uom_id,
                prakruti_store_issue_item.description,
                prakruti_store_issue_item.request_line_id  
        FROM 
                prakruti_store_issue_item JOIN 
                prakruti_store_issue ON 
                prakruti_store_issue.id = prakruti_store_issue_item.main_id 
        WHERE 
                prakruti_store_issue.subplant_id = $2 AND 
                prakruti_store_issue_item.main_id = $1
                ) AS b 
WHERE 
        a.grid_common_id = b.grid_common_id_bom ;
    
-- STORE APPROVE REQUEST MAIN TABLE FOR EXTRACTION BOM


UPDATE 
        prakruti_store_approve_request AS a 
SET     
        revise_remarks_update = revise_remarks_update ||e'\n' 
        || '--------------------------' ||e'\n' 
        || 'Revision Done in ' ||e'\n' 
        || 'Store Issue' ||e'\n' 
        || 'Remarks which was entered was ' ||e'\n' 
        || b.revise_remarks ||e'\n' 
        || 'Which was Revised By ' ||e'\n' 
        || b.revise_done_by 
FROM( 
        SELECT 
                res_partner.name AS revise_done_by,
                prakruti_store_issue.revise_remarks,
                prakruti_store_issue.subplant_id,
                prakruti_store_issue.extraction_bom_id 
        FROM 
                prakruti_store_issue JOIN 
                res_users ON 
                prakruti_store_issue.revise_id = res_users.id JOIN 
                res_partner ON res_users.partner_id = res_partner.id 
        WHERE 
                prakruti_store_issue.id = $1
    ) AS b 
WHERE
    a.subplant_id = $2 AND
    a.batch_no = $3 AND 
    a.extraction_bom_id = $4 AND
    a.coming_from = 'Extraction BOM' AND
    a.request_no = 'From Production';

    
-- STORE APPROVE REQUEST GRID TABLE FOR ALL BOM

UPDATE 
        prakruti_store_approve_request_item AS a 
SET 
        product_id = b.product_id,
        requested_quantity = b.approved_quantity,
        approved_quantity = b.approved_quantity,
        uom_id = b.uom_id,
        description = b.description  
FROM( 
        SELECT 
                prakruti_store_issue_item.product_id,
                prakruti_store_issue_item.approved_quantity,
                prakruti_store_issue_item.grid_common_id_bom,
                prakruti_store_issue_item.uom_id,
                prakruti_store_issue_item.description,
                prakruti_store_issue_item.request_line_id  
        FROM 
                prakruti_store_issue_item JOIN 
                prakruti_store_issue ON 
                prakruti_store_issue.id = prakruti_store_issue_item.main_id 
        WHERE 
                prakruti_store_issue.subplant_id = $2 AND 
                prakruti_store_issue_item.main_id = $1
                ) AS b 
WHERE 
        a.grid_common_id = b.grid_common_id_bom ;
    
    
-- EXTRACTION BOM MAIN TABLE                
                
UPDATE 
        prakruti_bill_of_material AS a 
SET     
        revise_remarks_update = revise_remarks_update ||e'\n' 
        || '--------------------------' ||e'\n' 
        || 'Revision Done in ' ||e'\n' 
        || 'Store Issue' ||e'\n' 
        || 'Remarks which was entered was ' ||e'\n' 
        || b.revise_remarks ||e'\n' 
        || 'Which was Revised By ' ||e'\n' 
        || b.revise_done_by 
FROM( 
        SELECT 
                res_partner.name AS revise_done_by,
                prakruti_store_issue.revise_remarks,
                prakruti_store_issue.subplant_id,
                prakruti_store_issue.extraction_bom_id
        FROM 
                prakruti_store_issue JOIN 
                res_users ON 
                prakruti_store_issue.revise_id = res_users.id JOIN 
                res_partner ON res_users.partner_id = res_partner.id 
        WHERE 
                prakruti_store_issue.id = $1
        ) AS b 
WHERE 
        a.id = $4 AND 
        a.batch_id = $3 AND 
        a.subplant_id = $2;

			
-- EXTRACTION BOM GRID TABLE



UPDATE 
        prakruti_bill_of_material_line AS a 
SET 
        material_id = b.product_id,
        actual_qty = b.issued_quantity,
        uom_id = b.uom_id,
        description = b.description,
        extra_qty = b.extra_issued_qty  
FROM( 
        SELECT 
                prakruti_store_issue_item.product_id,
                prakruti_store_issue_item.issued_quantity,
                prakruti_store_issue_item.grid_common_id_bom,
                prakruti_store_issue_item.uom_id,
                prakruti_store_issue_item.description,
                prakruti_store_issue_item.extra_issued_qty
        FROM 
                prakruti_store_issue_item JOIN 
                prakruti_store_issue ON 
                prakruti_store_issue.id = prakruti_store_issue_item.main_id 
        WHERE
                prakruti_store_issue_item.main_id = $1        
        ) AS b 
WHERE 
        a.id = b.grid_common_id_bom;
        
-- STORE REQUEST MAIN TABLE FOR SYRUP BOM


UPDATE 
        prakruti_store_request AS a 
SET     
        revise_remarks_update = revise_remarks_update ||e'\n' 
        || '--------------------------' ||e'\n' 
        || 'Revision Done in ' ||e'\n' 
        || 'Store Issue' ||e'\n' 
        || 'Remarks which was entered was ' ||e'\n' 
        || b.revise_remarks ||e'\n' 
        || 'Which was Revised By ' ||e'\n' 
        || b.revise_done_by 
FROM( 
        SELECT 
                res_partner.name AS revise_done_by,
                prakruti_store_issue.revise_remarks,
                prakruti_store_issue.subplant_id,
                prakruti_store_issue.extraction_bom_id 
        FROM 
                prakruti_store_issue JOIN 
                res_users ON 
                prakruti_store_issue.revise_id = res_users.id JOIN 
                res_partner ON res_users.partner_id = res_partner.id 
        WHERE 
                prakruti_store_issue.id = $1
    ) AS b 
WHERE
    a.subplant_id = $2 AND
    a.batch_no = $3 AND 
    a.syrup_bom_id = $5 AND
    a.coming_from = 'Syrup BOM' AND
    a.store_request_no = 'From Production'; 

    
-- STORE REQUEST MAIN TABLE FOR SYRUP PACKING BOM


UPDATE 
        prakruti_store_request AS a 
SET     
        revise_remarks_update = revise_remarks_update ||e'\n' 
        || '--------------------------' ||e'\n' 
        || 'Revision Done in ' ||e'\n' 
        || 'Store Issue' ||e'\n' 
        || 'Remarks which was entered was ' ||e'\n' 
        || b.revise_remarks ||e'\n' 
        || 'Which was Revised By ' ||e'\n' 
        || b.revise_done_by 
FROM( 
        SELECT 
                res_partner.name AS revise_done_by,
                prakruti_store_issue.revise_remarks,
                prakruti_store_issue.subplant_id,
                prakruti_store_issue.extraction_bom_id 
        FROM 
                prakruti_store_issue JOIN 
                res_users ON 
                prakruti_store_issue.revise_id = res_users.id JOIN 
                res_partner ON res_users.partner_id = res_partner.id 
        WHERE 
                prakruti_store_issue.id = $1
    ) AS b 
WHERE
    a.subplant_id = $2 AND
    a.batch_no = $3 AND 
    a.syrup_packing_bom_id = $6 AND
    a.coming_from = 'Syrup BOM' AND
    a.store_request_no = 'From Production';
    
        
-- STORE APPROVE REQUEST MAIN TABLE FOR SYRUP BOM


UPDATE 
        prakruti_store_approve_request AS a 
SET     
        revise_remarks_update = revise_remarks_update ||e'\n' 
        || '--------------------------' ||e'\n' 
        || 'Revision Done in ' ||e'\n' 
        || 'Store Issue' ||e'\n' 
        || 'Remarks which was entered was ' ||e'\n' 
        || b.revise_remarks ||e'\n' 
        || 'Which was Revised By ' ||e'\n' 
        || b.revise_done_by 
FROM( 
        SELECT 
                res_partner.name AS revise_done_by,
                prakruti_store_issue.revise_remarks,
                prakruti_store_issue.subplant_id,
                prakruti_store_issue.extraction_bom_id 
        FROM 
                prakruti_store_issue JOIN 
                res_users ON 
                prakruti_store_issue.revise_id = res_users.id JOIN 
                res_partner ON res_users.partner_id = res_partner.id 
        WHERE 
                prakruti_store_issue.id = $1
    ) AS b 
WHERE
    a.subplant_id = $2 AND
    a.batch_no = $3 AND 
    a.syrup_bom_id = $5 AND
    a.coming_from = 'Syrup BOM' AND
    a.request_no = 'From Production'; 

    
-- STORE APPROVE REQUEST MAIN TABLE FOR SYRUP PACKING BOM


UPDATE 
        prakruti_store_approve_request AS a 
SET     
        revise_remarks_update = revise_remarks_update ||e'\n' 
        || '--------------------------' ||e'\n' 
        || 'Revision Done in ' ||e'\n' 
        || 'Store Issue' ||e'\n' 
        || 'Remarks which was entered was ' ||e'\n' 
        || b.revise_remarks ||e'\n' 
        || 'Which was Revised By ' ||e'\n' 
        || b.revise_done_by 
FROM( 
        SELECT 
                res_partner.name AS revise_done_by,
                prakruti_store_issue.revise_remarks,
                prakruti_store_issue.subplant_id,
                prakruti_store_issue.extraction_bom_id 
        FROM 
                prakruti_store_issue JOIN 
                res_users ON 
                prakruti_store_issue.revise_id = res_users.id JOIN 
                res_partner ON res_users.partner_id = res_partner.id 
        WHERE 
                prakruti_store_issue.id = $1
    ) AS b 
WHERE
    a.subplant_id = $2 AND
    a.batch_no = $3 AND 
    a.syrup_packing_bom_id = $6 AND
    a.coming_from = 'Syrup BOM' AND
    a.request_no = 'From Production';
    
    
-- SYRUP BOM MAIN TABLE                
                
UPDATE 
        prakruti_syrup AS a 
SET     
        revise_remarks_update = revise_remarks_update ||e'\n' 
        || '--------------------------' ||e'\n' 
        || 'Revision Done in ' ||e'\n' 
        || 'Store Issue' ||e'\n' 
        || 'Remarks which was entered was ' ||e'\n' 
        || b.revise_remarks ||e'\n' 
        || 'Which was Revised By ' ||e'\n' 
        || b.revise_done_by 
FROM( 
        SELECT 
                res_partner.name AS revise_done_by,
                prakruti_store_issue.revise_remarks,
                prakruti_store_issue.subplant_id,
                prakruti_store_issue.extraction_bom_id
        FROM 
                prakruti_store_issue JOIN 
                res_users ON 
                prakruti_store_issue.revise_id = res_users.id JOIN 
                res_partner ON res_users.partner_id = res_partner.id 
        WHERE 
                prakruti_store_issue.id = $1
        ) AS b 
WHERE 
        a.id = $5 AND 
        a.batch_no = $3 AND 
        a.subplant_id = $2;        

-- SYRUP BOM MAIN TABLE FOR PACKING               
                
UPDATE 
        prakruti_syrup AS a 
SET     
        revise_remarks_update = revise_remarks_update ||e'\n' 
        || '--------------------------' ||e'\n' 
        || 'Revision Done in ' ||e'\n' 
        || 'Store Issue' ||e'\n' 
        || 'Remarks which was entered was ' ||e'\n' 
        || b.revise_remarks ||e'\n' 
        || 'Which was Revised By ' ||e'\n' 
        || b.revise_done_by 
FROM( 
        SELECT 
                res_partner.name AS revise_done_by,
                prakruti_store_issue.revise_remarks,
                prakruti_store_issue.subplant_id,
                prakruti_store_issue.extraction_bom_id
        FROM 
                prakruti_store_issue JOIN 
                res_users ON 
                prakruti_store_issue.revise_id = res_users.id JOIN 
                res_partner ON res_users.partner_id = res_partner.id 
        WHERE 
                prakruti_store_issue.id = $1
        ) AS b 
WHERE 
        a.id = $6 AND 
        a.batch_no = $3 AND 
        a.subplant_id = $2;   
        
        
-- SYRUP BOM GRID TABLE AND PACKING



UPDATE 
        prakruti_syrup_line AS a 
SET 
        product_id = b.product_id,
        actual_weight = b.issued_quantity,
        uom_id = b.uom_id,
        description = b.description,
        extra_qty = b.extra_issued_qty  
FROM( 
        SELECT 
                prakruti_store_issue_item.product_id,
                prakruti_store_issue_item.issued_quantity,
                prakruti_store_issue_item.grid_common_id_bom,
                prakruti_store_issue_item.uom_id,
                prakruti_store_issue_item.description,
                prakruti_store_issue_item.extra_issued_qty
        FROM 
                prakruti_store_issue_item JOIN 
                prakruti_store_issue ON 
                prakruti_store_issue.id = prakruti_store_issue_item.main_id 
        WHERE
                prakruti_store_issue_item.main_id = $1        
        ) AS b 
WHERE 
        a.id = b.grid_common_id_bom;  
        
-- PACKING LINE

UPDATE 
        prakruti_syrup_line_packing AS a 
SET 
        product_id = b.product_id,
        actual_weight = b.issued_quantity,
        uom_id = b.uom_id,
        description = b.description,
        extra_qty = b.extra_issued_qty,
        extra_issued_packing = b.extra_issued_packing
FROM( 
        SELECT 
                prakruti_store_issue_item.product_id,
                prakruti_store_issue_item.issued_quantity,
                prakruti_store_issue_item.grid_common_id_bom,
                prakruti_store_issue_item.uom_id,
                prakruti_store_issue_item.description,
                prakruti_store_issue_item.extra_issued_qty,
                prakruti_store_issue_item.extra_issued_packing
        FROM 
                prakruti_store_issue_item JOIN 
                prakruti_store_issue ON 
                prakruti_store_issue.id = prakruti_store_issue_item.main_id 
        WHERE
                prakruti_store_issue_item.main_id = $1        
        ) AS b 
WHERE 
        a.id = b.grid_common_id_bom;
        

----------------------------------------------
----------------------------------------------



-- STORE REQUEST MAIN TABLE FOR TABLET BOM


UPDATE 
        prakruti_store_request AS a 
SET     
        revise_remarks_update = revise_remarks_update ||e'\n' 
        || '--------------------------' ||e'\n' 
        || 'Revision Done in ' ||e'\n' 
        || 'Store Issue' ||e'\n' 
        || 'Remarks which was entered was ' ||e'\n' 
        || b.revise_remarks ||e'\n' 
        || 'Which was Revised By ' ||e'\n' 
        || b.revise_done_by 
FROM( 
        SELECT 
                res_partner.name AS revise_done_by,
                prakruti_store_issue.revise_remarks,
                prakruti_store_issue.subplant_id,
                prakruti_store_issue.extraction_bom_id 
        FROM 
                prakruti_store_issue JOIN 
                res_users ON 
                prakruti_store_issue.revise_id = res_users.id JOIN 
                res_partner ON res_users.partner_id = res_partner.id 
        WHERE 
                prakruti_store_issue.id = $1
    ) AS b 
WHERE
    a.subplant_id = $2 AND
    a.batch_no = $3 AND 
    a.tablet_bom_id = $7 AND
    a.coming_from = 'Tablet BOM' AND
    a.store_request_no = 'From Production'; 

    
-- STORE REQUEST MAIN TABLE FOR TABLET PACKING BOM


UPDATE 
        prakruti_store_request AS a 
SET     
        revise_remarks_update = revise_remarks_update ||e'\n' 
        || '--------------------------' ||e'\n' 
        || 'Revision Done in ' ||e'\n' 
        || 'Store Issue' ||e'\n' 
        || 'Remarks which was entered was ' ||e'\n' 
        || b.revise_remarks ||e'\n' 
        || 'Which was Revised By ' ||e'\n' 
        || b.revise_done_by 
FROM( 
        SELECT 
                res_partner.name AS revise_done_by,
                prakruti_store_issue.revise_remarks,
                prakruti_store_issue.subplant_id,
                prakruti_store_issue.extraction_bom_id 
        FROM 
                prakruti_store_issue JOIN 
                res_users ON 
                prakruti_store_issue.revise_id = res_users.id JOIN 
                res_partner ON res_users.partner_id = res_partner.id 
        WHERE 
                prakruti_store_issue.id = $1
    ) AS b 
WHERE
    a.subplant_id = $2 AND
    a.batch_no = $3 AND 
    a.tablet_packing_bom_id = $8 AND
    a.coming_from = 'Tablet BOM' AND
    a.store_request_no = 'From Production';
    
    
    

-- STORE APPROVE REQUEST MAIN TABLE FOR TABLET BOM


UPDATE 
        prakruti_store_approve_request AS a 
SET     
        revise_remarks_update = revise_remarks_update ||e'\n' 
        || '--------------------------' ||e'\n' 
        || 'Revision Done in ' ||e'\n' 
        || 'Store Issue' ||e'\n' 
        || 'Remarks which was entered was ' ||e'\n' 
        || b.revise_remarks ||e'\n' 
        || 'Which was Revised By ' ||e'\n' 
        || b.revise_done_by 
FROM( 
        SELECT 
                res_partner.name AS revise_done_by,
                prakruti_store_issue.revise_remarks,
                prakruti_store_issue.subplant_id,
                prakruti_store_issue.extraction_bom_id 
        FROM 
                prakruti_store_issue JOIN 
                res_users ON 
                prakruti_store_issue.revise_id = res_users.id JOIN 
                res_partner ON res_users.partner_id = res_partner.id 
        WHERE 
                prakruti_store_issue.id = $1
    ) AS b 
WHERE
    a.subplant_id = $2 AND
    a.batch_no = $3 AND 
    a.tablet_bom_id = $7 AND
    a.coming_from = 'Tablet BOM' AND
    a.request_no = 'From Production'; 

    
-- STORE APPROVE REQUEST MAIN TABLE FOR TABLET PACKING BOM


UPDATE 
        prakruti_store_approve_request AS a 
SET     
        revise_remarks_update = revise_remarks_update ||e'\n' 
        || '--------------------------' ||e'\n' 
        || 'Revision Done in ' ||e'\n' 
        || 'Store Issue' ||e'\n' 
        || 'Remarks which was entered was ' ||e'\n' 
        || b.revise_remarks ||e'\n' 
        || 'Which was Revised By ' ||e'\n' 
        || b.revise_done_by 
FROM( 
        SELECT 
                res_partner.name AS revise_done_by,
                prakruti_store_issue.revise_remarks,
                prakruti_store_issue.subplant_id,
                prakruti_store_issue.extraction_bom_id 
        FROM 
                prakruti_store_issue JOIN 
                res_users ON 
                prakruti_store_issue.revise_id = res_users.id JOIN 
                res_partner ON res_users.partner_id = res_partner.id 
        WHERE 
                prakruti_store_issue.id = $1
    ) AS b 
WHERE
    a.subplant_id = $2 AND
    a.batch_no = $3 AND 
    a.tablet_packing_bom_id = $8 AND
    a.coming_from = 'Tablet BOM' AND
    a.request_no = 'From Production';
    
-- TABLET BOM MAIN TABLE                
                
UPDATE 
        prakruti_tablet AS a 
SET     
        revise_remarks_update = revise_remarks_update ||e'\n' 
        || '--------------------------' ||e'\n' 
        || 'Revision Done in ' ||e'\n' 
        || 'Store Issue' ||e'\n' 
        || 'Remarks which was entered was ' ||e'\n' 
        || b.revise_remarks ||e'\n' 
        || 'Which was Revised By ' ||e'\n' 
        || b.revise_done_by 
FROM( 
        SELECT 
                res_partner.name AS revise_done_by,
                prakruti_store_issue.revise_remarks,
                prakruti_store_issue.subplant_id,
                prakruti_store_issue.extraction_bom_id
        FROM 
                prakruti_store_issue JOIN 
                res_users ON 
                prakruti_store_issue.revise_id = res_users.id JOIN 
                res_partner ON res_users.partner_id = res_partner.id 
        WHERE 
                prakruti_store_issue.id = $1
        ) AS b 
WHERE 
        a.id = $7 AND 
        a.batch_no = $3 AND 
        a.subplant_id = $2;        

-- TABLET BOM MAIN TABLE FOR PACKING               
                
UPDATE 
        prakruti_tablet AS a 
SET     
        revise_remarks_update = revise_remarks_update ||e'\n' 
        || '--------------------------' ||e'\n' 
        || 'Revision Done in ' ||e'\n' 
        || 'Store Issue' ||e'\n' 
        || 'Remarks which was entered was ' ||e'\n' 
        || b.revise_remarks ||e'\n' 
        || 'Which was Revised By ' ||e'\n' 
        || b.revise_done_by 
FROM( 
        SELECT 
                res_partner.name AS revise_done_by,
                prakruti_store_issue.revise_remarks,
                prakruti_store_issue.subplant_id,
                prakruti_store_issue.extraction_bom_id
        FROM 
                prakruti_store_issue JOIN 
                res_users ON 
                prakruti_store_issue.revise_id = res_users.id JOIN 
                res_partner ON res_users.partner_id = res_partner.id 
        WHERE 
                prakruti_store_issue.id = $1
        ) AS b 
WHERE 
        a.id = $8 AND 
        a.batch_no = $3 AND 
        a.subplant_id = $2;   
        
        
-- SYRUP BOM GRID TABLE AND PACKING



UPDATE 
        prakruti_tablet_line AS a 
SET 
        product_id = b.product_id,
        actual_weight = b.issued_quantity,
        uom_id = b.uom_id,
        description = b.description,
        extra_qty = b.extra_issued_qty  
FROM( 
        SELECT 
                prakruti_store_issue_item.product_id,
                prakruti_store_issue_item.issued_quantity,
                prakruti_store_issue_item.grid_common_id_bom,
                prakruti_store_issue_item.uom_id,
                prakruti_store_issue_item.description,
                prakruti_store_issue_item.extra_issued_qty
        FROM 
                prakruti_store_issue_item JOIN 
                prakruti_store_issue ON 
                prakruti_store_issue.id = prakruti_store_issue_item.main_id 
        WHERE
                prakruti_store_issue_item.main_id = $1        
        ) AS b 
WHERE 
        a.id = b.grid_common_id_bom;  
        
-- PACKING LINE

UPDATE 
        prakruti_tablet_line_packing AS a 
SET 
        product_id = b.product_id,
        actual_weight = b.issued_quantity,
        uom_id = b.uom_id,
        description = b.description,
        extra_qty = b.extra_issued_qty,
        extra_issued_packing = b.extra_issued_packing
FROM( 
        SELECT 
                prakruti_store_issue_item.product_id,
                prakruti_store_issue_item.issued_quantity,
                prakruti_store_issue_item.grid_common_id_bom,
                prakruti_store_issue_item.uom_id,
                prakruti_store_issue_item.description,
                prakruti_store_issue_item.extra_issued_qty,
                prakruti_store_issue_item.extra_issued_packing
        FROM 
                prakruti_store_issue_item JOIN 
                prakruti_store_issue ON 
                prakruti_store_issue.id = prakruti_store_issue_item.main_id 
        WHERE
                prakruti_store_issue_item.main_id = $1        
        ) AS b 
WHERE 
        a.id = b.grid_common_id_bom;
        
----------------------------------------------------------------------------------
----------------------------------------------------------------------------------

    
-- STORE REQUEST MAIN TABLE FOR POWDER BOM


UPDATE 
        prakruti_store_request AS a 
SET     
        revise_remarks_update = revise_remarks_update ||e'\n' 
        || '--------------------------' ||e'\n' 
        || 'Revision Done in ' ||e'\n' 
        || 'Store Issue' ||e'\n' 
        || 'Remarks which was entered was ' ||e'\n' 
        || b.revise_remarks ||e'\n' 
        || 'Which was Revised By ' ||e'\n' 
        || b.revise_done_by 
FROM( 
        SELECT 
                res_partner.name AS revise_done_by,
                prakruti_store_issue.revise_remarks,
                prakruti_store_issue.subplant_id,
                prakruti_store_issue.powder_bom_id 
        FROM 
                prakruti_store_issue JOIN 
                res_users ON 
                prakruti_store_issue.revise_id = res_users.id JOIN 
                res_partner ON res_users.partner_id = res_partner.id 
        WHERE 
                prakruti_store_issue.id = $1
    ) AS b 
WHERE
    a.subplant_id = $2 AND
    a.batch_no = $3 AND 
    a.powder_bom_id = $9 AND
    a.coming_from = 'Powder BOM' AND
    a.store_request_no = 'From Production'; 

    
-- STORE REQUEST MAIN TABLE FOR POWDER PACKING BOM


UPDATE 
        prakruti_store_request AS a 
SET     
        revise_remarks_update = revise_remarks_update ||e'\n' 
        || '--------------------------' ||e'\n' 
        || 'Revision Done in ' ||e'\n' 
        || 'Store Issue' ||e'\n' 
        || 'Remarks which was entered was ' ||e'\n' 
        || b.revise_remarks ||e'\n' 
        || 'Which was Revised By ' ||e'\n' 
        || b.revise_done_by 
FROM( 
        SELECT 
                res_partner.name AS revise_done_by,
                prakruti_store_issue.revise_remarks,
                prakruti_store_issue.subplant_id,
                prakruti_store_issue.powder_packing_bom_id 
        FROM 
                prakruti_store_issue JOIN 
                res_users ON 
                prakruti_store_issue.revise_id = res_users.id JOIN 
                res_partner ON res_users.partner_id = res_partner.id 
        WHERE 
                prakruti_store_issue.id = $1
    ) AS b 
WHERE
    a.subplant_id = $2 AND
    a.batch_no = $3 AND 
    a.powder_packing_bom_id = $10 AND
    a.coming_from = 'Powder BOM' AND
    a.store_request_no = 'From Production';
    
    
-- STORE APPROVE REQUEST MAIN TABLE FOR POWDER BOM


UPDATE 
        prakruti_store_approve_request AS a 
SET     
        revise_remarks_update = revise_remarks_update ||e'\n' 
        || '--------------------------' ||e'\n' 
        || 'Revision Done in ' ||e'\n' 
        || 'Store Issue' ||e'\n' 
        || 'Remarks which was entered was ' ||e'\n' 
        || b.revise_remarks ||e'\n' 
        || 'Which was Revised By ' ||e'\n' 
        || b.revise_done_by 
FROM( 
        SELECT 
                res_partner.name AS revise_done_by,
                prakruti_store_issue.revise_remarks,
                prakruti_store_issue.subplant_id,
                prakruti_store_issue.powder_bom_id 
        FROM 
                prakruti_store_issue JOIN 
                res_users ON 
                prakruti_store_issue.revise_id = res_users.id JOIN 
                res_partner ON res_users.partner_id = res_partner.id 
        WHERE 
                prakruti_store_issue.id = $1
    ) AS b 
WHERE
    a.subplant_id = $2 AND
    a.batch_no = $3 AND 
    a.powder_bom_id = $9 AND
    a.coming_from = 'Powder BOM' AND
    a.request_no = 'From Production'; 

    
-- STORE APPROVE REQUEST MAIN TABLE FOR POWDER PACKING BOM


UPDATE 
        prakruti_store_approve_request AS a 
SET     
        revise_remarks_update = revise_remarks_update ||e'\n' 
        || '--------------------------' ||e'\n' 
        || 'Revision Done in ' ||e'\n' 
        || 'Store Issue' ||e'\n' 
        || 'Remarks which was entered was ' ||e'\n' 
        || b.revise_remarks ||e'\n' 
        || 'Which was Revised By ' ||e'\n' 
        || b.revise_done_by 
FROM( 
        SELECT 
                res_partner.name AS revise_done_by,
                prakruti_store_issue.revise_remarks,
                prakruti_store_issue.subplant_id,
                prakruti_store_issue.powder_packing_bom_id 
        FROM 
                prakruti_store_issue JOIN 
                res_users ON 
                prakruti_store_issue.revise_id = res_users.id JOIN 
                res_partner ON res_users.partner_id = res_partner.id 
        WHERE 
                prakruti_store_issue.id = $1
    ) AS b 
WHERE
    a.subplant_id = $2 AND
    a.batch_no = $3 AND 
    a.powder_packing_bom_id = $10 AND
    a.coming_from = 'Powder BOM' AND
    a.request_no = 'From Production';
    
-- POWDER BOM MAIN TABLE                
                
UPDATE 
        prakruti_powder AS a 
SET     
        revise_remarks_update = revise_remarks_update ||e'\n' 
        || '--------------------------' ||e'\n' 
        || 'Revision Done in ' ||e'\n' 
        || 'Store Issue' ||e'\n' 
        || 'Remarks which was entered was ' ||e'\n' 
        || b.revise_remarks ||e'\n' 
        || 'Which was Revised By ' ||e'\n' 
        || b.revise_done_by 
FROM( 
        SELECT 
                res_partner.name AS revise_done_by,
                prakruti_store_issue.revise_remarks,
                prakruti_store_issue.subplant_id,
                prakruti_store_issue.powder_bom_id
        FROM 
                prakruti_store_issue JOIN 
                res_users ON 
                prakruti_store_issue.revise_id = res_users.id JOIN 
                res_partner ON res_users.partner_id = res_partner.id 
        WHERE 
                prakruti_store_issue.id = $1
        ) AS b 
WHERE 
        a.id = $9 AND 
        a.batch_no = $3 AND 
        a.subplant_id = $2;        

-- POWDER BOM MAIN TABLE FOR PACKING               
                
UPDATE 
        prakruti_powder AS a 
SET     
        revise_remarks_update = revise_remarks_update ||e'\n' 
        || '--------------------------' ||e'\n' 
        || 'Revision Done in ' ||e'\n' 
        || 'Store Issue' ||e'\n' 
        || 'Remarks which was entered was ' ||e'\n' 
        || b.revise_remarks ||e'\n' 
        || 'Which was Revised By ' ||e'\n' 
        || b.revise_done_by 
FROM( 
        SELECT 
                res_partner.name AS revise_done_by,
                prakruti_store_issue.revise_remarks,
                prakruti_store_issue.subplant_id,
                prakruti_store_issue.powder_packing_bom_id
        FROM 
                prakruti_store_issue JOIN 
                res_users ON 
                prakruti_store_issue.revise_id = res_users.id JOIN 
                res_partner ON res_users.partner_id = res_partner.id 
        WHERE 
                prakruti_store_issue.id = $1
        ) AS b 
WHERE 
        a.id = $10 AND 
        a.batch_no = $3 AND 
        a.subplant_id = $2;   
        
        
-- POWDER BOM GRID TABLE AND PACKING



UPDATE 
        prakruti_powder_line AS a 
SET 
        product_id = b.product_id,
        actual_weight = b.issued_quantity,
        uom_id = b.uom_id,
        description = b.description,
        extra_qty = b.extra_issued_qty  
FROM( 
        SELECT 
                prakruti_store_issue_item.product_id,
                prakruti_store_issue_item.issued_quantity,
                prakruti_store_issue_item.grid_common_id_bom,
                prakruti_store_issue_item.uom_id,
                prakruti_store_issue_item.description,
                prakruti_store_issue_item.extra_issued_qty
        FROM 
                prakruti_store_issue_item JOIN 
                prakruti_store_issue ON 
                prakruti_store_issue.id = prakruti_store_issue_item.main_id 
        WHERE
                prakruti_store_issue_item.main_id = $1        
        ) AS b 
WHERE 
        a.id = b.grid_common_id_bom;  
        
-- PACKING LINE

UPDATE 
        prakruti_powder_line_packing AS a 
SET 
        product_id = b.product_id,
        actual_weight = b.issued_quantity,
        uom_id = b.uom_id,
        description = b.description,
        extra_qty = b.extra_issued_qty,
        extra_issued_packing = b.extra_issued_packing
FROM( 
        SELECT 
                prakruti_store_issue_item.product_id,
                prakruti_store_issue_item.issued_quantity,
                prakruti_store_issue_item.grid_common_id_bom,
                prakruti_store_issue_item.uom_id,
                prakruti_store_issue_item.description,
                prakruti_store_issue_item.extra_issued_qty,
                prakruti_store_issue_item.extra_issued_packing
        FROM 
                prakruti_store_issue_item JOIN 
                prakruti_store_issue ON 
                prakruti_store_issue.id = prakruti_store_issue_item.main_id 
        WHERE
                prakruti_store_issue_item.main_id = $1        
        ) AS b 
WHERE 
        a.id = b.grid_common_id_bom;

        
        
UPDATE 
        prakruti_store_issue 
SET 
        revise_id = NULL,
        revise_remarks = '' 
WHERE 
        id = $1;


RETURN 0;
                                
END;
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION public.revise_store_issue(INTEGER,INTEGER,INTEGER,INTEGER,INTEGER,INTEGER,INTEGER,INTEGER,INTEGER,INTEGER)
  OWNER TO odoo;
    
    
  CREATE OR REPLACE FUNCTION public.revise_tablet_production(integer,integer,integer)
  RETURNS integer AS
$BODY$
DECLARE 
qty   integer;
BEGIN
qty = 0;

UPDATE 
	prakruti_tablet_production 
SET 
	revise_status = 'revise_done',
	revise_no = revise_no + 1,
	revise_remarks_update = revise_remarks_update ||e'\n' 
	|| '--------------------------' ||e'\n' 
	|| 'Revision Done in ' ||e'\n' 
	|| 'Extraction Tablet Production' ||e'\n' 
	|| 'Revision No ' ||e'\n' 
	|| revise_no + 1 ||e'\n' 
	|| 'Remarks which was entered was ' ||e'\n' 
	|| revise_remarks ||e'\n' 
	|| 'Which was Revised By ' ||e'\n' 
	|| revise_done_by 
FROM
(
	SELECT 
		res_partner.name AS revise_done_by 
	FROM 
		prakruti_tablet_production JOIN 
		res_users ON 
		prakruti_tablet_production.revise_id = res_users.id JOIN 
		res_partner ON 
		res_users.partner_id = res_partner.id 
	WHERE 
		prakruti_tablet_production.id = $1
) AS revise_done_person_name 
WHERE 
	prakruti_tablet_production.id = $1;

UPDATE 
	prakruti_batch_master AS a 
SET 
	revise_remarks_update = revise_remarks_update ||e'\n' 
	|| '--------------------------' ||e'\n' 
	|| 'Revision Done in ' ||e'\n'
	|| 'Extraction Tablet Production' ||e'\n'
	|| 'Remarks which was entered was ' ||e'\n'
	|| b.revise_remarks ||e'\n'
	|| 'Which was Revised By ' ||e'\n' 
	|| b.revise_done_by 
FROM(
	SELECT 
		res_partner.name AS revise_done_by,
		prakruti_tablet_production.revise_remarks,
		prakruti_tablet_production.batch_id 
	FROM 
		prakruti_tablet_production JOIN 
		res_users ON 
		prakruti_tablet_production.revise_id = res_users.id JOIN 
		res_partner ON 
		res_users.partner_id = res_partner.id 
	WHERE 
		prakruti_tablet_production.id = $1 AND 
		prakruti_tablet_production.batch_id = $2
) AS b 
WHERE 
	a.id = b.batch_id AND
	a.id = $2;

UPDATE 
	prakruti_production_transfer_note AS a 
SET 
	revise_remarks_update = revise_remarks_update ||e'\n' 
	|| '--------------------------' ||e'\n' 
	|| 'Revision Done in ' ||e'\n'
	|| 'Extraction Tablet Production' ||e'\n'
	|| 'Remarks which was entered was ' ||e'\n'
	|| b.revise_remarks ||e'\n'
	|| 'Which was Revised By ' ||e'\n' 
	|| b.revise_done_by 
FROM(
	SELECT 
		res_partner.name AS revise_done_by,
		prakruti_tablet_production.revise_remarks,
		prakruti_tablet_production.batch_id 
	FROM 
		prakruti_tablet_production JOIN 
		res_users ON 
		prakruti_tablet_production.revise_id = res_users.id JOIN 
		res_partner ON 
		res_users.partner_id = res_partner.id 
	WHERE 
		prakruti_tablet_production.id = $1 AND 
		prakruti_tablet_production.batch_id = $2
) AS b 
WHERE 
	a.batch_no = b.batch_id AND
	a.batch_no = $2;

UPDATE 
	prakruti_production_transfer_note_line AS a 
SET 
	total_output_qty = b.total_output_yeild 
FROM(
	SELECT
		prakruti_tablet_production.batch_id,
		prakruti_tablet_production.total_output_yeild,
		product_product.id AS subplant_id
	FROM 
		prakruti_tablet_production JOIN 
		prakruti_sub_plant ON 
		prakruti_tablet_production.subplant_id = prakruti_sub_plant.id JOIN 
		product_product ON 
		prakruti_sub_plant.subplant_id = product_product.id 
	WHERE 
		prakruti_tablet_production.id = $1 AND 
		prakruti_tablet_production.batch_id = $2
) AS b 
WHERE 
	a.product_id = b.subplant_id AND
	a.product_id = $3;
UPDATE 
	prakruti_tablet_production 
SET 
	revise_id = NULL,
	revise_remarks = '' 
WHERE 
	prakruti_tablet_production.id = $1;


RETURN qty;
                                
END;
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION public.revise_tablet_production(integer,integer,integer)
  OWNER TO odoo;
  
  
CREATE OR REPLACE FUNCTION public.revise_production(integer,integer,integer)
  RETURNS integer AS
$BODY$
DECLARE 
qty   integer;
BEGIN
qty = 0;

UPDATE
	prakruti_production
SET 
        revise_status = 'revise_done',
        revise_no = revise_no + 1,
        revise_remarks_update = revise_remarks_update ||e'\n' 
        || '--------------------------' ||e'\n' 
        || 'Revision Done in ' ||e'\n' 
        || 'Extraction Production' ||e'\n' 
        || 'Revision No ' ||e'\n' 
        || revise_no + 1 ||e'\n' 
        || 'Remarks which was entered was ' ||e'\n' 
        || revise_remarks ||e'\n' 
        || 'Which was Revised By ' ||e'\n' 
        || revise_done_by 
FROM
    (
        SELECT 
                res_partner.name AS revise_done_by 
        FROM 
                prakruti_production JOIN 
                res_users ON 
                prakruti_production.revise_id = res_users.id JOIN 
                res_partner ON 
                res_users.partner_id = res_partner.id 
        WHERE 
                prakruti_production.id = $1
    ) AS revise_done_person_name 
WHERE 
        prakruti_production.id = $1;

UPDATE
	prakruti_batch_master AS a 
SET 
	revise_remarks_update = revise_remarks_update ||e'\n' 
	|| '--------------------------' ||e'\n' 
	|| 'Revision Done in ' ||e'\n'
	|| 'Extraction Production' ||e'\n'
	|| 'Remarks which was entered was ' ||e'\n'
	|| b.revise_remarks ||e'\n'
	|| 'Which was Revised By ' ||e'\n' 
	|| b.revise_done_by 
FROM(
	SELECT 
		res_partner.name AS revise_done_by,
		prakruti_production.revise_remarks,
		prakruti_production.batch_id 
	FROM 
		prakruti_production JOIN 
		res_users ON 
		prakruti_production.revise_id = res_users.id JOIN 
		res_partner ON 
		res_users.partner_id = res_partner.id 
	WHERE 
		prakruti_production.id =$1 AND 
		prakruti_production.batch_id = $2
) AS b 
WHERE 
    a.id = b.batch_id AND
    a.id = $2;

UPDATE
	prakruti_production_transfer_note AS a 
SET 
        revise_remarks_update = revise_remarks_update ||e'\n' 
	|| '--------------------------' ||e'\n' 
	|| 'Revision Done in ' ||e'\n'
	|| 'Extraction Production' ||e'\n'
	|| 'Remarks which was entered was ' ||e'\n'
	|| b.revise_remarks ||e'\n'
	|| 'Which was Revised By ' ||e'\n' 
	|| b.revise_done_by 
FROM(
        SELECT 
		res_partner.name AS revise_done_by,
		prakruti_production.revise_remarks,
		prakruti_production.batch_id 
	FROM 
		prakruti_production JOIN 
		res_users ON 
		prakruti_production.revise_id = res_users.id JOIN 
		res_partner ON 
		res_users.partner_id = res_partner.id 
	WHERE 
		prakruti_production.id = $1 AND 
		prakruti_production.batch_id = $2
) AS b 
WHERE
	a.batch_no = b.batch_id AND
        a.batch_no = $2	;

UPDATE
	prakruti_production_transfer_note_line AS a 
SET 
       total_output_qty = b.total_output_yeild 
FROM(
	SELECT
		prakruti_production.batch_id,
		prakruti_production.total_output_yeild,
		product_product.id AS subplant_id
	FROM 
		prakruti_production JOIN 
		prakruti_sub_plant ON 
		prakruti_production.subplant_id = prakruti_sub_plant.id JOIN 
		product_product ON 
		prakruti_sub_plant.subplant_id = product_product.id 
	WHERE 
		prakruti_production.id = $1 AND 
		prakruti_production.batch_id = $2
) AS b 
WHERE
	a.product_id = b.subplant_id AND
        a.product_id = $3;
UPDATE 
	prakruti_production 
SET 
	revise_id = NULL,
	revise_remarks = '' 
WHERE 
	prakruti_production.id = $1;
       

RETURN qty;
                                
END;
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION public.revise_production(integer,integer,integer)
  OWNER TO odoo;
  
  
  
CREATE OR REPLACE FUNCTION public.revise_syrup_production(integer,integer,integer)
  RETURNS integer AS
$BODY$
DECLARE 
qty   integer;
BEGIN
qty = 0;

UPDATE
	prakruti_syrup_production
SET
	revise_status = 'revise_done',
	revise_no = revise_no + 1,
	revise_remarks_update = revise_remarks_update ||e'\n' 
	|| '--------------------------' ||e'\n' 
	|| 'Revision Done in ' ||e'\n' 
	|| 'Extraction Syrup Production' ||e'\n' 
	|| 'Revision No ' ||e'\n' 
	|| revise_no + 1 ||e'\n' 
	|| 'Remarks which was entered was ' ||e'\n' 
	|| revise_remarks ||e'\n' 
	|| 'Which was Revised By ' ||e'\n' 
	|| revise_done_by 
FROM
(
	SELECT 
		res_partner.name AS revise_done_by 
	FROM 
		prakruti_syrup_production JOIN 
		res_users ON 
		prakruti_syrup_production.revise_id = res_users.id JOIN 
		res_partner ON 
		res_users.partner_id = res_partner.id 
	WHERE 
		prakruti_syrup_production.id = $1
) AS revise_done_person_name 
WHERE 
    prakruti_syrup_production.id = $1;

UPDATE
	prakruti_batch_master AS a
SET 
	revise_remarks_update = revise_remarks_update ||e'\n' 
	|| '--------------------------' ||e'\n' 
	|| 'Revision Done in ' ||e'\n'
	|| 'Extraction Syrup Production' ||e'\n'
	|| 'Remarks which was entered was ' ||e'\n'
	|| b.revise_remarks ||e'\n'
	|| 'Which was Revised By ' ||e'\n' 
	|| b.revise_done_by 
FROM(
	SELECT 
		res_partner.name AS revise_done_by,
		prakruti_syrup_production.revise_remarks,
		prakruti_syrup_production.batch_id 
	FROM 
		prakruti_syrup_production JOIN 
		res_users ON 
		prakruti_syrup_production.revise_id = res_users.id JOIN 
		res_partner ON 
		res_users.partner_id = res_partner.id 
	WHERE 
		prakruti_syrup_production.id = $1 AND 
		prakruti_syrup_production.batch_id = $2
) AS b 
WHERE 
    a.id = b.batch_id AND
    a.id = $2;

UPDATE 
	prakruti_production_transfer_note AS a 
SET 
	revise_remarks_update = revise_remarks_update ||e'\n' 
	|| '--------------------------' ||e'\n' 
	|| 'Revision Done in ' ||e'\n'
	|| 'Extraction Syrup Production' ||e'\n'
	|| 'Remarks which was entered was ' ||e'\n'
	|| b.revise_remarks ||e'\n'
	|| 'Which was Revised By ' ||e'\n' 
	|| b.revise_done_by 
FROM(
	SELECT 
		res_partner.name AS revise_done_by,
		prakruti_syrup_production.revise_remarks,
		prakruti_syrup_production.batch_id 
	FROM 
		prakruti_syrup_production JOIN 
		res_users ON 
		prakruti_syrup_production.revise_id = res_users.id JOIN 
		res_partner ON 
		res_users.partner_id = res_partner.id 
	WHERE 
		prakruti_syrup_production.id = $1 AND 
		prakruti_syrup_production.batch_id =$2
) AS b 
WHERE 
    a.batch_no = b.batch_id AND
    a.batch_no = $2;

UPDATE 
	prakruti_production_transfer_note_line AS a 
SET 
	total_output_qty = b.total_output_yeild 
FROM(
	SELECT
		prakruti_syrup_production.batch_id,
		prakruti_syrup_production.total_output_yeild,
		product_product.id AS subplant_id
	FROM 
		prakruti_syrup_production JOIN 
		prakruti_sub_plant ON 
		prakruti_syrup_production.subplant_id = prakruti_sub_plant.id JOIN 
		product_product ON 
		prakruti_sub_plant.subplant_id = product_product.id 
	WHERE 
		prakruti_syrup_production.id = $1 AND 
		prakruti_syrup_production.batch_id = $2
) AS b 
WHERE 
	a.product_id = b.subplant_id AND
	a.product_id = $3;
UPDATE 
	prakruti_syrup_production 
SET 
	revise_id = NULL,
	revise_remarks = '' 
WHERE 
	prakruti_syrup_production.id = $1;


RETURN qty;
                                
END;
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION public.revise_syrup_production(integer,integer,integer)
  OWNER TO odoo;
  
  
CREATE OR REPLACE FUNCTION public.revise_powder_production(integer,integer,integer)
  RETURNS integer AS
$BODY$
DECLARE 
qty   integer;
BEGIN
qty = 0;

UPDATE
	prakruti_powder_production
SET
	revise_status = 'revise_done',
	revise_no = revise_no + 1,
	revise_remarks_update = revise_remarks_update ||e'\n' 
	|| '--------------------------' ||e'\n' 
	|| 'Revision Done in ' ||e'\n' 
	|| 'Formulation Production' ||e'\n' 
	|| 'Revision No ' ||e'\n' 
	|| revise_no + 1 ||e'\n' 
	|| 'Remarks which was entered was ' ||e'\n' 
	|| revise_remarks ||e'\n' 
	|| 'Which was Revised By ' ||e'\n' 
	|| revise_done_by 
FROM
(
	SELECT 
		res_partner.name AS revise_done_by 
	FROM 
		prakruti_powder_production JOIN 
		res_users ON 
		prakruti_powder_production.revise_id = res_users.id JOIN 
		res_partner ON 
		res_users.partner_id = res_partner.id 
	WHERE 
		prakruti_powder_production.id = $1
) AS revise_done_person_name 
WHERE 
    prakruti_powder_production.id = $1;

UPDATE
	prakruti_batch_master AS a
SET 
	revise_remarks_update = revise_remarks_update ||e'\n' 
	|| '--------------------------' ||e'\n' 
	|| 'Revision Done in ' ||e'\n'
	|| 'Formulation Production' ||e'\n'
	|| 'Remarks which was entered was ' ||e'\n'
	|| b.revise_remarks ||e'\n'
	|| 'Which was Revised By ' ||e'\n' 
	|| b.revise_done_by 
FROM(
	SELECT 
		res_partner.name AS revise_done_by,
		prakruti_powder_production.revise_remarks,
		prakruti_powder_production.batch_id 
	FROM 
		prakruti_powder_production JOIN 
		res_users ON 
		prakruti_powder_production.revise_id = res_users.id JOIN 
		res_partner ON 
		res_users.partner_id = res_partner.id 
	WHERE 
		prakruti_powder_production.id = $1 AND 
		prakruti_powder_production.batch_id = $2
) AS b 
WHERE 
    a.id = b.batch_id AND
    a.id = $2;

UPDATE 
	prakruti_production_transfer_note AS a 
SET 
	revise_remarks_update = revise_remarks_update ||e'\n' 
	|| '--------------------------' ||e'\n' 
	|| 'Revision Done in ' ||e'\n'
	|| 'Formulation Production' ||e'\n'
	|| 'Remarks which was entered was ' ||e'\n'
	|| b.revise_remarks ||e'\n'
	|| 'Which was Revised By ' ||e'\n' 
	|| b.revise_done_by 
FROM(
	SELECT 
		res_partner.name AS revise_done_by,
		prakruti_powder_production.revise_remarks,
		prakruti_powder_production.batch_id 
	FROM 
		prakruti_powder_production JOIN 
		res_users ON 
		prakruti_powder_production.revise_id = res_users.id JOIN 
		res_partner ON 
		res_users.partner_id = res_partner.id 
	WHERE 
		prakruti_powder_production.id = $1 AND 
		prakruti_powder_production.batch_id =$2
) AS b 
WHERE 
    a.batch_no = b.batch_id AND
    a.batch_no = $2;

UPDATE 
	prakruti_production_transfer_note_line AS a 
SET 
	total_output_qty = b.total_output_yeild 
FROM(
	SELECT
		prakruti_powder_production.batch_id,
		prakruti_powder_production.total_output_yeild,
		product_product.id AS subplant_id
	FROM 
		prakruti_powder_production JOIN 
		prakruti_sub_plant ON 
		prakruti_powder_production.subplant_id = prakruti_sub_plant.id JOIN 
		product_product ON 
		prakruti_sub_plant.subplant_id = product_product.id 
	WHERE 
		prakruti_powder_production.id = $1 AND 
		prakruti_powder_production.batch_id = $2
) AS b 
WHERE 
	a.product_id = b.subplant_id AND
	a.product_id = $3;
UPDATE 
	prakruti_powder_production 
SET 
	revise_id = NULL,
	revise_remarks = '' 
WHERE 
	prakruti_powder_production.id = $1;


RETURN qty;
                                
END;
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION public.revise_powder_production(integer,integer,integer)
  OWNER TO odoo;
  
CREATE OR REPLACE FUNCTION public.autogenerate_material_outward(integer)
  RETURNS integer AS
$BODY$
DECLARE max_number INTEGER;
DECLARE year_added INTEGER;
DECLARE month_added INTEGER;
DECLARE serial_disable_id1 INTEGER;

BEGIN

max_number=0;

-- year_added = Year from entry date.

SELECT  
    CAST(EXTRACT(YEAR FROM mon_date) AS INTEGER) INTO year_added 
FROM 
    prakruti_material_outward_note 
WHERE 
    id =$1;
    
-- month_added = Month from entry date.

SELECT  
    CAST(EXTRACT(MONTH FROM mon_date) AS INTEGER) INTO month_added 
FROM 
    prakruti_material_outward_note 
WHERE 
    id =$1;

SELECT 
    CASE 
        WHEN month_added > 3 
            THEN year_added 
        ELSE 
            (year_added - 1 ) END 
        INTO year_added ;
SELECT 
    req_no_control_id INTO serial_disable_id1 
FROM 
    prakruti_material_outward_note 
WHERE 
    prakruti_material_outward_note.id =$1;

-- serial_disable_id1 is 0 for the first time only.

IF(serial_disable_id1 = 0) THEN
    
    SELECT  
        MAX(COALESCE(a.auto_no,0)+1) INTO max_number
    FROM  
        prakruti_material_outward_note AS a
    WHERE 
        mon_date 
    BETWEEN 
        CAST(year_added||'-04-'||'01' AS date) 
    AND 
        CAST(year_added + 1||'-03-'||'31' AS date);
    
    IF LENGTH(CAST(max_number AS text)) < 2 THEN 
        max_number = '00'|| CAST(max_number AS text);
        
    ELSIF LENGTH(CAST(max_number AS text)) < 3 THEN 
        max_number = '0' || CAST(max_number AS text);
        
    ELSE
        max_number = CAST(max_number AS text);
        
    END IF;
    
    UPDATE 
        prakruti_material_outward_note 
    SET 
        req_no_control_id = 1,
        auto_no = max_number 
    WHERE
        prakruti_material_outward_note.id = $1;

ELSE
    SELECT  
        a.auto_no INTO max_number
    FROM  
        prakruti_material_outward_note AS a
    WHERE
        a.id =$1;
    
    IF LENGTH(CAST(max_number AS text)) < 2 THEN 
        max_number = '00'|| CAST(max_number AS text);
        
    ELSIF LENGTH(CAST(max_number AS text)) < 3 THEN 
        max_number = '0' || CAST(max_number AS text);
        
    ELSE
        max_number = CAST(max_number AS text);
        
    END IF;
    
    UPDATE 
        prakruti_material_outward_note 
    SET 
        auto_no = max_number 
    WHERE
        prakruti_material_outward_note.id = $1;
        
END IF;

RETURN max_number;
  END;
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION public.autogenerate_material_outward(integer)
  OWNER TO odoo;
  
-- Function: public.calculation_debit_note(integer)

-- DROP FUNCTION public.calculation_debit_note(integer);

CREATE OR REPLACE FUNCTION public.calculation_debit_note(integer)
  RETURNS integer AS
$BODY$
DECLARE qty   integer;
BEGIN

qty = 0;


--TOTAL AMOUNT FOR THE GRID

UPDATE 
    prakruti_debit_note_line 
SET  
    amount = return_qty * unit_price
WHERE
    prakruti_debit_note_line.line_id = $1;


--TAXABLE VALUE FOR THE GRID

UPDATE 
    prakruti_debit_note_line 
SET  
    taxable_value = amount - (amount*(discount_rate/100)) 
WHERE
    prakruti_debit_note_line.line_id = $1;
    
--ADDITIONAL CHARGES

UPDATE
        prakruti_debit_note
SET
        all_additional_charges = freight_charges + loading_and_packing_charges + insurance_charges + other_charges
WHERE
        prakruti_debit_note.id = $1;
        
--TOTAL NO OF PRODUCTS

UPDATE 
    prakruti_debit_note AS b 
SET 
    total_no_of_products = a.total_no_of_products
FROM(SELECT 
        SUM(prakruti_debit_note_line.return_qty) AS total_no_of_products,
        prakruti_debit_note.id
    FROM 
        prakruti_debit_note_line JOIN
        prakruti_debit_note ON
        prakruti_debit_note.id = prakruti_debit_note_line.line_id
    WHERE 
        prakruti_debit_note_line.line_id= $1 AND prakruti_debit_note.id = $1 
    GROUP BY 
        prakruti_debit_note.id
        ) AS a 
WHERE 
    a.id = b.id;



-- TOTAL TAXBLE VALUE
 UPDATE prakruti_debit_note SET 
                                total_taxable_value = b.taxable_value
    FROM(

    SELECT
        sum(prakruti_debit_note_line.taxable_value) as taxable_value,
        prakruti_debit_note.id
    FROM
        prakruti_debit_note_line INNER JOIN
        prakruti_debit_note ON
        prakruti_debit_note_line.line_id = prakruti_debit_note.id
     WHERE
        prakruti_debit_note.id = $1 and prakruti_debit_note_line.line_id = $1
        GROUP BY 
        prakruti_debit_note.id
        
    )as b     
        WHERE 
             prakruti_debit_note.id = b.id;
        
-- PROPORTIONATE AMOUNT TO PRODUCTS

UPDATE
        prakruti_debit_note
SET
        proportionate_amount_to_products = all_additional_charges/total_taxable_value
WHERE
        prakruti_debit_note.id = $1;

    
    
-- TAXABLE AMOUNT WITH CHARGES

UPDATE prakruti_debit_note_line SET 
                                taxable_value_with_charges = b.total_quantity
    FROM(

    SELECT
        (sum(prakruti_debit_note_line.taxable_value) + (sum(prakruti_debit_note_line.taxable_value) * sum(prakruti_debit_note.proportionate_amount_to_products))) as total_quantity,
        prakruti_debit_note_line.id
    FROM
        prakruti_debit_note_line INNER JOIN
        prakruti_debit_note ON
        prakruti_debit_note_line.line_id = prakruti_debit_note.id
     WHERE
        prakruti_debit_note.id = $1 and prakruti_debit_note_line.line_id = $1
        GROUP BY 
        prakruti_debit_note_line.id
        
    )as b     
        WHERE 
             prakruti_debit_note_line.id = b.id;

   
    
-- CGST VALUE FOR THE GRID

UPDATE 
    prakruti_debit_note_line
    SET
        cgst_amount = taxable_value_with_charges * (cgst_rate/100)
    WHERE
        line_id=$1;
    
    
-- SGST VALUE FOR THE GRID

UPDATE 
    prakruti_debit_note_line
    SET
        sgst_amount = taxable_value_with_charges * (sgst_rate/100)
    WHERE
        line_id=$1;
    
    
-- IGST VALUE FOR THE GRID

UPDATE 
    prakruti_debit_note_line
    SET
        igst_amount = taxable_value_with_charges * (igst_rate/100)
    WHERE
        line_id=$1;
    
    
-- GST VALUE FOR THE GRID

UPDATE 
    prakruti_debit_note_line
    SET
        gst_rate = cgst_rate + sgst_rate + igst_rate
    WHERE
        line_id=$1;
        
        
-- TOTAL VALUE FOR THE GRID

UPDATE 
    prakruti_debit_note_line
SET
    total = COALESCE(prakruti_debit_note_line.taxable_value_with_charges,0) + COALESCE(prakruti_debit_note_line.cgst_amount,0) + COALESCE(prakruti_debit_note_line.sgst_amount,0) + COALESCE(prakruti_debit_note_line.igst_amount,0)
WHERE
    line_id=$1;
    
    
    

--TOTAL AMOUNT BEFORE TAX

UPDATE prakruti_debit_note SET 
                                total_amount_before_tax = b.total_quantity
    FROM(

    SELECT
        sum(prakruti_debit_note_line.taxable_value_with_charges) as total_quantity,
        prakruti_debit_note.id
    FROM
        prakruti_debit_note_line INNER JOIN
        prakruti_debit_note ON
        prakruti_debit_note_line.line_id = prakruti_debit_note.id
     WHERE
        prakruti_debit_note.id = $1 and prakruti_debit_note_line.line_id = $1
        GROUP BY 
        prakruti_debit_note.id
        
    )as b     
        WHERE 
             prakruti_debit_note.id = b.id;
    
    
    

--TOTAL CGST

UPDATE prakruti_debit_note SET 
                                total_cgst_amount = b.total_quantity
    FROM(

    SELECT
        sum(prakruti_debit_note_line.cgst_amount) as total_quantity,
        prakruti_debit_note.id
    FROM
        prakruti_debit_note_line INNER JOIN
        prakruti_debit_note ON
        prakruti_debit_note_line.line_id = prakruti_debit_note.id
     WHERE
        prakruti_debit_note.id = $1 and prakruti_debit_note_line.line_id = $1
        GROUP BY 
        prakruti_debit_note.id
        
    )as b     
        WHERE 
             prakruti_debit_note.id = b.id;
    
    
    

--TOTAL SGST

UPDATE prakruti_debit_note SET 
                                total_sgst_amount = b.total_quantity
    FROM(

    SELECT
        sum(prakruti_debit_note_line.sgst_amount) as total_quantity,
        prakruti_debit_note.id
    FROM
        prakruti_debit_note_line INNER JOIN
        prakruti_debit_note ON
        prakruti_debit_note_line.line_id = prakruti_debit_note.id
     WHERE
        prakruti_debit_note.id = $1 and prakruti_debit_note_line.line_id = $1
        GROUP BY 
        prakruti_debit_note.id
        
    )as b     
        WHERE 
             prakruti_debit_note.id = b.id;
    
    
    

--TOTAL IGST

UPDATE prakruti_debit_note SET 
                                total_igst_amount = b.total_quantity
    FROM(

    SELECT
        sum(prakruti_debit_note_line.igst_amount) as total_quantity,
        prakruti_debit_note.id
    FROM
        prakruti_debit_note_line INNER JOIN
        prakruti_debit_note ON
        prakruti_debit_note_line.line_id = prakruti_debit_note.id
     WHERE
        prakruti_debit_note.id = $1 and prakruti_debit_note_line.line_id = $1
        GROUP BY 
        prakruti_debit_note.id
        
    )as b     
        WHERE 
             prakruti_debit_note.id = b.id;
             
             
             
-- TOTAL GST AMOUNT

UPDATE
        prakruti_debit_note
SET
        total_gst_amount = COALESCE(prakruti_debit_note.total_cgst_amount,0) + COALESCE(prakruti_debit_note.total_sgst_amount,0) + COALESCE(prakruti_debit_note.total_igst_amount,0)
WHERE
        prakruti_debit_note.id = $1;
    
    
    

--GRAND TOTAL AFTER TAX

UPDATE prakruti_debit_note SET 
                                total_amount_after_tax = b.total_quantity
    FROM(

    SELECT
        sum(prakruti_debit_note_line.total) as total_quantity,
        prakruti_debit_note.id
    FROM
        prakruti_debit_note_line INNER JOIN
        prakruti_debit_note ON
        prakruti_debit_note_line.line_id = prakruti_debit_note.id
     WHERE
        prakruti_debit_note.id = $1 and prakruti_debit_note_line.line_id = $1
        GROUP BY 
        prakruti_debit_note.id
        
    )as b     
        WHERE 
             prakruti_debit_note.id = b.id;
    
    
    

--TOTAL AMOUNT

UPDATE prakruti_debit_note SET 
                                total_amount = b.line_amount
    FROM(

    SELECT
        sum(prakruti_debit_note_line.amount) as line_amount,
        prakruti_debit_note.id
    FROM
        prakruti_debit_note_line INNER JOIN
        prakruti_debit_note ON
        prakruti_debit_note_line.line_id = prakruti_debit_note.id
     WHERE
        prakruti_debit_note.id = $1 and prakruti_debit_note_line.line_id = $1
        GROUP BY 
        prakruti_debit_note.id
        
    )as b     
        WHERE 
             prakruti_debit_note.id = b.id;

RETURN qty;
                                
END;
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION public.calculation_debit_note(integer)
  OWNER TO odoo;
  
  
-- Function: public.calculation_debit_note_ha(integer)

-- DROP FUNCTION public.calculation_debit_note_ha(integer);

CREATE OR REPLACE FUNCTION public.calculation_debit_note_ha(integer)
  RETURNS integer AS
$BODY$
DECLARE qty   integer;
BEGIN

qty = 0;


--TOTAL AMOUNT FOR THE GRID

UPDATE 
    prakruti_debit_note_ha_line 
SET  
    amount = return_qty * unit_price
WHERE
    prakruti_debit_note_ha_line.line_id = $1;


--TAXABLE VALUE FOR THE GRID

UPDATE 
    prakruti_debit_note_ha_line 
SET  
    taxable_value = amount - (amount*(discount_rate/100)) 
WHERE
    prakruti_debit_note_ha_line.line_id = $1;
    
--ADDITIONAL CHARGES

UPDATE
        prakruti_debit_note_ha
SET
        all_additional_charges = freight_charges + loading_and_packing_charges + insurance_charges + other_charges
WHERE
        prakruti_debit_note_ha.id = $1;
        
--TOTAL NO OF PRODUCTS

UPDATE 
    prakruti_debit_note_ha AS b 
SET 
    total_no_of_products = a.total_no_of_products
FROM(SELECT 
        SUM(prakruti_debit_note_ha_line.return_qty) AS total_no_of_products,
        prakruti_debit_note_ha.id
    FROM 
        prakruti_debit_note_ha_line JOIN
        prakruti_debit_note_ha ON
        prakruti_debit_note_ha.id = prakruti_debit_note_ha_line.line_id
    WHERE 
        prakruti_debit_note_ha_line.line_id= $1 AND prakruti_debit_note_ha.id = $1 
    GROUP BY 
        prakruti_debit_note_ha.id
        ) AS a 
WHERE 
    a.id = b.id;



-- TOTAL TAXBLE VALUE
 UPDATE prakruti_debit_note_ha SET 
                                total_taxable_value = b.taxable_value
    FROM(

    SELECT
        sum(prakruti_debit_note_ha_line.taxable_value) as taxable_value,
        prakruti_debit_note_ha.id
    FROM
        prakruti_debit_note_ha_line INNER JOIN
        prakruti_debit_note_ha ON
        prakruti_debit_note_ha_line.line_id = prakruti_debit_note_ha.id
     WHERE
        prakruti_debit_note_ha.id = $1 and prakruti_debit_note_ha_line.line_id = $1
        GROUP BY 
        prakruti_debit_note_ha.id
        
    )as b     
        WHERE 
             prakruti_debit_note_ha.id = b.id;
        
-- PROPORTIONATE AMOUNT TO PRODUCTS

UPDATE
        prakruti_debit_note_ha
SET
        proportionate_amount_to_products = all_additional_charges/total_taxable_value
WHERE
        prakruti_debit_note_ha.id = $1;

    
    
-- TAXABLE AMOUNT WITH CHARGES

UPDATE prakruti_debit_note_ha_line SET 
                                taxable_value_with_charges = b.total_quantity
    FROM(

    SELECT
        (sum(prakruti_debit_note_ha_line.taxable_value) + (sum(prakruti_debit_note_ha_line.taxable_value) * sum(prakruti_debit_note_ha.proportionate_amount_to_products))) as total_quantity,
        prakruti_debit_note_ha_line.id
    FROM
        prakruti_debit_note_ha_line INNER JOIN
        prakruti_debit_note_ha ON
        prakruti_debit_note_ha_line.line_id = prakruti_debit_note_ha.id
     WHERE
        prakruti_debit_note_ha.id = $1 and prakruti_debit_note_ha_line.line_id = $1
        GROUP BY 
        prakruti_debit_note_ha_line.id
        
    )as b     
        WHERE 
             prakruti_debit_note_ha_line.id = b.id;

   
    
-- CGST VALUE FOR THE GRID

UPDATE 
    prakruti_debit_note_ha_line
    SET
        cgst_amount = taxable_value_with_charges * (cgst_rate/100)
    WHERE
        line_id=$1;
    
    
-- SGST VALUE FOR THE GRID

UPDATE 
    prakruti_debit_note_ha_line
    SET
        sgst_amount = taxable_value_with_charges * (sgst_rate/100)
    WHERE
        line_id=$1;
    
    
-- IGST VALUE FOR THE GRID

UPDATE 
    prakruti_debit_note_ha_line
    SET
        igst_amount = taxable_value_with_charges * (igst_rate/100)
    WHERE
        line_id=$1;
    
    
-- GST VALUE FOR THE GRID

UPDATE 
    prakruti_debit_note_ha_line
    SET
        gst_rate = cgst_rate + sgst_rate + igst_rate
    WHERE
        line_id=$1;
        
        
-- TOTAL VALUE FOR THE GRID

UPDATE 
    prakruti_debit_note_ha_line
SET
    total = COALESCE(prakruti_debit_note_ha_line.taxable_value_with_charges,0) + COALESCE(prakruti_debit_note_ha_line.cgst_amount,0) + COALESCE(prakruti_debit_note_ha_line.sgst_amount,0) + COALESCE(prakruti_debit_note_ha_line.igst_amount,0)
WHERE
    line_id=$1;
    
    
    

--TOTAL AMOUNT BEFORE TAX

UPDATE prakruti_debit_note_ha SET 
                                total_amount_before_tax = b.total_quantity
    FROM(

    SELECT
        sum(prakruti_debit_note_ha_line.taxable_value_with_charges) as total_quantity,
        prakruti_debit_note_ha.id
    FROM
        prakruti_debit_note_ha_line INNER JOIN
        prakruti_debit_note_ha ON
        prakruti_debit_note_ha_line.line_id = prakruti_debit_note_ha.id
     WHERE
        prakruti_debit_note_ha.id = $1 and prakruti_debit_note_ha_line.line_id = $1
        GROUP BY 
        prakruti_debit_note_ha.id
        
    )as b     
        WHERE 
             prakruti_debit_note_ha.id = b.id;
    
    
    

--TOTAL CGST

UPDATE prakruti_debit_note_ha SET 
                                total_cgst_amount = b.total_quantity
    FROM(

    SELECT
        sum(prakruti_debit_note_ha_line.cgst_amount) as total_quantity,
        prakruti_debit_note_ha.id
    FROM
        prakruti_debit_note_ha_line INNER JOIN
        prakruti_debit_note_ha ON
        prakruti_debit_note_ha_line.line_id = prakruti_debit_note_ha.id
     WHERE
        prakruti_debit_note_ha.id = $1 and prakruti_debit_note_ha_line.line_id = $1
        GROUP BY 
        prakruti_debit_note_ha.id
        
    )as b     
        WHERE 
             prakruti_debit_note_ha.id = b.id;
    
    
    

--TOTAL SGST

UPDATE prakruti_debit_note_ha SET 
                                total_sgst_amount = b.total_quantity
    FROM(

    SELECT
        sum(prakruti_debit_note_ha_line.sgst_amount) as total_quantity,
        prakruti_debit_note_ha.id
    FROM
        prakruti_debit_note_ha_line INNER JOIN
        prakruti_debit_note_ha ON
        prakruti_debit_note_ha_line.line_id = prakruti_debit_note_ha.id
     WHERE
        prakruti_debit_note_ha.id = $1 and prakruti_debit_note_ha_line.line_id = $1
        GROUP BY 
        prakruti_debit_note_ha.id
        
    )as b     
        WHERE 
             prakruti_debit_note_ha.id = b.id;
    
    
    

--TOTAL IGST

UPDATE prakruti_debit_note_ha SET 
                                total_igst_amount = b.total_quantity
    FROM(

    SELECT
        sum(prakruti_debit_note_ha_line.igst_amount) as total_quantity,
        prakruti_debit_note_ha.id
    FROM
        prakruti_debit_note_ha_line INNER JOIN
        prakruti_debit_note_ha ON
        prakruti_debit_note_ha_line.line_id = prakruti_debit_note_ha.id
     WHERE
        prakruti_debit_note_ha.id = $1 and prakruti_debit_note_ha_line.line_id = $1
        GROUP BY 
        prakruti_debit_note_ha.id
        
    )as b     
        WHERE 
             prakruti_debit_note_ha.id = b.id;
             
             
             
-- TOTAL GST AMOUNT

UPDATE
        prakruti_debit_note_ha
SET
        total_gst_amount = COALESCE(prakruti_debit_note_ha.total_cgst_amount,0) + COALESCE(prakruti_debit_note_ha.total_sgst_amount,0) + COALESCE(prakruti_debit_note_ha.total_igst_amount,0)
WHERE
        prakruti_debit_note_ha.id = $1;
    
    
    

--GRAND TOTAL AFTER TAX

UPDATE prakruti_debit_note_ha SET 
                                total_amount_after_tax = b.total_quantity
    FROM(

    SELECT
        sum(prakruti_debit_note_ha_line.total) as total_quantity,
        prakruti_debit_note_ha.id
    FROM
        prakruti_debit_note_ha_line INNER JOIN
        prakruti_debit_note_ha ON
        prakruti_debit_note_ha_line.line_id = prakruti_debit_note_ha.id
     WHERE
        prakruti_debit_note_ha.id = $1 and prakruti_debit_note_ha_line.line_id = $1
        GROUP BY 
        prakruti_debit_note_ha.id
        
    )as b     
        WHERE 
             prakruti_debit_note_ha.id = b.id;
    
    
    

--TOTAL AMOUNT

UPDATE prakruti_debit_note_ha SET 
                                total_amount = b.line_amount
    FROM(

    SELECT
        sum(prakruti_debit_note_ha_line.amount) as line_amount,
        prakruti_debit_note_ha.id
    FROM
        prakruti_debit_note_ha_line INNER JOIN
        prakruti_debit_note_ha ON
        prakruti_debit_note_ha_line.line_id = prakruti_debit_note_ha.id
     WHERE
        prakruti_debit_note_ha.id = $1 and prakruti_debit_note_ha_line.line_id = $1
        GROUP BY 
        prakruti_debit_note_ha.id
        
    )as b     
        WHERE 
             prakruti_debit_note_ha.id = b.id;

RETURN qty;
                                
END;
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION public.calculation_debit_note_ha(integer)
  OWNER TO odoo;

------------------------------------------------------------------------------------------------------------------------------------------------



  
CREATE OR REPLACE FUNCTION public.revise_store_issue_internal(integer,character varying)
  RETURNS character varying AS
$BODY$
DECLARE 
qty   integer;
line_id INTEGER;
issue_qty INTEGER;
BEGIN

qty = 0;
line_id = 0;
issue_qty=0;

SELECT 
	prakruti_store_issue_item.request_line_id INTO line_id
FROM 
	prakruti_store_issue_item JOIN
	prakruti_store_issue ON 
	prakruti_store_issue_item.main_id = prakruti_store_issue.id 
WHERE 
	prakruti_store_issue_item.main_id = $1 AND 
	prakruti_store_issue.id =$1 AND 
	prakruti_store_issue.request_no = $2;
	
SELECT 
	prakruti_store_issue_item.issued_quantity INTO issue_qty
FROM 
	prakruti_store_issue_item JOIN
	prakruti_store_issue ON 
	prakruti_store_issue_item.main_id = prakruti_store_issue.id 
WHERE 
	prakruti_store_issue_item.main_id = $1 AND 
	prakruti_store_issue.id =$1 AND 
	prakruti_store_issue.request_no = $2;
	
IF (line_id > 0 AND issue_qty > 0) THEN

    UPDATE 
            prakruti_store_issue 
    SET 
            revise_status = 'revise_done',
            revise_no = revise_no + 1,
            revise_remarks_update = revise_remarks_update ||e'\n' 
            || '--------------------------' ||e'\n' 
            || 'Revision Done in ' ||e'\n' 
            || 'Store Issue' ||e'\n' 
            || 'Revision No ' ||e'\n' 
            || revise_no + 1 ||e'\n' 
            || 'Remarks which was entered was ' ||e'\n' 
            || revise_remarks ||e'\n' 
            || 'Which was Revised By ' ||e'\n' 
            || revise_done_by 
    FROM
        ( 
            SELECT 
                    res_partner.name AS revise_done_by 
            FROM 
                    prakruti_store_issue JOIN 
                    res_users ON 
                    prakruti_store_issue.revise_id = res_users.id JOIN 
                    res_partner ON res_users.partner_id = res_partner.id 
            WHERE 
                    prakruti_store_issue.id =$1 
                    ) AS revise_done_person_name 
    WHERE 
            prakruti_store_issue.id = $1;

    UPDATE 
            prakruti_store_request AS a 
    SET     
            revise_remarks_update = revise_remarks_update ||e'\n' 
            || '--------------------------' ||e'\n' 
            || 'Revision Done in ' ||e'\n' 
            || 'Store Issue' ||e'\n' 
            || 'Remarks which was entered was ' ||e'\n' 
            || b.revise_remarks ||e'\n' 
            || 'Which was Revised By ' ||e'\n' 
            || b.revise_done_by 
    FROM( 
            SELECT 
                    res_partner.name AS revise_done_by,
                    prakruti_store_issue.revise_remarks,
                    prakruti_store_issue.request_no 
            FROM 
                    prakruti_store_issue JOIN 
                    res_users ON 
                    prakruti_store_issue.revise_id = res_users.id JOIN 
                    res_partner ON res_users.partner_id = res_partner.id 
            WHERE 
                    prakruti_store_issue.id = $1 AND 
                    prakruti_store_issue.request_no = $2
        ) AS b 
    WHERE 
            a.store_request_no = b.request_no AND
            a.state != 'rejected' AND 
            a.store_request_no = $2;

UPDATE 
        prakruti_store_request_item AS a 
SET 
        product_id = b.product_id,
        requested_quantity = b.approved_quantity,
        uom_id = b.uom_id,
        description = b.description  
FROM( 
        SELECT 
                prakruti_store_issue_item.product_id,
                prakruti_store_issue_item.approved_quantity,
                prakruti_store_issue_item.issued_quantity,
                prakruti_store_issue_item.uom_id,
                prakruti_store_issue_item.description,
                prakruti_store_issue_item.request_line_id  
        FROM 
                prakruti_store_issue_item JOIN 
                prakruti_store_issue ON 
                prakruti_store_issue.id = prakruti_store_issue_item.main_id 
        WHERE 
                prakruti_store_issue.request_no = $2 AND 
                prakruti_store_issue_item.main_id = $1
                ) AS b 
WHERE 
       a.id = b.request_line_id;	
            

    UPDATE 
            prakruti_store_approve_request AS a 
    SET  
            revise_remarks_update = revise_remarks_update ||e'\n' 
            || '--------------------------' ||e'\n' 
            || 'Revision Done in ' ||e'\n' 
            || 'Store Issue' ||e'\n' 
            || 'Remarks which was entered was ' ||e'\n' 
            || b.revise_remarks ||e'\n' 
            || 'Which was Revised By ' ||e'\n' 
            || b.revise_done_by 
    FROM( 
            SELECT 
                    res_partner.name AS revise_done_by,
                    prakruti_store_issue.revise_remarks,
                    prakruti_store_issue.request_no 
            FROM 
                    prakruti_store_issue JOIN 
                    res_users ON 
                    prakruti_store_issue.revise_id = res_users.id JOIN 
                    res_partner ON 
                    res_users.partner_id = res_partner.id 
            WHERE
                    prakruti_store_issue.id = $1 AND 
                    prakruti_store_issue.request_no = $2
        ) AS b 
    WHERE 
            a.request_no = b.request_no AND 
            a.state != 'rejected' AND 
            a.request_no = $2;
      

UPDATE 
        prakruti_store_approve_request_item AS a 
SET 
        product_id = b.product_id,
        requested_quantity = b.approved_quantity,
        approved_quantity = b.approved_quantity,
        uom_id = b.uom_id,
        description = b.description  
FROM( 
        SELECT 
                prakruti_store_issue_item.product_id,
                prakruti_store_issue_item.approved_quantity,
                prakruti_store_issue_item.issued_quantity,
                prakruti_store_issue_item.uom_id,
                prakruti_store_issue_item.description,
                prakruti_store_issue_item.request_line_id  
        FROM 
                prakruti_store_issue_item JOIN 
                prakruti_store_issue ON 
                prakruti_store_issue.id = prakruti_store_issue_item.main_id 
        WHERE 
                prakruti_store_issue.request_no = $2 AND 
                prakruti_store_issue_item.main_id = $1
                ) AS b 
WHERE 
         a.request_line_id = b.request_line_id ; 


    UPDATE 
        prakruti_store_issue 
    SET 
        revise_id = NULL,
        revise_remarks = '' 
    WHERE 
        id = $1;
        
ELSE
        RETURN 'Record Cannot be Revised';
END IF;

RETURN qty;
                                
END;
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION public.revise_store_issue_internal(integer,character varying)
  OWNER TO odoo;
  
CREATE OR REPLACE FUNCTION public.stock_material_rejection_note(integer)
  RETURNS integer AS
$BODY$
DECLARE qty   integer;
BEGIN

qty = 0;


INSERT INTO prakruti_stock
        (
        product_id,
        uom_id,
        entered_date,
        origin,
        company_id,
        grn_id,
        mrn_id,
        product_qty,
        vendor_id,
        remarks,
        create_date,
        create_uid,
        write_date,
        write_uid
        )

SELECT 
        product_id,
        uom_id,
        entered_date,
        origin,
        company_id,
        grn_id,
        mrn_id,
        -product_qty,
        vendor_id,
        remarks,
        create_date,
        create_uid,
        write_date,
        write_uid
FROM(
    SELECT
        prakruti_return_items_line.product_id,
        prakruti_return_items_line.uom_id,
        prakruti_return_items_line.write_date AS entered_date,
        prakruti_return_items.mrn_no AS origin,
        prakruti_return_items.company_address AS company_id,
        prakruti_return_items.grn_id,
        prakruti_return_items.id AS mrn_id,
        prakruti_return_items_line.return_qty AS product_qty,
        prakruti_return_items.vendor_id,
        prakruti_return_items_line.remarks,
        prakruti_return_items_line.write_date AS create_date,
        prakruti_return_items_line.write_date AS write_date,
        prakruti_return_items_line.write_uid AS write_uid,
        prakruti_return_items_line.create_uid AS create_uid
    FROM 
        prakruti_return_items_line JOIN
        prakruti_return_items ON 
        prakruti_return_items_line.return_line_id = prakruti_return_items.id
    WHERE
        prakruti_return_items_line.return_line_id = $1
    ) AS C;

RETURN qty;
                                
END;
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION public.stock_material_rejection_note(integer)
  OWNER TO odoo;
  
-- Function: public.stock_store(integer, character varying, integer, integer, integer, integer, integer, integer, integer)

-- DROP FUNCTION public.stock_store(integer, character varying, integer, integer, integer, integer, integer, integer, integer);

CREATE OR REPLACE FUNCTION public.stock_store(
    integer,
    character varying,
    integer,
    integer,
    integer,
    integer,
    integer,
    integer,
    integer)
  RETURNS character varying AS
$BODY$
DECLARE

qty   double precision;
send_flag_status INTEGER;
count_status INTEGER;
count_line INTEGER;
total_line INTEGER;
issue_qty double precision;
extra_issue_qty double precision;
extra_issue_packing double precision;
no_of_products_in_request INTEGER;
no_of_products_in_issue INTEGER;
isued_qty double precision;
request_qty double precision;
extra_isued_qty double precision;

BEGIN

qty = 0.0;
send_flag_status = 0;
count_status= 0;
count_line= 0;
total_line= 0;
issue_qty= 0.0;
extra_issue_qty= 0.0;
extra_issue_packing= 0.0;
no_of_products_in_request= 0;
no_of_products_in_issue= 0;


SELECT
    count(id) INTO send_flag_status
FROM
    prakruti_store_issue_item
WHERE
    main_id = $1 AND
    (store_qty >= issued_quantity OR store_qty >= extra_issued_qty) AND store_qty > 0;

SELECT
    count(id) INTO count_status
FROM
    prakruti_store_issue_item
WHERE
    main_id = $1;


IF send_flag_status = count_status THEN
    
    SELECT
        count(id) INTO count_line
    FROM  
        prakruti_store_issue_item
    WHERE
        main_id = $1 AND
        (store_qty >= issued_quantity OR store_qty >= extra_issued_qty) AND store_qty > 0;
    
    SELECT
        count(prakruti_store_issue_item.product_id) INTO total_line  
    FROM  
        prakruti_store_issue_item
    WHERE
        main_id = $1 AND
        (store_qty >= issued_quantity OR store_qty >= extra_issued_qty) AND
        (issued_quantity> 0 OR extra_issued_qty>0) AND store_qty > 0;
    
    IF count_line = total_line THEN
        
        SELECT
            issued_quantity,extra_issued_qty,extra_issued_packing INTO issue_qty,extra_issue_qty,extra_issue_packing
        FROM
            prakruti_store_issue_item
        WHERE
            main_id= $1;
        
        IF issue_qty >0 THEN
            
            UPDATE
                prakruti_bill_of_material AS b
            SET
                state = 'issued_quant',
                material_issued_by= a.issued_by
            FROM(
                SELECT
                    issued_by,
                    extraction_bom_id
                FROM
                    prakruti_store_issue JOIN
                    prakruti_bill_of_material ON
                    prakruti_store_issue.extraction_bom_id =prakruti_bill_of_material.id
                WHERE
                    prakruti_store_issue.id =CAST($1 AS INTEGER)
                ) AS a
            WHERE
                b.id = a.extraction_bom_id;
            
            UPDATE
                prakruti_bill_of_material_line AS b
            SET
                extra_flag = 1,
                issued_qty = a.issued_quantity,
                grn_no = a.grn_no,
                grn_list = b.grn_list || ', ' || a.grn_list,
                ar_no = a.ar_no,
                issue_common_id = a.id
            FROM(
                SELECT
                    issued_quantity,
                    prakruti_store_issue_item.id,
                    prakruti_store_issue_item.grn_no,
                    prakruti_store_issue_item.grn_list,
                    ar_no,
                    extraction_bom_id,
                    grid_common_id_bom
                FROM
                    prakruti_store_issue_item JOIN
                    prakruti_store_issue ON
                    prakruti_store_issue.id =prakruti_store_issue_item.main_id
                WHERE
                    prakruti_store_issue.id =CAST($1 AS INTEGER)
                ) AS a
            WHERE
                b.main_id = a.extraction_bom_id AND
                b.id =a.grid_common_id_bom;
                
                
            ---------------------------------------------------------------------
            -- INSERT THE GRN TABLE INTO EXTRACTION
            
            INSERT INTO prakruti_extraction_bom_grn_list_line
                    (
                    create_uid,
                    write_uid,
                    create_date,
                    write_date,
                    product_id,
                    grn_id,
                    received_qty,
                    issued_qty,
                    extra_issued_qty,
                    packing_style,
                    packing_per_qty,
                    remarks,
                    extra_issued_packing,
                    extraction_id
                    )
                SELECT
                    create_uid,
                    write_uid,
                    create_date,
                    write_date,
                    product_id,
                    grn_id,
                    received_qty,
                    issued_qty,
                    extra_issued_qty,
                    packing_style,
                    packing_per_qty,
                    remarks,
                    extra_issued_packing,
                    extraction_id
                FROM(
                    SELECT
                        prakruti_issue_grn_list_line.create_uid,
                        prakruti_issue_grn_list_line.write_uid,
                        prakruti_issue_grn_list_line.create_date,
                        prakruti_issue_grn_list_line.write_date,
                        prakruti_issue_grn_list_line.product_id,
                        prakruti_issue_grn_list_line.grn_id,
                        prakruti_issue_grn_list_line.received_qty,
                        prakruti_issue_grn_list_line.issued_qty,
                        prakruti_issue_grn_list_line.extra_issued_qty,
                        prakruti_issue_grn_list_line.packing_style,
                        prakruti_issue_grn_list_line.packing_per_qty,
                        prakruti_issue_grn_list_line.remarks,
                        prakruti_issue_grn_list_line.extra_issued_packing,
                        prakruti_store_issue.extraction_bom_id AS extraction_id
                    FROM 
                        prakruti_issue_grn_list_line JOIN
                        prakruti_store_issue ON
                        prakruti_issue_grn_list_line.issue_id = prakruti_store_issue.id 
                    WHERE 
                        prakruti_issue_grn_list_line.issue_id = $1 
                    ) AS a JOIN (
                    SELECT 
                        prakruti_bill_of_material.id AS extraction_bom_id
                    FROM  
                        prakruti_bill_of_material
                    WHERE
                        prakruti_bill_of_material.id = $3
                                ) AS b ON a.extraction_id = b.extraction_bom_id;
            
            ---------------------------------------------------------------------
            
            
            
            
            UPDATE
                prakruti_syrup AS b
            SET
                state = 'issued_quant',
                packing_material_request_flag = 1,
                material_issued_by= a.issued_by
            FROM(
                SELECT
                    issued_by,
                    syrup_bom_id
                FROM
                    prakruti_store_issue JOIN
                    prakruti_syrup ON
                    prakruti_store_issue.syrup_bom_id =prakruti_syrup.id
                WHERE
                    prakruti_store_issue.id =CAST($1 AS INTEGER)
                ) AS a
            WHERE
                b.id = a.syrup_bom_id;
            
            UPDATE
                prakruti_syrup_line AS b
            SET
                extra_flag = 1,
                issued_weight = a.issued_quantity ,
                grn_no = a.grn_no,
                grn_list = b.grn_list || ', ' || a.grn_list,
                ar_no = a.ar_no,
                issue_common_id =a.id
            FROM(
                SELECT
                    issued_quantity,
                    prakruti_store_issue_item.id,
                    prakruti_store_issue_item.grn_no,
                    prakruti_store_issue_item.grn_list,
                    ar_no,
                    syrup_bom_id ,
                    grid_common_id_bom
                FROM
                    prakruti_store_issue_item INNER JOIN
                    prakruti_store_issue ON
                    prakruti_store_issue.id =prakruti_store_issue_item.main_id
                WHERE
                    prakruti_store_issue.id =CAST($1 AS INTEGER)
                ) AS a
            WHERE
                b.main_id = a.syrup_bom_id AND
                b.id =a.grid_common_id_bom;
                
            ---------------------------------------------------------------------
            -- INSERT THE GRN TABLE INTO SYRUP
            
            INSERT INTO prakruti_syrup_bom_grn_list_line
                    (
                    create_uid,
                    write_uid,
                    create_date,
                    write_date,
                    product_id,
                    grn_id,
                    received_qty,
                    issued_qty,
                    extra_issued_qty,
                    packing_style,
                    packing_per_qty,
                    remarks,
                    extra_issued_packing,
                    syrup_id
                    )
                SELECT
                    create_uid,
                    write_uid,
                    create_date,
                    write_date,
                    product_id,
                    grn_id,
                    received_qty,
                    issued_qty,
                    extra_issued_qty,
                    packing_style,
                    packing_per_qty,
                    remarks,
                    extra_issued_packing,
                    syrup_id
                FROM(
                    SELECT
                        prakruti_issue_grn_list_line.create_uid,
                        prakruti_issue_grn_list_line.write_uid,
                        prakruti_issue_grn_list_line.create_date,
                        prakruti_issue_grn_list_line.write_date,
                        prakruti_issue_grn_list_line.product_id,
                        prakruti_issue_grn_list_line.grn_id,
                        prakruti_issue_grn_list_line.received_qty,
                        prakruti_issue_grn_list_line.issued_qty,
                        prakruti_issue_grn_list_line.extra_issued_qty,
                        prakruti_issue_grn_list_line.packing_style,
                        prakruti_issue_grn_list_line.packing_per_qty,
                        prakruti_issue_grn_list_line.remarks,
                        prakruti_issue_grn_list_line.extra_issued_packing,
                        prakruti_store_issue.syrup_bom_id AS syrup_id
                    FROM 
                        prakruti_issue_grn_list_line JOIN
                        prakruti_store_issue ON
                        prakruti_issue_grn_list_line.issue_id = prakruti_store_issue.id 
                    WHERE 
                        prakruti_issue_grn_list_line.issue_id = $1 
                    ) AS a JOIN (
                    SELECT 
                        prakruti_syrup.id AS syrup_bom_id
                    FROM  
                        prakruti_syrup
                    WHERE
                        prakruti_syrup.id = $4
                                ) AS b ON a.syrup_id = b.syrup_bom_id;
            
            --------------------------------------------------------------------- 
                
                
            
            UPDATE
                prakruti_tablet AS b
            SET
                state = 'issued_quant',
                packing_material_request_flag = 1,
                material_issued_by= a.issued_by
            FROM(
                SELECT
                    issued_by,
                    tablet_bom_id
                FROM
                    prakruti_store_issue INNER JOIN
                    prakruti_tablet ON
                    prakruti_store_issue.tablet_bom_id =prakruti_tablet.id
                WHERE
                    prakruti_store_issue.id =CAST($1 as INTEGER)
                ) as a
            WHERE
                b.id = a.tablet_bom_id;
            
            UPDATE 
                prakruti_tablet_line as b 
            SET 
                extra_flag = 1,
                issued_weight = a.issued_quantity,
                grn_no = a.grn_no,
                grn_list = b.grn_list || ', ' || a.grn_list,
                ar_no = a.ar_no ,
                issue_common_id =a.id
            FROM(
                SELECT 
                    issued_quantity,
                    prakruti_store_issue_item.grn_no,
                    prakruti_store_issue_item.id,
                    prakruti_store_issue_item.grn_list, 
                    ar_no, 
                    tablet_bom_id ,
                    grid_common_id_bom 
                FROM 
                    prakruti_store_issue_item INNER JOIN 
                    prakruti_store_issue ON 
                    prakruti_store_issue.id =prakruti_store_issue_item.main_id 
                WHERE 
                    prakruti_store_issue.id =CAST($1 as INTEGER) 
                ) as a 
            WHERE 
                b.main_id = a.tablet_bom_id AND 
                b.id =a.grid_common_id_bom;
            
                
            ---------------------------------------------------------------------
            -- INSERT THE GRN TABLE INTO TABLET
            
            INSERT INTO prakruti_tablet_bom_grn_list_line
                    (
                    create_uid,
                    write_uid,
                    create_date,
                    write_date,
                    product_id,
                    grn_id,
                    received_qty,
                    issued_qty,
                    extra_issued_qty,
                    packing_style,
                    packing_per_qty,
                    remarks,
                    extra_issued_packing,
                    tablet_id
                    )
                SELECT
                    create_uid,
                    write_uid,
                    create_date,
                    write_date,
                    product_id,
                    grn_id,
                    received_qty,
                    issued_qty,
                    extra_issued_qty,
                    packing_style,
                    packing_per_qty,
                    remarks,
                    extra_issued_packing,
                    tablet_id
                FROM(
                    SELECT
                        prakruti_issue_grn_list_line.create_uid,
                        prakruti_issue_grn_list_line.write_uid,
                        prakruti_issue_grn_list_line.create_date,
                        prakruti_issue_grn_list_line.write_date,
                        prakruti_issue_grn_list_line.product_id,
                        prakruti_issue_grn_list_line.grn_id,
                        prakruti_issue_grn_list_line.received_qty,
                        prakruti_issue_grn_list_line.issued_qty,
                        prakruti_issue_grn_list_line.extra_issued_qty,
                        prakruti_issue_grn_list_line.packing_style,
                        prakruti_issue_grn_list_line.packing_per_qty,
                        prakruti_issue_grn_list_line.remarks,
                        prakruti_issue_grn_list_line.extra_issued_packing,
                        prakruti_store_issue.tablet_bom_id AS tablet_id
                    FROM 
                        prakruti_issue_grn_list_line JOIN
                        prakruti_store_issue ON
                        prakruti_issue_grn_list_line.issue_id = prakruti_store_issue.id 
                    WHERE 
                        prakruti_issue_grn_list_line.issue_id = $1 
                    ) AS a JOIN (
                    SELECT 
                        prakruti_tablet.id AS tablet_bom_id
                    FROM  
                        prakruti_tablet
                    WHERE
                        prakruti_tablet.id = $5
                                ) AS b ON a.tablet_id = b.tablet_bom_id;
            
            --------------------------------------------------------------------- 
            UPDATE
                prakruti_powder AS b
            SET
                state = 'issued_quant',
                packing_material_request_flag = 1,
                material_issued_by= a.issued_by
            FROM(
                SELECT
                    issued_by,
                    powder_bom_id
                FROM
                    prakruti_store_issue JOIN
                    prakruti_powder ON
                    prakruti_store_issue.powder_bom_id =prakruti_powder.id
                WHERE
                    prakruti_store_issue.id =CAST($1 AS INTEGER)
                ) AS a
            WHERE
                b.id = a.powder_bom_id;
            
            UPDATE
                prakruti_powder_line AS b
            SET
                extra_flag = 1,
                issued_weight = a.issued_quantity,
                grn_no = a.grn_no,
                grn_list = b.grn_list || ', ' || a.grn_list,
                ar_no = a.ar_no,
                issue_common_id =a.id
            FROM(
                SELECT
                    issued_quantity,
                    prakruti_store_issue_item.id,
                    prakruti_store_issue_item.grn_no,
                    prakruti_store_issue_item.grn_list,
                    ar_no,
                    powder_bom_id,
                    grid_common_id_bom
                FROM
                    prakruti_store_issue_item JOIN
                    prakruti_store_issue ON
                    prakruti_store_issue.id =prakruti_store_issue_item.main_id
                WHERE
                    prakruti_store_issue.id =CAST($1 AS INTEGER)
                ) AS a
            WHERE
                b.main_id = a.powder_bom_id AND
                b.id =a.grid_common_id_bom;
                
                
            ---------------------------------------------------------------------
            -- INSERT THE GRN TABLE INTO POWDER
            
            INSERT INTO prakruti_powder_bom_grn_list_line
                    (
                    create_uid,
                    write_uid,
                    create_date,
                    write_date,
                    product_id,
                    grn_id,
                    received_qty,
                    issued_qty,
                    extra_issued_qty,
                    packing_style,
                    packing_per_qty,
                    remarks,
                    extra_issued_packing,
                    powder_id
                    )
                SELECT
                    create_uid,
                    write_uid,
                    create_date,
                    write_date,
                    product_id,
                    grn_id,
                    received_qty,
                    issued_qty,
                    extra_issued_qty,
                    packing_style,
                    packing_per_qty,
                    remarks,
                    extra_issued_packing,
                    powder_id
                FROM(
                    SELECT
                        prakruti_issue_grn_list_line.create_uid,
                        prakruti_issue_grn_list_line.write_uid,
                        prakruti_issue_grn_list_line.create_date,
                        prakruti_issue_grn_list_line.write_date,
                        prakruti_issue_grn_list_line.product_id,
                        prakruti_issue_grn_list_line.grn_id,
                        prakruti_issue_grn_list_line.received_qty,
                        prakruti_issue_grn_list_line.issued_qty,
                        prakruti_issue_grn_list_line.extra_issued_qty,
                        prakruti_issue_grn_list_line.packing_style,
                        prakruti_issue_grn_list_line.packing_per_qty,
                        prakruti_issue_grn_list_line.remarks,
                        prakruti_issue_grn_list_line.extra_issued_packing,
                        prakruti_store_issue.powder_bom_id AS powder_id
                    FROM 
                        prakruti_issue_grn_list_line JOIN
                        prakruti_store_issue ON
                        prakruti_issue_grn_list_line.issue_id = prakruti_store_issue.id 
                    WHERE 
                        prakruti_issue_grn_list_line.issue_id = $1 
                    ) AS a JOIN (
                    SELECT 
                        prakruti_powder.id AS powder_bom_id
                    FROM  
                        prakruti_powder
                    WHERE
                        prakruti_powder.id = $8
                                ) AS b ON a.powder_id = b.powder_bom_id;
            
            ---------------------------------------------------------------------
            
            UPDATE 
                prakruti_syrup as b 
            SET 
                state = 'packing_material_issued',
                material_issued_by= a.issued_by 
            FROM(
                SELECT 
                    issued_by,
                    syrup_packing_bom_id 
                FROM 
                    prakruti_store_issue INNER JOIN 
                    prakruti_syrup ON 
                    prakruti_store_issue.syrup_packing_bom_id = prakruti_syrup.id 
                WHERE 
                    prakruti_store_issue.id =CAST($1 as INTEGER) 
                ) as a 
            WHERE 
                b.id = a.syrup_packing_bom_id;
            
            UPDATE 
                prakruti_syrup_line_packing as b 
            SET 
                extra_flag = 1,
                issued_weight = a.issued_quantity,
                grn_no= a.grn_no,
                grn_list = b.grn_list || ', ' || a.grn_list,
                ar_no = a.ar_no,
                issue_common_id =a.id 
            FROM(
                SELECT 
                    issued_quantity,
                    prakruti_store_issue_item.id,
                    prakruti_store_issue_item.grn_no,
                    prakruti_store_issue_item.grn_list, 
                    ar_no, 
                    syrup_packing_bom_id ,
                    grid_common_id_bom 
                FROM 
                    prakruti_store_issue_item INNER JOIN 
                    prakruti_store_issue ON 
                    prakruti_store_issue.id =prakruti_store_issue_item.main_id 
                WHERE 
                    prakruti_store_issue.id =CAST($1 as INTEGER) ) as a 
            WHERE 
                b.packing_id = a.syrup_packing_bom_id AND 
                b.id =a.grid_common_id_bom;
                
            ---------------------------------------------------------------------
            -- INSERT THE GRN TABLE INTO SYRUP FOR PACKING
            
            INSERT INTO prakruti_syrup_bom_grn_list_line
                    (
                    create_uid,
                    write_uid,
                    create_date,
                    write_date,
                    product_id,
                    grn_id,
                    received_qty,
                    issued_qty,
                    extra_issued_qty,
                    packing_style,
                    packing_per_qty,
                    remarks,
                    extra_issued_packing,
                    syrup_id
                    )
                SELECT
                    create_uid,
                    write_uid,
                    create_date,
                    write_date,
                    product_id,
                    grn_id,
                    received_qty,
                    issued_qty,
                    extra_issued_qty,
                    packing_style,
                    packing_per_qty,
                    remarks,
                    extra_issued_packing,
                    syrup_id
                FROM(
                    SELECT
                        prakruti_issue_grn_list_line.create_uid,
                        prakruti_issue_grn_list_line.write_uid,
                        prakruti_issue_grn_list_line.create_date,
                        prakruti_issue_grn_list_line.write_date,
                        prakruti_issue_grn_list_line.product_id,
                        prakruti_issue_grn_list_line.grn_id,
                        prakruti_issue_grn_list_line.received_qty,
                        prakruti_issue_grn_list_line.issued_qty,
                        prakruti_issue_grn_list_line.extra_issued_qty,
                        prakruti_issue_grn_list_line.packing_style,
                        prakruti_issue_grn_list_line.packing_per_qty,
                        prakruti_issue_grn_list_line.remarks,
                        prakruti_issue_grn_list_line.extra_issued_packing,
                        prakruti_store_issue.syrup_packing_bom_id AS syrup_id
                    FROM 
                        prakruti_issue_grn_list_line JOIN
                        prakruti_store_issue ON
                        prakruti_issue_grn_list_line.issue_id = prakruti_store_issue.id 
                    WHERE 
                        prakruti_issue_grn_list_line.issue_id = $1 
                    ) AS a JOIN (
                    SELECT 
                        prakruti_syrup.id AS syrup_packing_bom_id
                    FROM  
                        prakruti_syrup
                    WHERE
                        prakruti_syrup.id = $6
                                ) AS b ON a.syrup_id = b.syrup_packing_bom_id;
            
            ---------------------------------------------------------------------             
            
            
            
            UPDATE 
                prakruti_tablet as b 
            SET 
                state = 'packing_material_issued' ,
                material_issued_by= a.issued_by 
            FROM(
                SELECT 
                    issued_by,
                    tablet_packing_bom_id 
                FROM 
                    prakruti_store_issue INNER JOIN 
                    prakruti_tablet ON 
                    prakruti_store_issue.tablet_packing_bom_id =prakruti_tablet.id 
                WHERE 
                    prakruti_store_issue.id =CAST($1 as INTEGER) 
                ) as a 
            WHERE 
                b.id = a.tablet_packing_bom_id;
            
            UPDATE 
                prakruti_tablet_line_packing as b 
            SET 
                extra_flag = 1,
                issued_weight = a.issued_quantity,
                grn_no= a.grn_no,
                grn_list = b.grn_list || ', ' || a.grn_list,
                ar_no = a.ar_no ,
                issue_common_id =a.id 
            FROM( 
                SELECT 
                    issued_quantity,
                    prakruti_store_issue_item.id,
                    prakruti_store_issue_item.grn_no,
                    prakruti_store_issue_item.grn_list, 
                    ar_no, 
                    tablet_packing_bom_id ,
                    grid_common_id_bom 
                FROM 
                    prakruti_store_issue_item INNER JOIN 
                    prakruti_store_issue ON 
                    prakruti_store_issue.id =prakruti_store_issue_item.main_id 
                WHERE 
                    prakruti_store_issue.id =CAST($1 as INTEGER) 
                ) as a 
            WHERE 
                b.packing_id = a.tablet_packing_bom_id AND 
                b.id =a.grid_common_id_bom;
                
                
            
                
            ---------------------------------------------------------------------
            -- INSERT THE GRN TABLE INTO SYRUP FOR PACKING
            
            INSERT INTO prakruti_tablet_bom_grn_list_line
                    (
                    create_uid,
                    write_uid,
                    create_date,
                    write_date,
                    product_id,
                    grn_id,
                    received_qty,
                    issued_qty,
                    extra_issued_qty,
                    packing_style,
                    packing_per_qty,
                    remarks,
                    extra_issued_packing,
                    tablet_id
                    )
                SELECT
                    create_uid,
                    write_uid,
                    create_date,
                    write_date,
                    product_id,
                    grn_id,
                    received_qty,
                    issued_qty,
                    extra_issued_qty,
                    packing_style,
                    packing_per_qty,
                    remarks,
                    extra_issued_packing,
                    tablet_id
                FROM(
                    SELECT
                        prakruti_issue_grn_list_line.create_uid,
                        prakruti_issue_grn_list_line.write_uid,
                        prakruti_issue_grn_list_line.create_date,
                        prakruti_issue_grn_list_line.write_date,
                        prakruti_issue_grn_list_line.product_id,
                        prakruti_issue_grn_list_line.grn_id,
                        prakruti_issue_grn_list_line.received_qty,
                        prakruti_issue_grn_list_line.issued_qty,
                        prakruti_issue_grn_list_line.extra_issued_qty,
                        prakruti_issue_grn_list_line.packing_style,
                        prakruti_issue_grn_list_line.packing_per_qty,
                        prakruti_issue_grn_list_line.remarks,
                        prakruti_issue_grn_list_line.extra_issued_packing,
                        prakruti_store_issue.tablet_packing_bom_id AS tablet_id
                    FROM 
                        prakruti_issue_grn_list_line JOIN
                        prakruti_store_issue ON
                        prakruti_issue_grn_list_line.issue_id = prakruti_store_issue.id 
                    WHERE 
                        prakruti_issue_grn_list_line.issue_id = $1 
                    ) AS a JOIN (
                    SELECT 
                        prakruti_tablet.id AS tablet_packing_bom_id
                    FROM  
                        prakruti_tablet
                    WHERE
                        prakruti_tablet.id = $7
                                ) AS b ON a.tablet_id = b.tablet_packing_bom_id;
            
            ---------------------------------------------------------------------                 
                
            
            
            UPDATE 
                prakruti_powder as b 
            SET 
                state = 'packing_material_issued' ,
                material_issued_by= a.issued_by 
            FROM(
                SELECT 
                    issued_by,
                    powder_packing_bom_id 
                FROM 
                    prakruti_store_issue INNER JOIN 
                    prakruti_powder ON 
                    prakruti_store_issue.powder_packing_bom_id =prakruti_powder.id 
                WHERE 
                    prakruti_store_issue.id =CAST($1 as INTEGER) 
                ) as a 
            WHERE 
                b.id = a.powder_packing_bom_id;
            
            UPDATE 
                prakruti_powder_line_packing as b 
            SET 
                extra_flag = 1,
                issued_weight = a.issued_quantity,
                grn_no= a.grn_no,
                grn_list = b.grn_list || ', ' || a.grn_list,
                ar_no = a.ar_no ,
                issue_common_id =a.id
            FROM( 
                SELECT 
                    issued_quantity,
                    prakruti_store_issue_item.id,
                    prakruti_store_issue_item.grn_no,
                    prakruti_store_issue_item.grn_list, 
                    ar_no, 
                    powder_packing_bom_id ,
                    grid_common_id_bom 
                FROM 
                    prakruti_store_issue_item INNER JOIN 
                    prakruti_store_issue ON 
                    prakruti_store_issue.id =prakruti_store_issue_item.main_id 
                WHERE 
                    prakruti_store_issue.id =CAST($1 as INTEGER) 
                ) as a 
            WHERE 
                b.packing_id = a.powder_packing_bom_id AND 
                b.id =a.grid_common_id_bom;
                
                
            
                
            ---------------------------------------------------------------------
            -- INSERT THE GRN TABLE INTO POWDER FOR PACKING
            
            INSERT INTO prakruti_powder_bom_grn_list_line
                    (
                    create_uid,
                    write_uid,
                    create_date,
                    write_date,
                    product_id,
                    grn_id,
                    received_qty,
                    issued_qty,
                    extra_issued_qty,
                    packing_style,
                    packing_per_qty,
                    remarks,
                    extra_issued_packing,
                    powder_id
                    )
                SELECT
                    create_uid,
                    write_uid,
                    create_date,
                    write_date,
                    product_id,
                    grn_id,
                    received_qty,
                    issued_qty,
                    extra_issued_qty,
                    packing_style,
                    packing_per_qty,
                    remarks,
                    extra_issued_packing,
                    powder_id
                FROM(
                    SELECT
                        prakruti_issue_grn_list_line.create_uid,
                        prakruti_issue_grn_list_line.write_uid,
                        prakruti_issue_grn_list_line.create_date,
                        prakruti_issue_grn_list_line.write_date,
                        prakruti_issue_grn_list_line.product_id,
                        prakruti_issue_grn_list_line.grn_id,
                        prakruti_issue_grn_list_line.received_qty,
                        prakruti_issue_grn_list_line.issued_qty,
                        prakruti_issue_grn_list_line.extra_issued_qty,
                        prakruti_issue_grn_list_line.packing_style,
                        prakruti_issue_grn_list_line.packing_per_qty,
                        prakruti_issue_grn_list_line.remarks,
                        prakruti_issue_grn_list_line.extra_issued_packing,
                        prakruti_store_issue.powder_packing_bom_id AS powder_id
                    FROM 
                        prakruti_issue_grn_list_line JOIN
                        prakruti_store_issue ON
                        prakruti_issue_grn_list_line.issue_id = prakruti_store_issue.id 
                    WHERE 
                        prakruti_issue_grn_list_line.issue_id = $1 
                    ) AS a JOIN (
                    SELECT 
                        prakruti_powder.id AS powder_packing_bom_id
                    FROM  
                        prakruti_powder
                    WHERE
                        prakruti_powder.id = $9
                                ) AS b ON a.powder_id = b.powder_packing_bom_id;
   
   
   
            --PERFORM stock_store_issue($1);
            
            UPDATE
                    prakruti_grn_inspection_details_line
            SET
                    available_qty = available_qty - b.issued_qty
            FROM(
                SELECT
                    prakruti_issue_grn_list_line.grn_id,
                    prakruti_issue_grn_list_line.issued_qty,
                    prakruti_issue_grn_list_line.product_id
                FROM
                    prakruti_issue_grn_list_line JOIN
                    prakruti_grn_inspection_details ON
                    prakruti_issue_grn_list_line.grn_id = prakruti_grn_inspection_details.id
                WHERE
                    prakruti_issue_grn_list_line.issue_id = $1
                ) AS b
            WHERE
                b.product_id = prakruti_grn_inspection_details_line.product_id  AND b.grn_id = prakruti_grn_inspection_details_line.inspection_line_id;
            
        ELSIF extra_issue_qty >0 THEN
        
            UPDATE
                prakruti_bill_of_material AS b
            SET
                state = 'extra_issued',
                material_issued_by= a.issued_by
            FROM(
                SELECT
                    issued_by,
                    extraction_bom_id
                FROM
                    prakruti_store_issue JOIN
                    prakruti_bill_of_material ON
                    prakruti_store_issue.extraction_bom_id =prakruti_bill_of_material.id
                WHERE
                    prakruti_store_issue.id =CAST($1 AS INTEGER)
                ) AS a
            WHERE
                b.id = a.extraction_bom_id;
                
            UPDATE 
                prakruti_bill_of_material_line as b 
            SET 
                extra_issued_qty = a.extra_issued_qty,
                grn_no= a.grn_no,
                grn_list = b.grn_list || ', ' || a.grn_list,
                ar_no = a.ar_no,
                issue_common_id =a.id 
            FROM(
                SELECT 
                    extra_issued_qty,
                    prakruti_store_issue_item.id,
                    prakruti_store_issue_item.grn_no,
                    prakruti_store_issue_item.grn_list, 
                    ar_no, 
                    extraction_bom_id,
                    grid_common_id_bom 
                FROM 
                    prakruti_store_issue_item INNER JOIN 
                    prakruti_store_issue ON 
                    prakruti_store_issue.id =prakruti_store_issue_item.main_id 
                WHERE 
                    prakruti_store_issue.id =CAST($1 as INTEGER) 
                ) as a 
            WHERE 
                b.main_id = a.extraction_bom_id AND 
                b.id =a.grid_common_id_bom;
                
            ---------------------------------------------------------------------
            -- INSERT THE GRN TABLE INTO EXTRACTION FOR EXTRA PACKING
            
            INSERT INTO prakruti_extraction_bom_grn_list_line
                    (
                    create_uid,
                    write_uid,
                    create_date,
                    write_date,
                    product_id,
                    grn_id,
                    received_qty,
                    issued_qty,
                    extra_issued_qty,
                    packing_style,
                    packing_per_qty,
                    remarks,
                    extra_issued_packing,
                    extraction_id
                    )
                SELECT
                    create_uid,
                    write_uid,
                    create_date,
                    write_date,
                    product_id,
                    grn_id,
                    received_qty,
                    issued_qty,
                    extra_issued_qty,
                    packing_style,
                    packing_per_qty,
                    remarks,
                    extra_issued_packing,
                    extraction_id
                FROM(
                    SELECT
                        prakruti_issue_grn_list_line.create_uid,
                        prakruti_issue_grn_list_line.write_uid,
                        prakruti_issue_grn_list_line.create_date,
                        prakruti_issue_grn_list_line.write_date,
                        prakruti_issue_grn_list_line.product_id,
                        prakruti_issue_grn_list_line.grn_id,
                        prakruti_issue_grn_list_line.received_qty,
                        prakruti_issue_grn_list_line.issued_qty,
                        prakruti_issue_grn_list_line.extra_issued_qty,
                        prakruti_issue_grn_list_line.packing_style,
                        prakruti_issue_grn_list_line.packing_per_qty,
                        prakruti_issue_grn_list_line.remarks,
                        prakruti_issue_grn_list_line.extra_issued_packing,
                        prakruti_store_issue.extraction_bom_id AS extraction_id
                    FROM 
                        prakruti_issue_grn_list_line JOIN
                        prakruti_store_issue ON
                        prakruti_issue_grn_list_line.issue_id = prakruti_store_issue.id 
                    WHERE 
                        prakruti_issue_grn_list_line.issue_id = $1 
                    ) AS a JOIN (
                    SELECT 
                        prakruti_bill_of_material.id AS extraction_bom_id
                    FROM  
                        prakruti_bill_of_material
                    WHERE
                        prakruti_bill_of_material.id = $3
                                ) AS b ON a.extraction_id = b.extraction_bom_id;
            
            ---------------------------------------------------------------------
            UPDATE
                prakruti_syrup AS b
            SET
                state = 'extra_quantity_issued',
                material_issued_by= a.issued_by
            FROM(
                SELECT
                    issued_by,
                    syrup_bom_id
                FROM
                    prakruti_store_issue JOIN
                    prakruti_syrup ON
                    prakruti_store_issue.syrup_bom_id =prakruti_syrup.id
                WHERE
                    prakruti_store_issue.id =CAST($1 AS INTEGER)
                ) AS a
            WHERE
                b.id = a.syrup_bom_id;
            
            -- UPDATING FLAG TO 0 IF ITS IS 2
            
            UPDATE
                prakruti_syrup AS b
            SET
                packing_material_request_flag = 1
            FROM(
                SELECT
                    syrup_bom_id
                FROM
                    prakruti_store_issue JOIN
                    prakruti_syrup ON
                    prakruti_store_issue.syrup_bom_id =prakruti_syrup.id
                WHERE
                    prakruti_store_issue.id =CAST($1 AS INTEGER)
                ) AS a
            WHERE
                b.id = a.syrup_bom_id AND
                b.packing_material_request_flag = 2;
            
            UPDATE 
                prakruti_syrup_line as b 
            SET 
                extra_issued_qty = a.extra_issued_qty,
                grn_no= a.grn_no,
                grn_list = b.grn_list || ', ' || a.grn_list,
                ar_no = a.ar_no,
                issue_common_id =a.id  
            FROM(
                SELECT extra_issued_qty,prakruti_store_issue_item.grn_no,prakruti_store_issue_item.id,
                    prakruti_store_issue_item.grn_list, ar_no, syrup_bom_id,grid_common_id_bom FROM prakruti_store_issue_item INNER JOIN prakruti_store_issue ON prakruti_store_issue.id =prakruti_store_issue_item.main_id WHERE prakruti_store_issue.id =CAST($1 as INTEGER) ) as a 
            WHERE 
                b.main_id = a.syrup_bom_id AND 
                b.id =a.grid_common_id_bom;
                
            ---------------------------------------------------------------------
            -- INSERT THE GRN TABLE INTO SYRUP FOR EXTRA ISSUED
            
            INSERT INTO prakruti_syrup_bom_grn_list_line
                    (
                    create_uid,
                    write_uid,
                    create_date,
                    write_date,
                    product_id,
                    grn_id,
                    received_qty,
                    issued_qty,
                    extra_issued_qty,
                    packing_style,
                    packing_per_qty,
                    remarks,
                    extra_issued_packing,
                    syrup_id
                    )
                SELECT
                    create_uid,
                    write_uid,
                    create_date,
                    write_date,
                    product_id,
                    grn_id,
                    received_qty,
                    issued_qty,
                    extra_issued_qty,
                    packing_style,
                    packing_per_qty,
                    remarks,
                    extra_issued_packing,
                    syrup_id
                FROM(
                    SELECT
                        prakruti_issue_grn_list_line.create_uid,
                        prakruti_issue_grn_list_line.write_uid,
                        prakruti_issue_grn_list_line.create_date,
                        prakruti_issue_grn_list_line.write_date,
                        prakruti_issue_grn_list_line.product_id,
                        prakruti_issue_grn_list_line.grn_id,
                        prakruti_issue_grn_list_line.received_qty,
                        prakruti_issue_grn_list_line.issued_qty,
                        prakruti_issue_grn_list_line.extra_issued_qty,
                        prakruti_issue_grn_list_line.packing_style,
                        prakruti_issue_grn_list_line.packing_per_qty,
                        prakruti_issue_grn_list_line.remarks,
                        prakruti_issue_grn_list_line.extra_issued_packing,
                        prakruti_store_issue.syrup_bom_id AS syrup_id
                    FROM 
                        prakruti_issue_grn_list_line JOIN
                        prakruti_store_issue ON
                        prakruti_issue_grn_list_line.issue_id = prakruti_store_issue.id 
                    WHERE 
                        prakruti_issue_grn_list_line.issue_id = $1 
                    ) AS a JOIN (
                    SELECT 
                        prakruti_syrup.id AS syrup_bom_id
                    FROM  
                        prakruti_syrup
                    WHERE
                        prakruti_syrup.id = $4
                                ) AS b ON a.syrup_id = b.syrup_bom_id;
            
            --------------------------------------------------------------------- 
            UPDATE
                prakruti_tablet AS b
            SET
                state = 'extra_quantity_issued',
                material_issued_by= a.issued_by
            FROM(
                SELECT
                    issued_by,
                    tablet_bom_id
                FROM
                    prakruti_store_issue JOIN
                    prakruti_tablet ON
                    prakruti_store_issue.tablet_bom_id =prakruti_tablet.id
                WHERE
                    prakruti_store_issue.id =CAST($1 AS INTEGER)
                ) AS a
            WHERE
                b.id = a.tablet_bom_id;
            
            -- UPDATING FLAG TO 0 IF ITS IS 2
            
            UPDATE
                prakruti_tablet AS b
            SET
                packing_material_request_flag = 1
            FROM(
                SELECT
                    tablet_bom_id
                FROM
                    prakruti_store_issue JOIN
                    prakruti_tablet ON
                    prakruti_store_issue.tablet_bom_id =prakruti_tablet.id
                WHERE
                    prakruti_store_issue.id =CAST($1 AS INTEGER)
                ) AS a
            WHERE
                b.id = a.tablet_bom_id AND
                b.packing_material_request_flag = 2;
            
            UPDATE 
                prakruti_tablet_line as b 
            SET 
                extra_issued_qty = a.extra_issued_qty,
                issue_common_id =a.id,
                grn_no= a.grn_no,
                grn_list = b.grn_list || ', ' || a.grn_list,ar_no = a.ar_no 
            FROM (
                    SELECT 
                        extra_issued_qty,
                        prakruti_store_issue_item.id,
                        prakruti_store_issue_item.grn_no,
                        prakruti_store_issue_item.grn_list, 
                        ar_no, 
                        tablet_bom_id,
                        grid_common_id_bom 
                    FROM 
                        prakruti_store_issue_item INNER JOIN 
                        prakruti_store_issue ON 
                        prakruti_store_issue.id =prakruti_store_issue_item.main_id 
                    WHERE 
                        prakruti_store_issue.id =CAST($1 as INTEGER) 
                ) as a 
            WHERE 
                b.main_id = a.tablet_bom_id AND 
                b.id =a.grid_common_id_bom;
                    
            
                
            ---------------------------------------------------------------------
            -- INSERT THE GRN TABLE INTO SYRUP FOR EXTRA ISSUED
            
            INSERT INTO prakruti_tablet_bom_grn_list_line
                    (
                    create_uid,
                    write_uid,
                    create_date,
                    write_date,
                    product_id,
                    grn_id,
                    received_qty,
                    issued_qty,
                    extra_issued_qty,
                    packing_style,
                    packing_per_qty,
                    remarks,
                    extra_issued_packing,
                    tablet_id
                    )
                SELECT
                    create_uid,
                    write_uid,
                    create_date,
                    write_date,
                    product_id,
                    grn_id,
                    received_qty,
                    issued_qty,
                    extra_issued_qty,
                    packing_style,
                    packing_per_qty,
                    remarks,
                    extra_issued_packing,
                    tablet_id
                FROM(
                    SELECT
                        prakruti_issue_grn_list_line.create_uid,
                        prakruti_issue_grn_list_line.write_uid,
                        prakruti_issue_grn_list_line.create_date,
                        prakruti_issue_grn_list_line.write_date,
                        prakruti_issue_grn_list_line.product_id,
                        prakruti_issue_grn_list_line.grn_id,
                        prakruti_issue_grn_list_line.received_qty,
                        prakruti_issue_grn_list_line.issued_qty,
                        prakruti_issue_grn_list_line.extra_issued_qty,
                        prakruti_issue_grn_list_line.packing_style,
                        prakruti_issue_grn_list_line.packing_per_qty,
                        prakruti_issue_grn_list_line.remarks,
                        prakruti_issue_grn_list_line.extra_issued_packing,
                        prakruti_store_issue.tablet_bom_id AS tablet_id
                    FROM 
                        prakruti_issue_grn_list_line JOIN
                        prakruti_store_issue ON
                        prakruti_issue_grn_list_line.issue_id = prakruti_store_issue.id 
                    WHERE 
                        prakruti_issue_grn_list_line.issue_id = $1 
                    ) AS a JOIN (
                    SELECT 
                        prakruti_tablet.id AS tablet_bom_id
                    FROM  
                        prakruti_tablet
                    WHERE
                        prakruti_tablet.id = $5
                                ) AS b ON a.tablet_id = b.tablet_bom_id;  
                                
     -----------------------------------------------------------------------------------------------------                           
            UPDATE
                prakruti_powder AS b
            SET
                state = 'extra_quantity_issued',
                material_issued_by= a.issued_by
            FROM(
                SELECT
                    issued_by,
                    powder_bom_id
                FROM
                    prakruti_store_issue JOIN
                    prakruti_powder ON
                    prakruti_store_issue.powder_bom_id =prakruti_powder.id
                WHERE
                    prakruti_store_issue.id =CAST($1 AS INTEGER)
                ) AS a
            WHERE
                b.id = a.powder_bom_id;
            
            -- UPDATING FLAG TO 0 IF ITS IS 2
            
            UPDATE
                prakruti_powder AS b
            SET
                packing_material_request_flag = 1
            FROM(
                SELECT
                    powder_bom_id
                FROM
                    prakruti_store_issue JOIN
                    prakruti_powder ON
                    prakruti_store_issue.powder_bom_id =prakruti_powder.id
                WHERE
                    prakruti_store_issue.id =CAST($1 AS INTEGER)
                ) AS a
            WHERE
                b.id = a.powder_bom_id AND
                b.packing_material_request_flag = 2;
            
            UPDATE
                prakruti_powder_line AS b
            SET
                extra_flag = 1,
                extra_issued_qty = a.extra_issued_qty,
                grn_no = a.grn_no,
                grn_list = b.grn_list || ', ' || a.grn_list,
                ar_no = a.ar_no,
                issue_common_id =a.id
            FROM(
                SELECT
                    extra_issued_qty,
                    prakruti_store_issue_item.grn_no,
                    prakruti_store_issue_item.id,
                    prakruti_store_issue_item.grn_list,
                    ar_no,
                    powder_bom_id,
                    grid_common_id_bom
                FROM
                    prakruti_store_issue_item JOIN
                    prakruti_store_issue ON
                    prakruti_store_issue.id =prakruti_store_issue_item.main_id
                WHERE
                    prakruti_store_issue.id =CAST($1 AS INTEGER)
                ) AS a
            WHERE
                b.main_id = a.powder_bom_id AND
                b.id =a.grid_common_id_bom;
                
                
            ---------------------------------------------------------------------
            -- INSERT THE GRN TABLE INTO POWDER
            
            INSERT INTO prakruti_powder_bom_grn_list_line
                    (
                    create_uid,
                    write_uid,
                    create_date,
                    write_date,
                    product_id,
                    grn_id,
                    received_qty,
                    issued_qty,
                    extra_issued_qty,
                    packing_style,
                    packing_per_qty,
                    remarks,
                    extra_issued_packing,
                    powder_id
                    )
                SELECT
                    create_uid,
                    write_uid,
                    create_date,
                    write_date,
                    product_id,
                    grn_id,
                    received_qty,
                    issued_qty,
                    extra_issued_qty,
                    packing_style,
                    packing_per_qty,
                    remarks,
                    extra_issued_packing,
                    powder_id
                FROM(
                    SELECT
                        prakruti_issue_grn_list_line.create_uid,
                        prakruti_issue_grn_list_line.write_uid,
                        prakruti_issue_grn_list_line.create_date,
                        prakruti_issue_grn_list_line.write_date,
                        prakruti_issue_grn_list_line.product_id,
                        prakruti_issue_grn_list_line.grn_id,
                        prakruti_issue_grn_list_line.received_qty,
                        prakruti_issue_grn_list_line.issued_qty,
                        prakruti_issue_grn_list_line.extra_issued_qty,
                        prakruti_issue_grn_list_line.packing_style,
                        prakruti_issue_grn_list_line.packing_per_qty,
                        prakruti_issue_grn_list_line.remarks,
                        prakruti_issue_grn_list_line.extra_issued_packing,
                        prakruti_store_issue.powder_bom_id AS powder_id
                    FROM 
                        prakruti_issue_grn_list_line JOIN
                        prakruti_store_issue ON
                        prakruti_issue_grn_list_line.issue_id = prakruti_store_issue.id 
                    WHERE 
                        prakruti_issue_grn_list_line.issue_id = $1 
                    ) AS a JOIN (
                    SELECT 
                        prakruti_powder.id AS powder_bom_id
                    FROM  
                        prakruti_powder
                    WHERE
                        prakruti_powder.id = $8
                                ) AS b ON a.powder_id = b.powder_bom_id;
            
            ---------------------------------------------------------------------
            UPDATE
                prakruti_syrup AS b
            SET
                state = 'extra_packing_issued',
                material_issued_by= a.issued_by
            FROM(
                SELECT
                    issued_by,
                    syrup_packing_bom_id
                FROM
                    prakruti_store_issue JOIN
                    prakruti_syrup ON
                    prakruti_store_issue.syrup_packing_bom_id =prakruti_syrup.id
                WHERE
                    prakruti_store_issue.id =CAST($1 AS INTEGER)
                ) AS a
            WHERE
                b.id = a.syrup_packing_bom_id;
            
            UPDATE 
                prakruti_syrup_line_packing as b 
            SET 
                extra_issued_qty = a.extra_issued_qty,
                grn_no= a.grn_no,
                grn_list = b.grn_list || ', ' || a.grn_list,
                ar_no = a.ar_no,
                issue_common_id =a.id 
            FROM ( 
                    SELECT 
                        extra_issued_qty,
                        prakruti_store_issue_item.id,
                        prakruti_store_issue_item.grn_no,
                        prakruti_store_issue_item.grn_list, 
                        ar_no, 
                        syrup_packing_bom_id ,
                        grid_common_id_bom 
                    FROM 
                        prakruti_store_issue_item INNER JOIN 
                        prakruti_store_issue ON 
                        prakruti_store_issue.id =prakruti_store_issue_item.main_id 
                    WHERE 
                        prakruti_store_issue.id =CAST($1 as INTEGER) 
                ) as a 
            WHERE 
                b.packing_id = a.syrup_packing_bom_id AND 
                b.id =a.grid_common_id_bom;
                
            ---------------------------------------------------------------------
            -- INSERT THE GRN TABLE INTO SYRUP FOR EXTRA PACKING
            
            INSERT INTO prakruti_syrup_bom_grn_list_line
                    (
                    create_uid,
                    write_uid,
                    create_date,
                    write_date,
                    product_id,
                    grn_id,
                    received_qty,
                    issued_qty,
                    extra_issued_qty,
                    packing_style,
                    packing_per_qty,
                    remarks,
                    extra_issued_packing,
                    syrup_id
                    )
                SELECT
                    create_uid,
                    write_uid,
                    create_date,
                    write_date,
                    product_id,
                    grn_id,
                    received_qty,
                    issued_qty,
                    extra_issued_qty,
                    packing_style,
                    packing_per_qty,
                    remarks,
                    extra_issued_packing,
                    syrup_id
                FROM(
                    SELECT
                        prakruti_issue_grn_list_line.create_uid,
                        prakruti_issue_grn_list_line.write_uid,
                        prakruti_issue_grn_list_line.create_date,
                        prakruti_issue_grn_list_line.write_date,
                        prakruti_issue_grn_list_line.product_id,
                        prakruti_issue_grn_list_line.grn_id,
                        prakruti_issue_grn_list_line.received_qty,
                        prakruti_issue_grn_list_line.issued_qty,
                        prakruti_issue_grn_list_line.extra_issued_qty,
                        prakruti_issue_grn_list_line.packing_style,
                        prakruti_issue_grn_list_line.packing_per_qty,
                        prakruti_issue_grn_list_line.remarks,
                        prakruti_issue_grn_list_line.extra_issued_packing,
                        prakruti_store_issue.syrup_packing_bom_id AS syrup_id
                    FROM 
                        prakruti_issue_grn_list_line JOIN
                        prakruti_store_issue ON
                        prakruti_issue_grn_list_line.issue_id = prakruti_store_issue.id 
                    WHERE 
                        prakruti_issue_grn_list_line.issue_id = $1 
                    ) AS a JOIN (
                    SELECT 
                        prakruti_syrup.id AS syrup_packing_bom_id
                    FROM  
                        prakruti_syrup
                    WHERE
                        prakruti_syrup.id = $6
                                ) AS b ON a.syrup_id = b.syrup_packing_bom_id;
            
            ---------------------------------------------------------------------
            UPDATE
                prakruti_tablet AS b
            SET
                state = 'extra_packing_issued',
                material_issued_by= a.issued_by
            FROM(
                SELECT
                    issued_by,
                    tablet_packing_bom_id
                FROM
                    prakruti_store_issue JOIN
                    prakruti_tablet ON
                    prakruti_store_issue.tablet_packing_bom_id =prakruti_tablet.id
                WHERE
                    prakruti_store_issue.id =CAST($1 AS INTEGER)
                ) AS a
            WHERE
                b.id = a.tablet_packing_bom_id;
            
            UPDATE 
                prakruti_tablet_line_packing as b 
            SET 
                extra_issued_qty = a.extra_issued_qty,
                grn_no= a.grn_no,
                grn_list = b.grn_list || ', ' || a.grn_list,
                ar_no = a.ar_no,
                issue_common_id =a.id 
            FROM( 
                SELECT 
                    extra_issued_qty,
                    prakruti_store_issue_item.id,
                    prakruti_store_issue_item.grn_no,
                    prakruti_store_issue_item.grn_list, 
                    ar_no, 
                    tablet_packing_bom_id ,
                    grid_common_id_bom 
                FROM 
                    prakruti_store_issue_item INNER JOIN 
                    prakruti_store_issue ON 
                    prakruti_store_issue.id =prakruti_store_issue_item.main_id 
                WHERE 
                    prakruti_store_issue.id =CAST($1 as INTEGER) 
                ) as a 
            WHERE 
                b.packing_id = a.tablet_packing_bom_id AND 
                b.id =a.grid_common_id_bom;
                    
            
                
            ---------------------------------------------------------------------
            -- INSERT THE GRN TABLE INTO TABLET FOR EXTRA PACKING
            
            INSERT INTO prakruti_tablet_bom_grn_list_line
                    (
                    create_uid,
                    write_uid,
                    create_date,
                    write_date,
                    product_id,
                    grn_id,
                    received_qty,
                    issued_qty,
                    extra_issued_qty,
                    packing_style,
                    packing_per_qty,
                    remarks,
                    extra_issued_packing,
                    tablet_id
                    )
                SELECT
                    create_uid,
                    write_uid,
                    create_date,
                    write_date,
                    product_id,
                    grn_id,
                    received_qty,
                    issued_qty,
                    extra_issued_qty,
                    packing_style,
                    packing_per_qty,
                    remarks,
                    extra_issued_packing,
                    tablet_id
                FROM(
                    SELECT
                        prakruti_issue_grn_list_line.create_uid,
                        prakruti_issue_grn_list_line.write_uid,
                        prakruti_issue_grn_list_line.create_date,
                        prakruti_issue_grn_list_line.write_date,
                        prakruti_issue_grn_list_line.product_id,
                        prakruti_issue_grn_list_line.grn_id,
                        prakruti_issue_grn_list_line.received_qty,
                        prakruti_issue_grn_list_line.issued_qty,
                        prakruti_issue_grn_list_line.extra_issued_qty,
                        prakruti_issue_grn_list_line.packing_style,
                        prakruti_issue_grn_list_line.packing_per_qty,
                        prakruti_issue_grn_list_line.remarks,
                        prakruti_issue_grn_list_line.extra_issued_packing,
                        prakruti_store_issue.tablet_packing_bom_id AS tablet_id
                    FROM 
                        prakruti_issue_grn_list_line JOIN
                        prakruti_store_issue ON
                        prakruti_issue_grn_list_line.issue_id = prakruti_store_issue.id 
                    WHERE 
                        prakruti_issue_grn_list_line.issue_id = $1 
                    ) AS a JOIN (
                    SELECT 
                        prakruti_tablet.id AS tablet_packing_bom_id
                    FROM  
                        prakruti_tablet
                    WHERE
                        prakruti_tablet.id = $7
                                ) AS b ON a.tablet_id = b.tablet_packing_bom_id;
     -----------------------------------------------------------------------------------------       
            UPDATE
                prakruti_powder AS b
            SET
                state = 'extra_packing_issued',
                material_issued_by= a.issued_by
            FROM(
                SELECT
                    issued_by,
                    powder_packing_bom_id
                FROM
                    prakruti_store_issue JOIN
                    prakruti_powder ON
                    prakruti_store_issue.powder_packing_bom_id =prakruti_powder.id
                WHERE
                    prakruti_store_issue.id =CAST($1 AS INTEGER)
                ) AS a
            WHERE
                b.id = a.powder_packing_bom_id;
            
            UPDATE 
                prakruti_powder_line_packing as b 
            SET 
                extra_flag = 1,
                extra_issued_qty = a.extra_issued_qty,
                grn_no= a.grn_no,
                grn_list = b.grn_list || ', ' || a.grn_list,
                ar_no = a.ar_no,
                issue_common_id =a.id  
            FROM( 
                SELECT 
                    extra_issued_qty,
                    prakruti_store_issue_item.id,
                    prakruti_store_issue_item.grn_no,
                    prakruti_store_issue_item.grn_list, 
                    ar_no, 
                    powder_packing_bom_id ,
                    grid_common_id_bom 
                FROM 
                    prakruti_store_issue_item INNER JOIN 
                    prakruti_store_issue ON 
                    prakruti_store_issue.id =prakruti_store_issue_item.main_id 
                WHERE 
                    prakruti_store_issue.id =CAST($1 as INTEGER) 
                ) as a 
            WHERE 
                b.packing_id = a.powder_packing_bom_id AND 
                b.id =a.grid_common_id_bom;
                
                
            
                
            ---------------------------------------------------------------------
            -- INSERT THE GRN TABLE INTO POWDER FOR PACKING
            
            INSERT INTO prakruti_powder_bom_grn_list_line
                    (
                    create_uid,
                    write_uid,
                    create_date,
                    write_date,
                    product_id,
                    grn_id,
                    received_qty,
                    issued_qty,
                    extra_issued_qty,
                    packing_style,
                    packing_per_qty,
                    remarks,
                    extra_issued_packing,
                    powder_id
                    )
                SELECT
                    create_uid,
                    write_uid,
                    create_date,
                    write_date,
                    product_id,
                    grn_id,
                    received_qty,
                    issued_qty,
                    extra_issued_qty,
                    packing_style,
                    packing_per_qty,
                    remarks,
                    extra_issued_packing,
                    powder_id
                FROM(
                    SELECT
                        prakruti_issue_grn_list_line.create_uid,
                        prakruti_issue_grn_list_line.write_uid,
                        prakruti_issue_grn_list_line.create_date,
                        prakruti_issue_grn_list_line.write_date,
                        prakruti_issue_grn_list_line.product_id,
                        prakruti_issue_grn_list_line.grn_id,
                        prakruti_issue_grn_list_line.received_qty,
                        prakruti_issue_grn_list_line.issued_qty,
                        prakruti_issue_grn_list_line.extra_issued_qty,
                        prakruti_issue_grn_list_line.packing_style,
                        prakruti_issue_grn_list_line.packing_per_qty,
                        prakruti_issue_grn_list_line.remarks,
                        prakruti_issue_grn_list_line.extra_issued_packing,
                        prakruti_store_issue.powder_packing_bom_id AS powder_id
                    FROM 
                        prakruti_issue_grn_list_line JOIN
                        prakruti_store_issue ON
                        prakruti_issue_grn_list_line.issue_id = prakruti_store_issue.id 
                    WHERE 
                        prakruti_issue_grn_list_line.issue_id = $1 
                    ) AS a JOIN (
                    SELECT 
                        prakruti_powder.id AS powder_packing_bom_id
                    FROM  
                        prakruti_powder
                    WHERE
                        prakruti_powder.id = $9
                                ) AS b ON a.powder_id = b.powder_packing_bom_id;
            ---------------------------------------------------------------------
            
            --PERFORM stock_store_extra_issue($1);
            
            UPDATE
                    prakruti_grn_inspection_details_line
            SET
                    available_qty = available_qty - b.issued_qty
            FROM(
                SELECT
                    prakruti_issue_grn_list_line.grn_id,
                    prakruti_issue_grn_list_line.issued_qty,
                    prakruti_issue_grn_list_line.product_id
                FROM
                    prakruti_issue_grn_list_line JOIN
                    prakruti_grn_inspection_details ON
                    prakruti_issue_grn_list_line.grn_id = prakruti_grn_inspection_details.id
                WHERE
                    prakruti_issue_grn_list_line.issue_id = $1
                ) AS b
            WHERE
                b.product_id = prakruti_grn_inspection_details_line.product_id  AND b.grn_id = prakruti_grn_inspection_details_line.inspection_line_id;
        
        ELSIF extra_issue_packing >0 THEN
        
        
            
            UPDATE 
                prakruti_syrup_line_packing as b 
            SET 
                extra_issued_packing = a.extra_issued_packing,
                grn_no= a.grn_no,
                grn_list = b.grn_list || ', ' || a.grn_list,
                ar_no = a.ar_no,
                issue_common_id =a.id  
            FROM(
                SELECT 
                    extra_issued_packing,
                    prakruti_store_issue_item.id,
                    prakruti_store_issue_item.grn_no,
                    prakruti_store_issue_item.grn_list, 
                    ar_no, 
                    syrup_packing_bom_id ,
                    grid_common_id_bom 
                FROM 
                    prakruti_store_issue_item INNER JOIN 
                    prakruti_store_issue ON 
                    prakruti_store_issue.id =prakruti_store_issue_item.main_id 
                WHERE 
                    prakruti_store_issue.id =CAST($1 as INTEGER) 
                ) as a 
            WHERE 
                b.packing_id = a.syrup_packing_bom_id AND 
                b.id =a.grid_common_id_bom;
                
            ---------------------------------------------------------------------
            -- INSERT THE GRN TABLE INTO SYRUP FOR EXTRA PACKING
            
            INSERT INTO prakruti_syrup_bom_grn_list_line
                    (
                    create_uid,
                    write_uid,
                    create_date,
                    write_date,
                    product_id,
                    grn_id,
                    received_qty,
                    issued_qty,
                    extra_issued_qty,
                    packing_style,
                    packing_per_qty,
                    remarks,
                    extra_issued_packing,
                    syrup_id
                    )
                SELECT
                    create_uid,
                    write_uid,
                    create_date,
                    write_date,
                    product_id,
                    grn_id,
                    received_qty,
                    issued_qty,
                    extra_issued_qty,
                    packing_style,
                    packing_per_qty,
                    remarks,
                    extra_issued_packing,
                    syrup_id
                FROM(
                    SELECT
                        prakruti_issue_grn_list_line.create_uid,
                        prakruti_issue_grn_list_line.write_uid,
                        prakruti_issue_grn_list_line.create_date,
                        prakruti_issue_grn_list_line.write_date,
                        prakruti_issue_grn_list_line.product_id,
                        prakruti_issue_grn_list_line.grn_id,
                        prakruti_issue_grn_list_line.received_qty,
                        prakruti_issue_grn_list_line.issued_qty,
                        prakruti_issue_grn_list_line.extra_issued_qty,
                        prakruti_issue_grn_list_line.packing_style,
                        prakruti_issue_grn_list_line.packing_per_qty,
                        prakruti_issue_grn_list_line.remarks,
                        prakruti_issue_grn_list_line.extra_issued_packing,
                        prakruti_store_issue.syrup_packing_bom_id AS syrup_id
                    FROM 
                        prakruti_issue_grn_list_line JOIN
                        prakruti_store_issue ON
                        prakruti_issue_grn_list_line.issue_id = prakruti_store_issue.id 
                    WHERE 
                        prakruti_issue_grn_list_line.issue_id = $1 
                    ) AS a JOIN (
                    SELECT 
                        prakruti_syrup.id AS syrup_packing_bom_id
                    FROM  
                        prakruti_syrup
                    WHERE
                        prakruti_syrup.id = $6
                                ) AS b ON a.syrup_id = b.syrup_packing_bom_id;
            
            ---------------------------------------------------------------------
            
            UPDATE 
                prakruti_tablet_line_packing as b 
            SET 
                extra_issued_packing = a.extra_issued_packing,
                grn_no= a.grn_no,
                grn_list = b.grn_list || ', ' || a.grn_list,
                ar_no = a.ar_no ,
                issue_common_id =a.id
            FROM(
                SELECT 
                    extra_issued_packing,
                    prakruti_store_issue_item.id,
                    prakruti_store_issue_item.grn_no,
                    prakruti_store_issue_item.grn_list, 
                    ar_no, 
                    tablet_packing_bom_id ,
                    grid_common_id_bom 
                FROM 
                    prakruti_store_issue_item INNER JOIN 
                    prakruti_store_issue ON 
                    prakruti_store_issue.id =prakruti_store_issue_item.main_id 
                WHERE 
                    prakruti_store_issue.id =CAST($1 as INTEGER) 
                ) as a 
            WHERE 
                b.packing_id = a.tablet_packing_bom_id AND 
                b.id =a.grid_common_id_bom;
                
            ---------------------------------------------------------------------
            -- INSERT THE GRN TABLE INTO TABLET FOR EXTRA PACKING
            
            INSERT INTO prakruti_tablet_bom_grn_list_line
                    (
                    create_uid,
                    write_uid,
                    create_date,
                    write_date,
                    product_id,
                    grn_id,
                    received_qty,
                    issued_qty,
                    extra_issued_qty,
                    packing_style,
                    packing_per_qty,
                    remarks,
                    extra_issued_packing,
                    tablet_id
                    )
                SELECT
                    create_uid,
                    write_uid,
                    create_date,
                    write_date,
                    product_id,
                    grn_id,
                    received_qty,
                    issued_qty,
                    extra_issued_qty,
                    packing_style,
                    packing_per_qty,
                    remarks,
                    extra_issued_packing,
                    tablet_id
                FROM(
                    SELECT
                        prakruti_issue_grn_list_line.create_uid,
                        prakruti_issue_grn_list_line.write_uid,
                        prakruti_issue_grn_list_line.create_date,
                        prakruti_issue_grn_list_line.write_date,
                        prakruti_issue_grn_list_line.product_id,
                        prakruti_issue_grn_list_line.grn_id,
                        prakruti_issue_grn_list_line.received_qty,
                        prakruti_issue_grn_list_line.issued_qty,
                        prakruti_issue_grn_list_line.extra_issued_qty,
                        prakruti_issue_grn_list_line.packing_style,
                        prakruti_issue_grn_list_line.packing_per_qty,
                        prakruti_issue_grn_list_line.remarks,
                        prakruti_issue_grn_list_line.extra_issued_packing,
                        prakruti_store_issue.tablet_packing_bom_id AS tablet_id
                    FROM 
                        prakruti_issue_grn_list_line JOIN
                        prakruti_store_issue ON
                        prakruti_issue_grn_list_line.issue_id = prakruti_store_issue.id 
                    WHERE 
                        prakruti_issue_grn_list_line.issue_id = $1 
                    ) AS a JOIN (
                    SELECT 
                        prakruti_tablet.id AS tablet_packing_bom_id
                    FROM  
                        prakruti_tablet
                    WHERE
                        prakruti_tablet.id = $7
                                ) AS b ON a.tablet_id = b.tablet_packing_bom_id;
            ------------------------------------------------------------------------
              UPDATE 
                prakruti_powder_line_packing as b 
            SET 
                extra_flag = 1,
                extra_issued_packing = a.extra_issued_packing,
                grn_no= a.grn_no,
                grn_list = b.grn_list || ', ' || a.grn_list,
                ar_no = a.ar_no ,
                issue_common_id =a.id 
            FROM( 
                SELECT 
                    extra_issued_packing,
                    prakruti_store_issue_item.id,
                    prakruti_store_issue_item.grn_no,
                    prakruti_store_issue_item.grn_list, 
                    ar_no, 
                    powder_packing_bom_id ,
                    grid_common_id_bom 
                FROM 
                    prakruti_store_issue_item INNER JOIN 
                    prakruti_store_issue ON 
                    prakruti_store_issue.id =prakruti_store_issue_item.main_id 
                WHERE 
                    prakruti_store_issue.id =CAST($1 as INTEGER) 
                ) as a 
            WHERE 
                b.packing_id = a.powder_packing_bom_id AND 
                b.id =a.grid_common_id_bom;
                
                
            
                
            ---------------------------------------------------------------------
            -- INSERT THE GRN TABLE INTO POWDER FOR PACKING
            
            INSERT INTO prakruti_powder_bom_grn_list_line
                    (
                    create_uid,
                    write_uid,
                    create_date,
                    write_date,
                    product_id,
                    grn_id,
                    received_qty,
                    issued_qty,
                    extra_issued_qty,
                    packing_style,
                    packing_per_qty,
                    remarks,
                    extra_issued_packing,
                    powder_id
                    )
                SELECT
                    create_uid,
                    write_uid,
                    create_date,
                    write_date,
                    product_id,
                    grn_id,
                    received_qty,
                    issued_qty,
                    extra_issued_qty,
                    packing_style,
                    packing_per_qty,
                    remarks,
                    extra_issued_packing,
                    powder_id
                FROM(
                    SELECT
                        prakruti_issue_grn_list_line.create_uid,
                        prakruti_issue_grn_list_line.write_uid,
                        prakruti_issue_grn_list_line.create_date,
                        prakruti_issue_grn_list_line.write_date,
                        prakruti_issue_grn_list_line.product_id,
                        prakruti_issue_grn_list_line.grn_id,
                        prakruti_issue_grn_list_line.received_qty,
                        prakruti_issue_grn_list_line.issued_qty,
                        prakruti_issue_grn_list_line.extra_issued_qty,
                        prakruti_issue_grn_list_line.packing_style,
                        prakruti_issue_grn_list_line.packing_per_qty,
                        prakruti_issue_grn_list_line.remarks,
                        prakruti_issue_grn_list_line.extra_issued_packing,
                        prakruti_store_issue.powder_packing_bom_id AS powder_id
                    FROM 
                        prakruti_issue_grn_list_line JOIN
                        prakruti_store_issue ON
                        prakruti_issue_grn_list_line.issue_id = prakruti_store_issue.id 
                    WHERE 
                        prakruti_issue_grn_list_line.issue_id = $1 
                    ) AS a JOIN (
                    SELECT 
                        prakruti_powder.id AS powder_packing_bom_id
                    FROM  
                        prakruti_powder
                    WHERE
                        prakruti_powder.id = $9
                                ) AS b ON a.powder_id = b.powder_packing_bom_id;
   
            ---------------------------------------------------------------------
            
            --PERFORM stock_store_extra_packing_issue($1);
            
            UPDATE
                    prakruti_grn_inspection_details_line
            SET
                    available_qty = available_qty - b.issued_qty
            FROM(
                SELECT
                    prakruti_issue_grn_list_line.grn_id,
                    prakruti_issue_grn_list_line.issued_qty,
                    prakruti_issue_grn_list_line.product_id
                FROM
                    prakruti_issue_grn_list_line JOIN
                    prakruti_grn_inspection_details ON
                    prakruti_issue_grn_list_line.grn_id = prakruti_grn_inspection_details.id
                WHERE
                    prakruti_issue_grn_list_line.issue_id = $1
                ) AS b
            WHERE
                b.product_id = prakruti_grn_inspection_details_line.product_id  AND b.grn_id = prakruti_grn_inspection_details_line.inspection_line_id;
        
        ELSE
            RETURN 'Please Enter Qty';
        END IF;
        
        select count(prakruti_store_request_item.id) INTO no_of_products_in_request from prakruti_store_request_item JOIN prakruti_store_request ON prakruti_store_request.id=prakruti_store_request_item.main_id JOIN prakruti_store_issue ON prakruti_store_issue.request_no= prakruti_store_request.store_request_no WHERE prakruti_store_issue.id= $1 AND prakruti_store_issue.request_no=$2;
        
        select count(prakruti_store_issue_item.id) INTO no_of_products_in_issue from prakruti_store_issue_item INNER JOIN prakruti_store_issue ON prakruti_store_issue.id= prakruti_store_issue_item.main_id WHERE prakruti_store_issue.request_no= $2 AND prakruti_store_issue.id=$1; 
        SELECT
            requested_quantity INTO request_qty
        FROM
            prakruti_store_issue_item
        WHERE
           prakruti_store_issue_item.main_id= $1;
        SELECT
            issued_quantity INTO isued_qty
        FROM
            prakruti_store_issue_item
        WHERE
            prakruti_store_issue_item.main_id= $1;
        SELECT
            extra_issued_qty INTO extra_isued_qty
        FROM
            prakruti_store_issue_item
        WHERE
            prakruti_store_issue_item.main_id= $1;
        IF no_of_products_in_request = no_of_products_in_issue THEN
            IF (request_qty=isued_qty) or (request_qty=extra_isued_qty)THEN
        
                UPDATE prakruti_store_issue SET status = 'issue' WHERE prakruti_store_issue.id = $1;
                UPDATE prakruti_store_approve_request SET state = 'issued' WHERE prakruti_store_approve_request.request_no = $2;
                UPDATE prakruti_store_request SET state = 'issued' WHERE prakruti_store_request.store_request_no = $2;
            ELSIF (isued_qty>request_qty)  or (extra_isued_qty > request_qty) THEN
                UPDATE prakruti_store_issue SET status = 'extra_issue' WHERE prakruti_store_issue.id = $1;
                UPDATE prakruti_store_approve_request SET state = 'extra_issue' WHERE prakruti_store_approve_request.request_no = $2;
                UPDATE prakruti_store_request SET state = 'extra_issue' WHERE prakruti_store_request.store_request_no = $2;
            ELSE
            
                UPDATE prakruti_store_issue SET status = 'partial_issue' WHERE prakruti_store_issue.id = $1;
                UPDATE prakruti_store_approve_request SET state = 'partial_issue' WHERE prakruti_store_approve_request.request_no = $2;
                UPDATE prakruti_store_request SET state = 'partial_issue' WHERE prakruti_store_request.store_request_no = $2;
            END IF;
        
	ELSE
            
            UPDATE prakruti_store_issue SET status = 'partial_issue' WHERE prakruti_store_issue.id = $1;
            UPDATE prakruti_store_approve_request SET state = 'partial_issue' WHERE prakruti_store_approve_request.request_no = $2;
            UPDATE prakruti_store_request SET state = 'partial_issue' WHERE prakruti_store_request.store_request_no = $2;
            
        END IF;
        
        
    ELSE
        RETURN 'Enter Packing Details';
    END IF;
    

ELSE
    RETURN 'Not Enough Stock';
END IF;

RETURN qty;
                                
END;
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION public.stock_store(integer, character varying, integer, integer, integer, integer, integer, integer, integer)
  OWNER TO odoo;
 
 CREATE OR REPLACE FUNCTION public.stock_return_issue(integer)
  RETURNS integer AS
$BODY$
DECLARE qty   integer;
BEGIN

qty = 0;

INSERT INTO prakruti_stock
        (
        product_id,
        uom_id,
        entered_date,
        location_id,
        origin,
        company_id,
        --grn_id,
        issue_id,
        --batch_id,
        --dispatch_id,
        --slip_id,
        --adjustment_id,
        --inward_id,
        --sales_grn_id,
        virtual_qty,
        product_qty,
        --reserved_qty,
        --customer_id,
        --vendor_id,
        remarks,
        create_date,
        create_uid,
        write_date,
        write_uid
        )

SELECT
        product_id,
        uom_id,
        entered_date,
        location_id,
        origin,
        company_id,
        --grn_id,
        issue_id,
        --batch_id,
        --dispatch_id,
        --slip_id,
        --adjustment_id,
        --inward_id,
        --sales_grn_id,
        virtual_qty,
        product_qty,
        --reserved_qty,
        --customer_id,
        --vendor_id,
        remarks,
        create_date,
        create_uid,
        write_date,
        write_uid
FROM(
    SELECT
        prakruti_store_issue_item.product_id,
        prakruti_store_issue_item.uom_id,
        prakruti_store_issue.write_date AS entered_date,
        prakruti_store_issue.location_id,
        prakruti_store_issue.issue_no AS origin,
        prakruti_store_issue.company_id,
        --prakruti_store_issue.id AS grn_id,
        prakruti_store_issue.id AS issue_id,
        --prakruti_store_issue.batch_id,
        --prakruti_store_issue.dispatch_id,
        --prakruti_store_issue.slip_id,
        --prakruti_store_issue.adjustment_id,
        --prakruti_store_issue.inward_id,
        --prakruti_store_issue.id AS sales_grn_id,
        prakruti_store_issue_item.qty_returned AS virtual_qty,
        prakruti_store_issue_item.qty_returned AS product_qty,
        --prakruti_store_issue.reserved_qty,
        --prakruti_store_issue.customer_id,
        --prakruti_store_issue.vendor_id,
        prakruti_store_issue.remarks,
        prakruti_store_issue.write_date AS create_date,
        prakruti_store_issue.write_date AS write_date,
        prakruti_store_issue.write_uid AS write_uid,
        prakruti_store_issue.create_uid AS create_uid
    FROM
        prakruti_store_issue JOIN
        prakruti_store_issue_item ON
        prakruti_store_issue.id = prakruti_store_issue_item.main_id
    WHERE
        prakruti_store_issue.id = $1
    ) AS C;

RETURN qty;

END;
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION public.stock_return_issue(integer)
  OWNER TO odoo; 
  
  