# -*- coding: utf-8 -*-
from openerp.osv import osv,fields
from openerp.tools.translate import _
import time
from datetime import datetime
import sys, os, urllib2, urlparse
import sys, os, urllib2, urlparse
from email.MIMEText import MIMEText
from email.MIMEImage import MIMEImage
from email.MIMEMultipart import MIMEMultipart
import email, re
from datetime import datetime
from datetime import date, timedelta
import cgi
import lxml.html
import lxml.html.clean as clean
from lxml import etree
import cgi
import logging
import lxml.html
import lxml.html.clean as clean
import openerp.pooler as pooler
import random
import re
import socket
import threading
import time

class prakruti_po_tracking_notifications(osv.osv_memory):
    _name = "prakruti.po_tracking_notifications"
    _description = "Prakruti PO Tracking Notifications"  

    def send_mail_to_higher_authority(self, cr, uid, ids, cron_mode=True, context=None):        
        ids = 22
        email_obj  = self.pool.get('email.template')
        template_id=email_obj.search(cr, uid, [('name', '=', 'PO Delivery Date Exceeds')], context=context)[0]
        cr.execute(''' SELECT  
                                prakruti_logistics_po_tracking.write_date,
                                CURRENT_TIMESTAMP,
                                prakruti_logistics_po_tracking.po_no,
                                prakruti_logistics_po_tracking.tracking_number,
                                prakruti_logistics_po_tracking.expected_date,
                                res_partner.name as vendor_id,
                                res_partner.name as purchase_manager,
                                CURRENT_TIMESTAMP-prakruti_logistics_po_tracking.write_date as delay_datetime,
                                cast(prakruti_logistics_po_tracking.write_date as time) as write_time,
                                cast(CURRENT_TIMESTAMP as time) as current_date,
                                cast(CURRENT_TIMESTAMP as time)-cast(prakruti_logistics_po_tracking.write_date as time) as delay_time,
                                product_product.name_template as product_name,
                                (extract(epoch from (timestamp 'now()' - prakruti_logistics_po_tracking.write_date))/60)/60 as hours 
                        FROM 
                                prakruti_logistics_po_tracking JOIN 
                                prakruti_purchase_line_in_logistics ON 
                                prakruti_purchase_line_in_logistics.logistics_line_id = prakruti_logistics_po_tracking.id JOIN 
                                product_product ON 
                                prakruti_purchase_line_in_logistics.product_id = product_product.id JOIN
                                res_users ON 
                                prakruti_logistics_po_tracking.purchase_manager = res_users.id JOIN 
                                res_partner ON res_users.partner_id = res_partner.id
                        WHERE 
                                prakruti_logistics_po_tracking.status = 'in_transit' AND 
                                (CAST('2017-12-16 00:00:00' as timestamp) =
                                prakruti_logistics_po_tracking.write_date) OR 
				
                                prakruti_logistics_po_tracking.write_date > CAST('2017-12-16 00:00:00' as timestamp)
                                 ''' )       
        for plant in cr.dictfetchall():
            po_no = plant['po_no']
            tracking_number = plant['tracking_number']
            expected_date = plant['expected_date']
            product_name = plant['product_name']
            hours = plant['hours']
            sub =  'Notifications From PO Tracking (Delivery Date Exceeds)'          

            yesterday = date.today() - timedelta(1)
            YesDay = yesterday.strftime('%d-%m-%Y')
            yester_day = str(YesDay)
            print 'yester_dayyester_day',yester_day
            if hours> 2:
            
            
               
                body = '''Dear Sir/Madam <br/><br/>''' + '''The Order NO''' + po_no +''' whose actual delivery date was ''' + expected_date + ''' has exceeded its delivery schedule with tracking number'''+ tracking_number+'''.<br/><br/>'''+'''<i>This is a autogenerated mail please do not reply</i><br/><br/>'''+''' Thanks & Regards <br/>'''+ '''PRAKRUTI PRODUCTS PVT. LTD.'''
            
                #email_obj.write(cr, uid, template_id, {'email_to': 'induja.m@netsoftgroup.in'})
                email_obj.write(cr, uid, template_id, {'subject': sub})
                email_obj.write(cr, uid, template_id, {'body_html': body})
            
                my_date = fields.datetime.context_timestamp(cr, uid, datetime.now(), context=context)
            
                #email_obj = self.pool.get('email.template').send_mail(cr, uid, template_id,ids[0],force_send=True)
                email_obj.send_mail(cr, uid, template_id, ids, force_send=True)
    
prakruti_po_tracking_notifications()
