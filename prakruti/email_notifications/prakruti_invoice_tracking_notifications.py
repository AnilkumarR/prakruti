# -*- coding: utf-8 -*-
from openerp.osv import osv,fields
from openerp.tools.translate import _
import time
from datetime import datetime
import sys, os, urllib2, urlparse
import sys, os, urllib2, urlparse
from email.MIMEText import MIMEText
from email.MIMEImage import MIMEImage
from email.MIMEMultipart import MIMEMultipart
import email, re
from datetime import datetime
from datetime import date, timedelta
import cgi
import lxml.html
import lxml.html.clean as clean
from lxml import etree
import cgi
import logging
import lxml.html
import lxml.html.clean as clean
import openerp.pooler as pooler
import random
import re
import socket
import threading
import time

class prakruti_invoice_tracking_notifications(osv.osv_memory):
    _name = "prakruti.invoice_tracking_notifications"
    _description = "Prakruti Invoice Tracking Notifications"  

    def send_mail_to_higher_authority(self, cr, uid, ids, cron_mode=True, context=None):        
        ids = 22
        email_obj  = self.pool.get('email.template')
        template_id=email_obj.search(cr, uid, [('name', '=', 'Invoice Delivery Date Exceeds')], context=context)[0]
        cr.execute(''' SELECT 
                                prakruti_logistics_invoice_tracking.write_date,
                                CURRENT_TIMESTAMP,
                                prakruti_logistics_invoice_tracking.dispatch_no,
                                prakruti_logistics_invoice_tracking.tracking_number,
                                prakruti_logistics_invoice_tracking.expected_date,
                                res_partner.name as customer_id,
                                res_partner.name as dispatch_id,
                                CURRENT_TIMESTAMP-prakruti_logistics_invoice_tracking.write_date as delay_datetime,
                                cast(prakruti_logistics_invoice_tracking.write_date as time) as write_time,
                                cast(CURRENT_TIMESTAMP as time) as current_date,
                                cast(CURRENT_TIMESTAMP as time)-cast(prakruti_logistics_invoice_tracking.write_date as time) as delay_time,
                                (extract(epoch from (timestamp 'now()' - prakruti_logistics_invoice_tracking.write_date))/60)/60 as hours ,
                                product_product.name_template as product_name 
                        FROM 
                                prakruti_logistics_invoice_tracking JOIN 
                                prakruti_sales_line_in_logistics ON 
                                prakruti_sales_line_in_logistics.logistics_line_id = prakruti_logistics_invoice_tracking.id JOIN 
                                product_product ON 
                                prakruti_sales_line_in_logistics.product_id = product_product.id JOIN
                                res_users ON 
                                prakruti_logistics_invoice_tracking.dispatch_id = res_users.id JOIN 
                                res_partner ON res_users.partner_id = res_partner.id
                        WHERE 
                                prakruti_logistics_invoice_tracking.status = 'in_transit' AND 
                                expected_date < CURRENT_DATE AND 
                                (CAST('2017-12-16 00:00:00' as timestamp) =
                                prakruti_logistics_invoice_tracking.write_date) OR 
				
                                prakruti_logistics_invoice_tracking.write_date > CAST('2017-12-16 00:00:00' as timestamp)''' )       
        for plant in cr.dictfetchall():
            dispatch_no = plant['dispatch_no']
            tracking_number = plant['tracking_number']
            expected_date = plant['expected_date']
            product_name = plant['product_name']
            hours = plant['hours']
            sub =  'Notifications From Invoice Tracking Delivery Date Exceeds'          

            yesterday = date.today() - timedelta(1)
            YesDay = yesterday.strftime('%d-%m-%Y')
            yester_day = str(YesDay)
            if hours> 2:
            
               
                body = '''Dear Sir/Madam <br/><br/>''' + '''The Dispatch No   <strong>''' + dispatch_no +''' whose actual delivery date was  ''' + expected_date + '''  has exceeds its delivery schedule having tracking number  <strong>'''+ tracking_number+'''.<br/><br/>'''+'''<i>This is a autogenerated mail please do not reply</i><br/><br/>'''+''' Thanks & Regards <br/>'''+ '''PRAKRUTI PRODUCTS PVT. LTD.'''
            
                #email_obj.write(cr, uid, template_id, {'email_to': 'induja.m@netsoftgroup.in'})
                email_obj.write(cr, uid, template_id, {'subject': sub})
                email_obj.write(cr, uid, template_id, {'body_html': body})
            
                my_date = fields.datetime.context_timestamp(cr, uid, datetime.now(), context=context)
            
                #email_obj = self.pool.get('email.template').send_mail(cr, uid, template_id,ids[0],force_send=True)
                email_obj.send_mail(cr, uid, template_id, ids, force_send=True)
    
prakruti_invoice_tracking_notifications()
